

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Dec 17 22:51:12 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    62                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    63  0000                     
    64                           ; Version 2.20
    65                           ; Generated 12/02/2020 GMT
    66                           ; 
    67                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC18F4520 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     
    99                           	psect	idataCOMRAM
   100  005D32                     __pidataCOMRAM:
   101                           	callstack 0
   102                           
   103                           ;initializer for _hora
   104  005D32  E200               	dw	57856
   105  005D34  0004               	dw	4
   106                           
   107                           ;initializer for _alarmeTocando
   108  005D36  30                 	db	48
   109                           
   110                           ;initializer for _freq
   111  005D37  66                 	db	102
   112                           
   113                           ;initializer for _radioAtivo
   114  005D38  31                 	db	49
   115                           
   116                           ;initializer for _alarmeAtivo
   117  005D39  30                 	db	48
   118                           
   119                           ;initializer for _soneca
   120  005D3A  30                 	db	48
   121                           
   122                           ;initializer for _disp
   123  005D3B  01                 	db	1
   124                           
   125                           	psect	mediumconst
   126  007EDA                     __pmediumconst:
   127                           	callstack 0
   128  007EDA  00                 	db	0
   129  007EDB                     _valor:
   130                           	callstack 0
   131  007EDB  3F                 	db	63
   132  007EDC  06                 	db	6
   133  007EDD  5B                 	db	91
   134  007EDE  4F                 	db	79
   135  007EDF  66                 	db	102
   136  007EE0  6D                 	db	109
   137  007EE1  7D                 	db	125
   138  007EE2  07                 	db	7
   139  007EE3  7F                 	db	127
   140  007EE4  6F                 	db	111
   141  007EE5  77                 	db	119
   142  007EE6  7C                 	db	124
   143  007EE7  39                 	db	57
   144  007EE8  5E                 	db	94
   145  007EE9  79                 	db	121
   146  007EEA  71                 	db	113
   147  007EEB                     __end_of_valor:
   148                           	callstack 0
   149  007EEB                     _charKey:
   150                           	callstack 0
   151  007EEB  55                 	db	85
   152  007EEC  4C                 	db	76
   153  007EED  44                 	db	68
   154  007EEE  52                 	db	82
   155  007EEF  53                 	db	83
   156  007EF0  58                 	db	88
   157  007EF1  41                 	db	65
   158  007EF2  42                 	db	66
   159  007EF3  59                 	db	89
   160  007EF4  73                 	db	115
   161  007EF5                     __end_of_charKey:
   162                           	callstack 0
   163  0000                     _T0CON	set	4053
   164  0000                     _TMR0L	set	4054
   165  0000                     _TMR0H	set	4055
   166  0000                     _INTCON	set	4082
   167  0000                     _T2CON	set	4042
   168  0000                     _CCP2CON	set	4026
   169  0000                     _CCPR2L	set	4027
   170  0000                     _PR2	set	4043
   171  0000                     _TRISE	set	3990
   172  0000                     _TRISD	set	3989
   173  0000                     _TRISC	set	3988
   174  0000                     _TRISB	set	3987
   175  0000                     _TRISA	set	3986
   176  0000                     _PORTE	set	3972
   177  0000                     _PORTD	set	3971
   178  0000                     _PORTC	set	3970
   179  0000                     _PORTB	set	3969
   180  0000                     _PORTA	set	3968
   181  0000                     _ADRESL	set	4035
   182  0000                     _ADRESH	set	4036
   183  0000                     _ADCON2	set	4032
   184  0000                     _ADCON1	set	4033
   185  0000                     _ADCON0	set	4034
   186  007EF5                     STR_10:
   187  007EF5  41                 	db	65	;'A'
   188  007EF6  6C                 	db	108	;'l'
   189  007EF7  61                 	db	97	;'a'
   190  007EF8  72                 	db	114	;'r'
   191  007EF9  6D                 	db	109	;'m'
   192  007EFA  65                 	db	101	;'e'
   193  007EFB  3A                 	db	58	;':'
   194  007EFC  20                 	db	32
   195  007EFD  64                 	db	100	;'d'
   196  007EFE  65                 	db	101	;'e'
   197  007EFF  73                 	db	115	;'s'
   198  007F00  6C                 	db	108	;'l'
   199  007F01  69                 	db	105	;'i'
   200  007F02  67                 	db	103	;'g'
   201  007F03  61                 	db	97	;'a'
   202  007F04  64                 	db	100	;'d'
   203  007F05  6F                 	db	111	;'o'
   204  007F06  00                 	db	0
   205  007F07                     STR_17:
   206  007F07  4D                 	db	77	;'M'
   207  007F08  65                 	db	101	;'e'
   208  007F09  6E                 	db	110	;'n'
   209  007F0A  75                 	db	117	;'u'
   210  007F0B  20                 	db	32
   211  007F0C  20                 	db	32
   212  007F0D  20                 	db	32
   213  007F0E  20                 	db	32
   214  007F0F  20                 	db	32
   215  007F10  20                 	db	32
   216  007F11  20                 	db	32
   217  007F12  20                 	db	32
   218  007F13  20                 	db	32
   219  007F14  20                 	db	32
   220  007F15  20                 	db	32
   221  007F16  20                 	db	32
   222  007F17  00                 	db	0
   223  007F18                     STR_2:
   224  007F18  52                 	db	82	;'R'
   225  007F19  61                 	db	97	;'a'
   226  007F1A  64                 	db	100	;'d'
   227  007F1B  69                 	db	105	;'i'
   228  007F1C  6F                 	db	111	;'o'
   229  007F1D  3A                 	db	58	;':'
   230  007F1E  20                 	db	32
   231  007F1F  64                 	db	100	;'d'
   232  007F20  65                 	db	101	;'e'
   233  007F21  73                 	db	115	;'s'
   234  007F22  6C                 	db	108	;'l'
   235  007F23  69                 	db	105	;'i'
   236  007F24  67                 	db	103	;'g'
   237  007F25  61                 	db	97	;'a'
   238  007F26  64                 	db	100	;'d'
   239  007F27  6F                 	db	111	;'o'
   240  007F28  00                 	db	0
   241  007F29                     STR_16:
   242  007F29  4D                 	db	77	;'M'
   243  007F2A  75                 	db	117	;'u'
   244  007F2B  64                 	db	100	;'d'
   245  007F2C  61                 	db	97	;'a'
   246  007F2D  72                 	db	114	;'r'
   247  007F2E  20                 	db	32
   248  007F2F  68                 	db	104	;'h'
   249  007F30  6F                 	db	111	;'o'
   250  007F31  72                 	db	114	;'r'
   251  007F32  61                 	db	97	;'a'
   252  007F33  20                 	db	32
   253  007F34  20                 	db	32
   254  007F35  20                 	db	32
   255  007F36  20                 	db	32
   256  007F37  20                 	db	32
   257  007F38  00                 	db	0
   258  007F39                     STR_15:
   259  007F39  46                 	db	70	;'F'
   260  007F3A  72                 	db	114	;'r'
   261  007F3B  65                 	db	101	;'e'
   262  007F3C  71                 	db	113	;'q'
   263  007F3D  2E                 	db	46
   264  007F3E  20                 	db	32
   265  007F3F  72                 	db	114	;'r'
   266  007F40  61                 	db	97	;'a'
   267  007F41  64                 	db	100	;'d'
   268  007F42  69                 	db	105	;'i'
   269  007F43  6F                 	db	111	;'o'
   270  007F44  20                 	db	32
   271  007F45  20                 	db	32
   272  007F46  20                 	db	32
   273  007F47  20                 	db	32
   274  007F48  00                 	db	0
   275  007F49                     STR_14:
   276  007F49  41                 	db	65	;'A'
   277  007F4A  74                 	db	116	;'t'
   278  007F4B  69                 	db	105	;'i'
   279  007F4C  76                 	db	118	;'v'
   280  007F4D  61                 	db	97	;'a'
   281  007F4E  72                 	db	114	;'r'
   282  007F4F  20                 	db	32
   283  007F50  72                 	db	114	;'r'
   284  007F51  61                 	db	97	;'a'
   285  007F52  64                 	db	100	;'d'
   286  007F53  69                 	db	105	;'i'
   287  007F54  6F                 	db	111	;'o'
   288  007F55  20                 	db	32
   289  007F56  20                 	db	32
   290  007F57  20                 	db	32
   291  007F58  00                 	db	0
   292  007F59                     STR_12:
   293  007F59  41                 	db	65	;'A'
   294  007F5A  74                 	db	116	;'t'
   295  007F5B  69                 	db	105	;'i'
   296  007F5C  76                 	db	118	;'v'
   297  007F5D  61                 	db	97	;'a'
   298  007F5E  72                 	db	114	;'r'
   299  007F5F  20                 	db	32
   300  007F60  61                 	db	97	;'a'
   301  007F61  6C                 	db	108	;'l'
   302  007F62  61                 	db	97	;'a'
   303  007F63  72                 	db	114	;'r'
   304  007F64  6D                 	db	109	;'m'
   305  007F65  65                 	db	101	;'e'
   306  007F66  20                 	db	32
   307  007F67  20                 	db	32
   308  007F68  00                 	db	0
   309  007F69                     STR_13:
   310  007F69  48                 	db	72	;'H'
   311  007F6A  6F                 	db	111	;'o'
   312  007F6B  72                 	db	114	;'r'
   313  007F6C  61                 	db	97	;'a'
   314  007F6D  72                 	db	114	;'r'
   315  007F6E  69                 	db	105	;'i'
   316  007F6F  6F                 	db	111	;'o'
   317  007F70  20                 	db	32
   318  007F71  61                 	db	97	;'a'
   319  007F72  6C                 	db	108	;'l'
   320  007F73  61                 	db	97	;'a'
   321  007F74  72                 	db	114	;'r'
   322  007F75  6D                 	db	109	;'m'
   323  007F76  65                 	db	101	;'e'
   324  007F77  20                 	db	32
   325  007F78  00                 	db	0
   326  007F79                     STR_6:
   327  007F79  46                 	db	70	;'F'
   328  007F7A  72                 	db	114	;'r'
   329  007F7B  65                 	db	101	;'e'
   330  007F7C  71                 	db	113	;'q'
   331  007F7D  75                 	db	117	;'u'
   332  007F7E  65                 	db	101	;'e'
   333  007F7F  6E                 	db	110	;'n'
   334  007F80  63                 	db	99	;'c'
   335  007F81  69                 	db	105	;'i'
   336  007F82  61                 	db	97	;'a'
   337  007F83  3A                 	db	58	;':'
   338  007F84  20                 	db	32
   339  007F85  41                 	db	65	;'A'
   340  007F86  4D                 	db	77	;'M'
   341  007F87  00                 	db	0
   342  007F88                     STR_5:
   343  007F88  46                 	db	70	;'F'
   344  007F89  72                 	db	114	;'r'
   345  007F8A  65                 	db	101	;'e'
   346  007F8B  71                 	db	113	;'q'
   347  007F8C  75                 	db	117	;'u'
   348  007F8D  65                 	db	101	;'e'
   349  007F8E  6E                 	db	110	;'n'
   350  007F8F  63                 	db	99	;'c'
   351  007F90  69                 	db	105	;'i'
   352  007F91  61                 	db	97	;'a'
   353  007F92  3A                 	db	58	;':'
   354  007F93  20                 	db	32
   355  007F94  46                 	db	70	;'F'
   356  007F95  4D                 	db	77	;'M'
   357  007F96  00                 	db	0
   358  007F97                     STR_7:
   359  007F97  68                 	db	104	;'h'
   360  007F98  6F                 	db	111	;'o'
   361  007F99  72                 	db	114	;'r'
   362  007F9A  61                 	db	97	;'a'
   363  007F9B  20                 	db	32
   364  007F9C  64                 	db	100	;'d'
   365  007F9D  6F                 	db	111	;'o'
   366  007F9E  20                 	db	32
   367  007F9F  61                 	db	97	;'a'
   368  007FA0  6C                 	db	108	;'l'
   369  007FA1  61                 	db	97	;'a'
   370  007FA2  72                 	db	114	;'r'
   371  007FA3  6D                 	db	109	;'m'
   372  007FA4  65                 	db	101	;'e'
   373  007FA5  00                 	db	0
   374  007FA6                     STR_11:
   375  007FA6  41                 	db	65	;'A'
   376  007FA7  6C                 	db	108	;'l'
   377  007FA8  61                 	db	97	;'a'
   378  007FA9  72                 	db	114	;'r'
   379  007FAA  6D                 	db	109	;'m'
   380  007FAB  65                 	db	101	;'e'
   381  007FAC  3A                 	db	58	;':'
   382  007FAD  20                 	db	32
   383  007FAE  6C                 	db	108	;'l'
   384  007FAF  69                 	db	105	;'i'
   385  007FB0  67                 	db	103	;'g'
   386  007FB1  61                 	db	97	;'a'
   387  007FB2  64                 	db	100	;'d'
   388  007FB3  6F                 	db	111	;'o'
   389  007FB4  00                 	db	0
   390  007FB5  41                 	db	65	;'A'
   391  007FB6  6C                 	db	108	;'l'
   392  007FB7  61                 	db	97	;'a'
   393  007FB8  72                 	db	114	;'r'
   394  007FB9  6D                 	db	109	;'m'
   395  007FBA  65                 	db	101	;'e'
   396  007FBB  20                 	db	32
   397  007FBC  74                 	db	116	;'t'
   398  007FBD  6F                 	db	111	;'o'
   399  007FBE  63                 	db	99	;'c'
   400  007FBF  61                 	db	97	;'a'
   401  007FC0  6E                 	db	110	;'n'
   402  007FC1  64                 	db	100	;'d'
   403  007FC2  6F                 	db	111	;'o'
   404  007FC3  00                 	db	0
   405  007FC4                     STR_3:
   406  007FC4  52                 	db	82	;'R'
   407  007FC5  61                 	db	97	;'a'
   408  007FC6  64                 	db	100	;'d'
   409  007FC7  69                 	db	105	;'i'
   410  007FC8  6F                 	db	111	;'o'
   411  007FC9  3A                 	db	58	;':'
   412  007FCA  20                 	db	32
   413  007FCB  6C                 	db	108	;'l'
   414  007FCC  69                 	db	105	;'i'
   415  007FCD  67                 	db	103	;'g'
   416  007FCE  61                 	db	97	;'a'
   417  007FCF  64                 	db	100	;'d'
   418  007FD0  6F                 	db	111	;'o'
   419  007FD1  00                 	db	0
   420  007FD2  70                 	db	112	;'p'
   421  007FD3  72                 	db	114	;'r'
   422  007FD4  65                 	db	101	;'e'
   423  007FD5  73                 	db	115	;'s'
   424  007FD6  73                 	db	115	;'s'
   425  007FD7  69                 	db	105	;'i'
   426  007FD8  6F                 	db	111	;'o'
   427  007FD9  6E                 	db	110	;'n'
   428  007FDA  65                 	db	101	;'e'
   429  007FDB  20                 	db	32
   430  007FDC  73                 	db	115	;'s'
   431  007FDD  20                 	db	32
   432  007FDE  00                 	db	0
   433  007FDF                     STR_31:
   434  007FDF  52                 	db	82	;'R'
   435  007FE0  61                 	db	97	;'a'
   436  007FE1  64                 	db	100	;'d'
   437  007FE2  69                 	db	105	;'i'
   438  007FE3  6F                 	db	111	;'o'
   439  007FE4  20                 	db	32
   440  007FE5  41                 	db	65	;'A'
   441  007FE6  4D                 	db	77	;'M'
   442  007FE7  00                 	db	0
   443  007FE8                     STR_30:
   444  007FE8  52                 	db	82	;'R'
   445  007FE9  61                 	db	97	;'a'
   446  007FEA  64                 	db	100	;'d'
   447  007FEB  69                 	db	105	;'i'
   448  007FEC  6F                 	db	111	;'o'
   449  007FED  20                 	db	32
   450  007FEE  46                 	db	70	;'F'
   451  007FEF  4D                 	db	77	;'M'
   452  007FF0  00                 	db	0
   453  007FF1                     STR_9:
   454  007FF1  41                 	db	65	;'A'
   455  007FF2  6C                 	db	108	;'l'
   456  007FF3  61                 	db	97	;'a'
   457  007FF4  72                 	db	114	;'r'
   458  007FF5  6D                 	db	109	;'m'
   459  007FF6  65                 	db	101	;'e'
   460  007FF7  00                 	db	0
   461  007FF8                     STR_1:
   462  007FF8  52                 	db	82	;'R'
   463  007FF9  61                 	db	97	;'a'
   464  007FFA  64                 	db	100	;'d'
   465  007FFB  69                 	db	105	;'i'
   466  007FFC  6F                 	db	111	;'o'
   467  007FFD  00                 	db	0
   468  007FFE  00                 	db	0	; dummy byte at the end
   469  0000                     
   470                           ; #config settings
   471                           
   472                           	psect	cinit
   473  005EC6                     __pcinit:
   474                           	callstack 0
   475  005EC6                     start_initialization:
   476                           	callstack 0
   477  005EC6                     __initialization:
   478                           	callstack 0
   479                           
   480                           ; Initialize objects allocated to COMRAM (10 bytes)
   481                           ; load TBLPTR registers with __pidataCOMRAM
   482  005EC6  0E32               	movlw	low __pidataCOMRAM
   483  005EC8  6EF6               	movwf	tblptrl,c
   484  005ECA  0E5D               	movlw	high __pidataCOMRAM
   485  005ECC  6EF7               	movwf	tblptrh,c
   486  005ECE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   487  005ED0  6EF8               	movwf	tblptru,c
   488  005ED2  EE00  F04A         	lfsr	0,__pdataCOMRAM
   489  005ED6  EE10 F00A          	lfsr	1,10
   490  005EDA                     copy_data0:
   491  005EDA  0009               	tblrd		*+
   492  005EDC  CFF5 FFEE          	movff	tablat,postinc0
   493  005EE0  50E5               	movf	postdec1,w,c
   494  005EE2  50E1               	movf	fsr1l,w,c
   495  005EE4  E1FA               	bnz	copy_data0
   496                           
   497                           ; Clear objects allocated to COMRAM (32 bytes)
   498  005EE6  EE00  F02A         	lfsr	0,__pbssCOMRAM
   499  005EEA  0E20               	movlw	32
   500  005EEC                     clear_0:
   501  005EEC  6AEE               	clrf	postinc0,c
   502  005EEE  06E8               	decf	wreg,f,c
   503  005EF0  E1FD               	bnz	clear_0
   504  005EF2                     end_of_initialization:
   505                           	callstack 0
   506  005EF2                     __end_of__initialization:
   507                           	callstack 0
   508  005EF2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   509  005EF4  6EF8               	movwf	tblptru,c
   510  005EF6  0100               	movlb	0
   511  005EF8  EF01  F034         	goto	_main	;jump to C main() function
   512                           
   513                           	psect	bssCOMRAM
   514  00002A                     __pbssCOMRAM:
   515                           	callstack 0
   516  00002A                     _horaAlarme:
   517                           	callstack 0
   518  00002A                     	ds	4
   519  00002E                     _fmStored:
   520                           	callstack 0
   521  00002E                     	ds	4
   522  000032                     _am:
   523                           	callstack 0
   524  000032                     	ds	4
   525  000036                     _fm:
   526                           	callstack 0
   527  000036                     	ds	4
   528  00003A                     kpDebounce@oldRead:
   529                           	callstack 0
   530  00003A                     	ds	2
   531  00003C                     kpDebounce@newRead:
   532                           	callstack 0
   533  00003C                     	ds	2
   534  00003E                     _keys:
   535                           	callstack 0
   536  00003E                     	ds	2
   537  000040                     _tecla:
   538                           	callstack 0
   539  000040                     	ds	2
   540  000042                     _AD:
   541                           	callstack 0
   542  000042                     	ds	2
   543  000044                     _v3:
   544                           	callstack 0
   545  000044                     	ds	1
   546  000045                     _v2:
   547                           	callstack 0
   548  000045                     	ds	1
   549  000046                     _v1:
   550                           	callstack 0
   551  000046                     	ds	1
   552  000047                     _v0:
   553                           	callstack 0
   554  000047                     	ds	1
   555  000048                     _display:
   556                           	callstack 0
   557  000048                     	ds	1
   558  000049                     kpDebounce@tempo:
   559                           	callstack 0
   560  000049                     	ds	1
   561                           
   562                           	psect	dataCOMRAM
   563  00004A                     __pdataCOMRAM:
   564                           	callstack 0
   565  00004A                     _hora:
   566                           	callstack 0
   567  00004A                     	ds	4
   568  00004E                     _alarmeTocando:
   569                           	callstack 0
   570  00004E                     	ds	1
   571  00004F                     _freq:
   572                           	callstack 0
   573  00004F                     	ds	1
   574  000050                     _radioAtivo:
   575                           	callstack 0
   576  000050                     	ds	1
   577  000051                     _alarmeAtivo:
   578                           	callstack 0
   579  000051                     	ds	1
   580  000052                     _soneca:
   581                           	callstack 0
   582  000052                     	ds	1
   583  000053                     _disp:
   584                           	callstack 0
   585  000053                     	ds	1
   586                           
   587                           	psect	cstackCOMRAM
   588  000001                     __pcstackCOMRAM:
   589                           	callstack 0
   590  000001                     ??_kpReadKey:
   591  000001                     ?_kpRead:
   592                           	callstack 0
   593  000001                     ?_digitalRead:
   594                           	callstack 0
   595  000001                     ?___awdiv:
   596                           	callstack 0
   597  000001                     ?___lldiv:
   598                           	callstack 0
   599  000001                     ?___aldiv:
   600                           	callstack 0
   601  000001                     ?___fltol:
   602                           	callstack 0
   603  000001                     digitalWrite@pin:
   604                           	callstack 0
   605  000001                     digitalRead@pin:
   606                           	callstack 0
   607  000001                     pinMode@pin:
   608                           	callstack 0
   609  000001                     delayMicro@a:
   610                           	callstack 0
   611  000001                     delayMili@a:
   612                           	callstack 0
   613  000001                     timerReset@tempo:
   614                           	callstack 0
   615  000001                     ___awdiv@dividend:
   616                           	callstack 0
   617  000001                     ___lldiv@dividend:
   618                           	callstack 0
   619  000001                     ___aldiv@dividend:
   620                           	callstack 0
   621  000001                     ___fleq@ff1:
   622                           	callstack 0
   623  000001                     ___fltol@f1:
   624                           	callstack 0
   625                           
   626                           ; 4 bytes @ 0x0
   627  000001                     	ds	2
   628  000003                     ??_digitalRead:
   629  000003                     ??_delayMili:
   630  000003                     digitalWrite@value:
   631                           	callstack 0
   632  000003                     pinMode@type:
   633                           	callstack 0
   634  000003                     timerReset@ciclos:
   635                           	callstack 0
   636  000003                     ___awdiv@divisor:
   637                           	callstack 0
   638                           
   639                           ; 2 bytes @ 0x2
   640  000003                     	ds	1
   641  000004                     kpReadKey@i:
   642                           	callstack 0
   643  000004                     delayMili@i:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0x3
   647  000004                     	ds	1
   648  000005                     ??_pinMode:
   649  000005                     ??_digitalWrite:
   650  000005                     ??___fltol:
   651  000005                     ___awdiv@counter:
   652                           	callstack 0
   653  000005                     ___lldiv@divisor:
   654                           	callstack 0
   655  000005                     ___aldiv@divisor:
   656                           	callstack 0
   657  000005                     ___fleq@ff2:
   658                           	callstack 0
   659                           
   660                           ; 4 bytes @ 0x4
   661  000005                     	ds	1
   662  000006                     ___awdiv@sign:
   663                           	callstack 0
   664                           
   665                           ; 1 bytes @ 0x5
   666  000006                     	ds	1
   667  000007                     soWrite@value:
   668                           	callstack 0
   669  000007                     ___awdiv@quotient:
   670                           	callstack 0
   671                           
   672                           ; 2 bytes @ 0x6
   673  000007                     	ds	2
   674  000009                     ??___fleq:
   675  000009                     ?___awmod:
   676                           	callstack 0
   677  000009                     soWrite@i:
   678                           	callstack 0
   679  000009                     ___aldiv@counter:
   680                           	callstack 0
   681  000009                     ___fltol@sign1:
   682                           	callstack 0
   683  000009                     ___awmod@dividend:
   684                           	callstack 0
   685  000009                     ___lldiv@quotient:
   686                           	callstack 0
   687                           
   688                           ; 4 bytes @ 0x8
   689  000009                     	ds	1
   690  00000A                     ??_ssdUpdate:
   691  00000A                     ??_kpDebounce:
   692  00000A                     ___aldiv@sign:
   693                           	callstack 0
   694  00000A                     ___fltol@exp1:
   695                           	callstack 0
   696  00000A                     pushNibble@rs:
   697                           	callstack 0
   698  00000A                     pushByte@rs:
   699                           	callstack 0
   700                           
   701                           ; 2 bytes @ 0x9
   702  00000A                     	ds	1
   703  00000B                     ___awmod@divisor:
   704                           	callstack 0
   705  00000B                     ___aldiv@quotient:
   706                           	callstack 0
   707                           
   708                           ; 4 bytes @ 0xA
   709  00000B                     	ds	1
   710  00000C                     ??_pushByte:
   711  00000C                     pushNibble@value:
   712                           	callstack 0
   713                           
   714                           ; 1 bytes @ 0xB
   715  00000C                     	ds	1
   716  00000D                     pushByte@value:
   717                           	callstack 0
   718  00000D                     ___lldiv@counter:
   719                           	callstack 0
   720  00000D                     ___awmod@counter:
   721                           	callstack 0
   722  00000D                     kpDebounce@i:
   723                           	callstack 0
   724                           
   725                           ; 2 bytes @ 0xC
   726  00000D                     	ds	1
   727  00000E                     ?___llmod:
   728                           	callstack 0
   729  00000E                     lcdCommand@value:
   730                           	callstack 0
   731  00000E                     lcdChar@value:
   732                           	callstack 0
   733  00000E                     ___awmod@sign:
   734                           	callstack 0
   735  00000E                     ___llmod@dividend:
   736                           	callstack 0
   737                           
   738                           ; 4 bytes @ 0xD
   739  00000E                     	ds	1
   740  00000F                     lcdString@msg:
   741                           	callstack 0
   742  00000F                     lcdNumber@value:
   743                           	callstack 0
   744  00000F                     pwmFrequency@freq:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0xE
   748  00000F                     	ds	2
   749  000011                     ??_lcdString:
   750  000011                     lcdNumber@i:
   751                           	callstack 0
   752                           
   753                           ; 2 bytes @ 0x10
   754  000011                     	ds	1
   755  000012                     ___llmod@divisor:
   756                           	callstack 0
   757                           
   758                           ; 4 bytes @ 0x11
   759  000012                     	ds	1
   760  000013                     lcdString@i:
   761                           	callstack 0
   762                           
   763                           ; 2 bytes @ 0x12
   764  000013                     	ds	2
   765  000015                     ??_radioConfig:
   766  000015                     ??_radioFreq:
   767  000015                     ??_alarmeConfig:
   768  000015                     ??_compararAlarme:
   769  000015                     alarmeHora@pos:
   770                           	callstack 0
   771  000015                     horaConfig@pos:
   772                           	callstack 0
   773                           
   774                           ; 2 bytes @ 0x14
   775  000015                     	ds	1
   776  000016                     ___llmod@counter:
   777                           	callstack 0
   778                           
   779                           ; 1 bytes @ 0x15
   780  000016                     	ds	1
   781  000017                     ??_alarmeHora:
   782  000017                     ??_horaConfig:
   783  000017                     ssdDigit@pos:
   784                           	callstack 0
   785  000017                     radioConfig@i:
   786                           	callstack 0
   787  000017                     radioFreq@i:
   788                           	callstack 0
   789  000017                     alarmeConfig@i:
   790                           	callstack 0
   791                           
   792                           ; 2 bytes @ 0x16
   793  000017                     	ds	1
   794  000018                     ssdDigit@val:
   795                           	callstack 0
   796                           
   797                           ; 1 bytes @ 0x17
   798  000018                     	ds	1
   799  000019                     alarmeHora@i:
   800                           	callstack 0
   801  000019                     horaConfig@i:
   802                           	callstack 0
   803  000019                     _MostraDisplay$1195:
   804                           	callstack 0
   805                           
   806                           ; 4 bytes @ 0x18
   807  000019                     	ds	2
   808  00001B                     selectFunction@op:
   809                           	callstack 0
   810                           
   811                           ; 2 bytes @ 0x1A
   812  00001B                     	ds	2
   813  00001D                     ??_selectFunction:
   814  00001D                     _MostraDisplay$1196:
   815                           	callstack 0
   816                           
   817                           ; 4 bytes @ 0x1C
   818  00001D                     	ds	2
   819  00001F                     ??_menu:
   820                           
   821                           ; 1 bytes @ 0x1E
   822  00001F                     	ds	2
   823  000021                     menu@i:
   824                           	callstack 0
   825                           
   826                           ; 2 bytes @ 0x20
   827  000021                     	ds	2
   828  000023                     menu@op:
   829                           	callstack 0
   830                           
   831                           ; 2 bytes @ 0x22
   832  000023                     	ds	2
   833  000025                     ??_menuAccess:
   834                           
   835                           ; 1 bytes @ 0x24
   836  000025                     	ds	2
   837  000027                     ??_main:
   838                           
   839                           ; 1 bytes @ 0x26
   840  000027                     	ds	2
   841  000029                     main@slot:
   842                           	callstack 0
   843                           
   844                           ; 1 bytes @ 0x28
   845  000029                     	ds	1
   846                           
   847 ;;
   848 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   849 ;;
   850 ;; *************** function _main *****************
   851 ;; Defined at:
   852 ;;		line 433 in file "main.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;		None
   855 ;; Auto vars:     Size  Location     Type
   856 ;;  slot            1   40[COMRAM] unsigned char 
   857 ;; Return value:  Size  Location     Type
   858 ;;                  1    wreg      void 
   859 ;; Registers used:
   860 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   861 ;; Tracked objects:
   862 ;;		On entry : 0/0
   863 ;;		On exit  : 0/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   866 ;;      Params:         0       0       0       0       0       0       0
   867 ;;      Locals:         1       0       0       0       0       0       0
   868 ;;      Temps:          2       0       0       0       0       0       0
   869 ;;      Totals:         3       0       0       0       0       0       0
   870 ;;Total ram usage:        3 bytes
   871 ;; Hardware stack levels required when called: 10
   872 ;; This function calls:
   873 ;;		_MostraDisplay
   874 ;;		_adcInit
   875 ;;		_compararAlarme
   876 ;;		_kpDebounce
   877 ;;		_kpInit
   878 ;;		_lcdCommand
   879 ;;		_lcdInit
   880 ;;		_menuAccess
   881 ;;		_pwmInit
   882 ;;		_ssdDigit
   883 ;;		_ssdInit
   884 ;;		_ssdUpdate
   885 ;;		_timerInit
   886 ;;		_timerReset
   887 ;;		_timerWait
   888 ;; This function is called by:
   889 ;;		Startup code after reset
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           	psect	text0
   894  006802                     __ptext0:
   895                           	callstack 0
   896  006802                     _main:
   897                           	callstack 21
   898  006802                     
   899                           ;main.c: 434:     char slot;;main.c: 436:     pwmInit();
   900  006802  ECA6  F02E         	call	_pwmInit	;wreg free
   901                           
   902                           ;main.c: 437:     ssdInit();
   903  006806  EC34  F030         	call	_ssdInit	;wreg free
   904                           
   905                           ;main.c: 438:     adcInit();
   906  00680A  ECBE  F02F         	call	_adcInit	;wreg free
   907                           
   908                           ;main.c: 439:     timerInit();
   909  00680E  EC90  F02E         	call	_timerInit	;wreg free
   910                           
   911                           ;main.c: 440:     kpInit();
   912  006812  EC4A  F02F         	call	_kpInit	;wreg free
   913                           
   914                           ;main.c: 441:     lcdInit();
   915  006816  EC45  F033         	call	_lcdInit	;wreg free
   916                           
   917                           ;main.c: 443:     ssdDigit(0x00, 0);
   918  00681A  0E00               	movlw	0
   919  00681C  6E17               	movwf	ssdDigit@pos^0,c
   920  00681E  0E00               	movlw	0
   921  006820  EC5F  F030         	call	_ssdDigit
   922                           
   923                           ;main.c: 444:     ssdDigit(0x00, 1);
   924  006824  0E01               	movlw	1
   925  006826  6E17               	movwf	ssdDigit@pos^0,c
   926  006828  0E00               	movlw	0
   927  00682A  EC5F  F030         	call	_ssdDigit
   928                           
   929                           ;main.c: 445:     ssdDigit(0x00, 2);
   930  00682E  0E02               	movlw	2
   931  006830  6E17               	movwf	ssdDigit@pos^0,c
   932  006832  0E00               	movlw	0
   933  006834  EC5F  F030         	call	_ssdDigit
   934                           
   935                           ;main.c: 446:     ssdDigit(0x00, 3);
   936  006838  0E03               	movlw	3
   937  00683A  6E17               	movwf	ssdDigit@pos^0,c
   938  00683C  0E00               	movlw	0
   939  00683E  EC5F  F030         	call	_ssdDigit
   940                           
   941                           ;main.c: 448:     lcdCommand(0x01);
   942  006842  0E01               	movlw	1
   943  006844  ECB3  F02E         	call	_lcdCommand
   944  006848                     l232:
   945                           
   946                           ;main.c: 451:         timerReset(5000);
   947  006848  0E13               	movlw	19
   948  00684A  6E02               	movwf	(timerReset@tempo+1)^0,c
   949  00684C  0E88               	movlw	136
   950  00684E  6E01               	movwf	timerReset@tempo^0,c
   951  006850  ECD1  F02E         	call	_timerReset	;wreg free
   952  006854                     
   953                           ;main.c: 452:         ssdUpdate();
   954  006854  EC55  F038         	call	_ssdUpdate	;wreg free
   955                           
   956                           ;main.c: 454:         switch (slot) {
   957  006858  EF46  F034         	goto	l3423
   958  00685C                     l3403:
   959                           
   960                           ;main.c: 456:                 menuAccess();
   961  00685C  EC2E  F031         	call	_menuAccess	;wreg free
   962  006860                     
   963                           ;main.c: 457:                 slot = 1;
   964  006860  0E01               	movlw	1
   965  006862  6E29               	movwf	main@slot^0,c
   966                           
   967                           ;main.c: 458:                 break;
   968  006864  EF63  F034         	goto	l3425
   969  006868                     l3407:
   970                           
   971                           ;main.c: 460:                 compararAlarme();
   972  006868  EC98  F032         	call	_compararAlarme	;wreg free
   973  00686C                     
   974                           ;main.c: 461:                 slot = 2;
   975  00686C  0E02               	movlw	2
   976  00686E  6E29               	movwf	main@slot^0,c
   977                           
   978                           ;main.c: 462:                 break;
   979  006870  EF63  F034         	goto	l3425
   980  006874                     l3411:
   981                           
   982                           ;main.c: 464:                 kpDebounce();
   983  006874  EC05  F037         	call	_kpDebounce	;wreg free
   984  006878                     
   985                           ;main.c: 465:                 slot = 3;
   986  006878  0E03               	movlw	3
   987  00687A  6E29               	movwf	main@slot^0,c
   988                           
   989                           ;main.c: 466:                 break;
   990  00687C  EF63  F034         	goto	l3425
   991  006880                     l3415:
   992                           
   993                           ;main.c: 469:                 MostraDisplay();
   994  006880  EC27  F03E         	call	_MostraDisplay	;wreg free
   995  006884                     l3417:
   996                           
   997                           ;main.c: 471:                 slot = 0;
   998  006884  0E00               	movlw	0
   999  006886  6E29               	movwf	main@slot^0,c
  1000                           
  1001                           ;main.c: 472:                 break;
  1002  006888  EF63  F034         	goto	l3425
  1003  00688C                     l3423:
  1004  00688C  5029               	movf	main@slot^0,w,c
  1005  00688E  6E27               	movwf	??_main^0,c
  1006  006890  6A28               	clrf	(??_main+1)^0,c
  1007                           
  1008                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1009                           ; Switch size 1, requested type "simple"
  1010                           ; Number of cases is 1, Range of values is 0 to 0
  1011                           ; switch strategies available:
  1012                           ; Name         Instructions Cycles
  1013                           ; simple_byte            4     3 (average)
  1014                           ;	Chosen strategy is simple_byte
  1015  006892  5028               	movf	(??_main+1)^0,w,c
  1016  006894  0A00               	xorlw	0	; case 0
  1017  006896  B4D8               	btfsc	status,2,c
  1018  006898  EF50  F034         	goto	l3487
  1019  00689C  EF42  F034         	goto	l3417
  1020  0068A0                     l3487:
  1021                           
  1022                           ; Switch size 1, requested type "simple"
  1023                           ; Number of cases is 4, Range of values is 0 to 3
  1024                           ; switch strategies available:
  1025                           ; Name         Instructions Cycles
  1026                           ; simple_byte           13     7 (average)
  1027                           ;	Chosen strategy is simple_byte
  1028  0068A0  5027               	movf	??_main^0,w,c
  1029  0068A2  0A00               	xorlw	0	; case 0
  1030  0068A4  B4D8               	btfsc	status,2,c
  1031  0068A6  EF2E  F034         	goto	l3403
  1032  0068AA  0A01               	xorlw	1	; case 1
  1033  0068AC  B4D8               	btfsc	status,2,c
  1034  0068AE  EF34  F034         	goto	l3407
  1035  0068B2  0A03               	xorlw	3	; case 2
  1036  0068B4  B4D8               	btfsc	status,2,c
  1037  0068B6  EF3A  F034         	goto	l3411
  1038  0068BA  0A01               	xorlw	1	; case 3
  1039  0068BC  B4D8               	btfsc	status,2,c
  1040  0068BE  EF40  F034         	goto	l3415
  1041  0068C2  EF42  F034         	goto	l3417
  1042  0068C6                     l3425:
  1043                           
  1044                           ;main.c: 478:         timerWait();
  1045  0068C6  EC9E  F02E         	call	_timerWait	;wreg free
  1046                           
  1047                           ;main.c: 479:     }
  1048  0068CA  EF24  F034         	goto	l232
  1049  0068CE  EF00  F000         	goto	start
  1050  0068D2                     __end_of_main:
  1051                           	callstack 0
  1052                           
  1053 ;; *************** function _timerInit *****************
  1054 ;; Defined at:
  1055 ;;		line 55 in file "timer.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;		None
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;		None
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg, status,2, status,0
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1069 ;;      Params:         0       0       0       0       0       0       0
  1070 ;;      Locals:         0       0       0       0       0       0       0
  1071 ;;      Temps:          0       0       0       0       0       0       0
  1072 ;;      Totals:         0       0       0       0       0       0       0
  1073 ;;Total ram usage:        0 bytes
  1074 ;; Hardware stack levels used: 1
  1075 ;; This function calls:
  1076 ;;		Nothing
  1077 ;; This function is called by:
  1078 ;;		_main
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           	psect	text1
  1083  005D20                     __ptext1:
  1084                           	callstack 0
  1085  005D20                     _timerInit:
  1086                           	callstack 30
  1087  005D20                     
  1088                           ;timer.c: 57:  T0CON = 0b00001000;
  1089  005D20  0E08               	movlw	8
  1090  005D22  6ED5               	movwf	213,c	;volatile
  1091  005D24                     
  1092                           ;timer.c: 58:  ((T0CON) |= (1<<(7)));
  1093  005D24  8ED5               	bsf	213,7,c	;volatile
  1094  005D26  0012               	return		;funcret
  1095  005D28                     __end_of_timerInit:
  1096                           	callstack 0
  1097                           
  1098 ;; *************** function _ssdInit *****************
  1099 ;; Defined at:
  1100 ;;		line 94 in file "ssd.c"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;		None
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;		None
  1105 ;; Return value:  Size  Location     Type
  1106 ;;                  1    wreg      void 
  1107 ;; Registers used:
  1108 ;;		wreg, status,2, status,0, cstack
  1109 ;; Tracked objects:
  1110 ;;		On entry : 0/0
  1111 ;;		On exit  : 0/0
  1112 ;;		Unchanged: 0/0
  1113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1114 ;;      Params:         0       0       0       0       0       0       0
  1115 ;;      Locals:         0       0       0       0       0       0       0
  1116 ;;      Temps:          0       0       0       0       0       0       0
  1117 ;;      Totals:         0       0       0       0       0       0       0
  1118 ;;Total ram usage:        0 bytes
  1119 ;; Hardware stack levels used: 1
  1120 ;; Hardware stack levels required when called: 2
  1121 ;; This function calls:
  1122 ;;		_pinMode
  1123 ;;		_soInit
  1124 ;; This function is called by:
  1125 ;;		_main
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           	psect	text2
  1130  006068                     __ptext2:
  1131                           	callstack 0
  1132  006068                     _ssdInit:
  1133                           	callstack 28
  1134  006068                     
  1135                           ;ssd.c: 96:     pinMode(PIN_D0, 0);
  1136  006068  0E00               	movlw	0
  1137  00606A  6E02               	movwf	(pinMode@pin+1)^0,c
  1138  00606C  0E18               	movlw	24
  1139  00606E  6E01               	movwf	pinMode@pin^0,c
  1140  006070  0E00               	movlw	0
  1141  006072  6E04               	movwf	(pinMode@type+1)^0,c
  1142  006074  0E00               	movlw	0
  1143  006076  6E03               	movwf	pinMode@type^0,c
  1144  006078  ECD4  F03B         	call	_pinMode	;wreg free
  1145                           
  1146                           ;ssd.c: 97:     pinMode(PIN_D1, 0);
  1147  00607C  0E00               	movlw	0
  1148  00607E  6E02               	movwf	(pinMode@pin+1)^0,c
  1149  006080  0E19               	movlw	25
  1150  006082  6E01               	movwf	pinMode@pin^0,c
  1151  006084  0E00               	movlw	0
  1152  006086  6E04               	movwf	(pinMode@type+1)^0,c
  1153  006088  0E00               	movlw	0
  1154  00608A  6E03               	movwf	pinMode@type^0,c
  1155  00608C  ECD4  F03B         	call	_pinMode	;wreg free
  1156                           
  1157                           ;ssd.c: 98:     pinMode(PIN_D2, 0);
  1158  006090  0E00               	movlw	0
  1159  006092  6E02               	movwf	(pinMode@pin+1)^0,c
  1160  006094  0E1A               	movlw	26
  1161  006096  6E01               	movwf	pinMode@pin^0,c
  1162  006098  0E00               	movlw	0
  1163  00609A  6E04               	movwf	(pinMode@type+1)^0,c
  1164  00609C  0E00               	movlw	0
  1165  00609E  6E03               	movwf	pinMode@type^0,c
  1166  0060A0  ECD4  F03B         	call	_pinMode	;wreg free
  1167                           
  1168                           ;ssd.c: 99:     pinMode(PIN_D3, 0);
  1169  0060A4  0E00               	movlw	0
  1170  0060A6  6E02               	movwf	(pinMode@pin+1)^0,c
  1171  0060A8  0E1B               	movlw	27
  1172  0060AA  6E01               	movwf	pinMode@pin^0,c
  1173  0060AC  0E00               	movlw	0
  1174  0060AE  6E04               	movwf	(pinMode@type+1)^0,c
  1175  0060B0  0E00               	movlw	0
  1176  0060B2  6E03               	movwf	pinMode@type^0,c
  1177  0060B4  ECD4  F03B         	call	_pinMode	;wreg free
  1178                           
  1179                           ;ssd.c: 102:     soInit();
  1180  0060B8  EC7E  F02F         	call	_soInit	;wreg free
  1181  0060BC  0012               	return		;funcret
  1182  0060BE                     __end_of_ssdInit:
  1183                           	callstack 0
  1184                           
  1185 ;; *************** function _pwmInit *****************
  1186 ;; Defined at:
  1187 ;;		line 51 in file "pwm.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;		None
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;		None
  1192 ;; Return value:  Size  Location     Type
  1193 ;;                  1    wreg      void 
  1194 ;; Registers used:
  1195 ;;		wreg, status,2, status,0, cstack
  1196 ;; Tracked objects:
  1197 ;;		On entry : 0/0
  1198 ;;		On exit  : 0/0
  1199 ;;		Unchanged: 0/0
  1200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1201 ;;      Params:         0       0       0       0       0       0       0
  1202 ;;      Locals:         0       0       0       0       0       0       0
  1203 ;;      Temps:          0       0       0       0       0       0       0
  1204 ;;      Totals:         0       0       0       0       0       0       0
  1205 ;;Total ram usage:        0 bytes
  1206 ;; Hardware stack levels used: 1
  1207 ;; Hardware stack levels required when called: 2
  1208 ;; This function calls:
  1209 ;;		_pwmFrequency
  1210 ;; This function is called by:
  1211 ;;		_main
  1212 ;; This function uses a non-reentrant model
  1213 ;;
  1214                           
  1215                           	psect	text3
  1216  005D4C                     __ptext3:
  1217                           	callstack 0
  1218  005D4C                     _pwmInit:
  1219                           	callstack 28
  1220  005D4C                     
  1221                           ;pwm.c: 53:  ((TRISC) &= ~(1<<(1)));
  1222  005D4C  9294               	bcf	148,1,c	;volatile
  1223  005D4E                     
  1224                           ;pwm.c: 55:  T2CON |= 0b00000011;
  1225  005D4E  0E03               	movlw	3
  1226  005D50  12CA               	iorwf	202,f,c	;volatile
  1227  005D52                     
  1228                           ;pwm.c: 56:  ((T2CON) |= (1<<(2)));
  1229  005D52  84CA               	bsf	202,2,c	;volatile
  1230  005D54                     
  1231                           ;pwm.c: 58:  CCP2CON = 0b00001100;
  1232  005D54  0E0C               	movlw	12
  1233  005D56  6EBA               	movwf	186,c	;volatile
  1234  005D58                     
  1235                           ;pwm.c: 60:     pwmFrequency(100);
  1236  005D58  0E00               	movlw	0
  1237  005D5A  6E10               	movwf	(pwmFrequency@freq+1)^0,c
  1238  005D5C  0E64               	movlw	100
  1239  005D5E  6E0F               	movwf	pwmFrequency@freq^0,c
  1240  005D60  ECE2  F02E         	call	_pwmFrequency	;wreg free
  1241  005D64  0012               	return		;funcret
  1242  005D66                     __end_of_pwmInit:
  1243                           	callstack 0
  1244                           
  1245 ;; *************** function _menuAccess *****************
  1246 ;; Defined at:
  1247 ;;		line 356 in file "main.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;		None
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1261 ;;      Params:         0       0       0       0       0       0       0
  1262 ;;      Locals:         0       0       0       0       0       0       0
  1263 ;;      Temps:          2       0       0       0       0       0       0
  1264 ;;      Totals:         2       0       0       0       0       0       0
  1265 ;;Total ram usage:        2 bytes
  1266 ;; Hardware stack levels used: 1
  1267 ;; Hardware stack levels required when called: 9
  1268 ;; This function calls:
  1269 ;;		_kpRead
  1270 ;;		_kpReadKey
  1271 ;;		_menu
  1272 ;; This function is called by:
  1273 ;;		_main
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277                           	psect	text4
  1278  00625C                     __ptext4:
  1279                           	callstack 0
  1280  00625C                     _menuAccess:
  1281                           	callstack 21
  1282  00625C                     
  1283                           ;main.c: 357:     if (kpRead() != tecla) {
  1284  00625C  EC94  F02E         	call	_kpRead	;wreg free
  1285  006260  5040               	movf	_tecla^0,w,c
  1286  006262  1801               	xorwf	?_kpRead^0,w,c
  1287  006264  E109               	bnz	u2630
  1288  006266  5041               	movf	(_tecla+1)^0,w,c
  1289  006268  1802               	xorwf	(?_kpRead+1)^0,w,c
  1290  00626A  B4D8               	btfsc	status,2,c
  1291  00626C  EF3A  F031         	goto	u2631
  1292  006270  EF3C  F031         	goto	u2630
  1293  006274                     u2631:
  1294  006274  EF6B  F031         	goto	l205
  1295  006278                     u2630:
  1296  006278                     
  1297                           ;main.c: 358:         tecla = kpRead();
  1298  006278  EC94  F02E         	call	_kpRead	;wreg free
  1299  00627C  C001  F040         	movff	?_kpRead,_tecla
  1300  006280  C002  F041         	movff	?_kpRead+1,_tecla+1
  1301                           
  1302                           ;main.c: 360:         switch (kpReadKey()) {
  1303  006284  EF55  F031         	goto	l3229
  1304  006288                     l3221:
  1305                           
  1306                           ;main.c: 362:                 menu();
  1307  006288  ECFB  F03C         	call	_menu	;wreg free
  1308                           
  1309                           ;main.c: 363:                 break;
  1310  00628C  EF6B  F031         	goto	l205
  1311  006290                     l3223:
  1312                           
  1313                           ;main.c: 365:                 if (alarmeTocando == '1') {
  1314  006290  0E31               	movlw	49
  1315  006292  184E               	xorwf	_alarmeTocando^0,w,c
  1316  006294  A4D8               	btfss	status,2,c
  1317  006296  EF4F  F031         	goto	u2641
  1318  00629A  EF51  F031         	goto	u2640
  1319  00629E                     u2641:
  1320  00629E  EF6B  F031         	goto	l205
  1321  0062A2                     u2640:
  1322  0062A2                     
  1323                           ;main.c: 366:                     alarmeTocando = '0';
  1324  0062A2  0E30               	movlw	48
  1325  0062A4  6E4E               	movwf	_alarmeTocando^0,c
  1326  0062A6  EF6B  F031         	goto	l205
  1327  0062AA                     l3229:
  1328  0062AA  ECF2  F030         	call	_kpReadKey	;wreg free
  1329  0062AE  6E25               	movwf	??_menuAccess^0,c
  1330  0062B0  6A26               	clrf	(??_menuAccess+1)^0,c
  1331                           
  1332                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1333                           ; Switch size 1, requested type "simple"
  1334                           ; Number of cases is 1, Range of values is 0 to 0
  1335                           ; switch strategies available:
  1336                           ; Name         Instructions Cycles
  1337                           ; simple_byte            4     3 (average)
  1338                           ;	Chosen strategy is simple_byte
  1339  0062B2  5026               	movf	(??_menuAccess+1)^0,w,c
  1340  0062B4  0A00               	xorlw	0	; case 0
  1341  0062B6  B4D8               	btfsc	status,2,c
  1342  0062B8  EF60  F031         	goto	l3489
  1343  0062BC  EF6B  F031         	goto	l205
  1344  0062C0                     l3489:
  1345                           
  1346                           ; Switch size 1, requested type "simple"
  1347                           ; Number of cases is 2, Range of values is 83 to 115
  1348                           ; switch strategies available:
  1349                           ; Name         Instructions Cycles
  1350                           ; simple_byte            7     4 (average)
  1351                           ;	Chosen strategy is simple_byte
  1352  0062C0  5025               	movf	??_menuAccess^0,w,c
  1353  0062C2  0A53               	xorlw	83	; case 83
  1354  0062C4  B4D8               	btfsc	status,2,c
  1355  0062C6  EF44  F031         	goto	l3221
  1356  0062CA  0A20               	xorlw	32	; case 115
  1357  0062CC  B4D8               	btfsc	status,2,c
  1358  0062CE  EF48  F031         	goto	l3223
  1359  0062D2  EF6B  F031         	goto	l205
  1360  0062D6                     l205:
  1361  0062D6  0012               	return		;funcret
  1362  0062D8                     __end_of_menuAccess:
  1363                           	callstack 0
  1364                           
  1365 ;; *************** function _menu *****************
  1366 ;; Defined at:
  1367 ;;		line 279 in file "main.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;		None
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  i               2   32[COMRAM] int 
  1372 ;;  op              2   34[COMRAM] int 
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  1    wreg      void 
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1382 ;;      Params:         0       0       0       0       0       0       0
  1383 ;;      Locals:         4       0       0       0       0       0       0
  1384 ;;      Temps:          2       0       0       0       0       0       0
  1385 ;;      Totals:         6       0       0       0       0       0       0
  1386 ;;Total ram usage:        6 bytes
  1387 ;; Hardware stack levels used: 1
  1388 ;; Hardware stack levels required when called: 8
  1389 ;; This function calls:
  1390 ;;		_kpRead
  1391 ;;		_kpReadKey
  1392 ;;		_lcdCommand
  1393 ;;		_lcdString
  1394 ;;		_selectFunction
  1395 ;;		_ssdUpdate
  1396 ;;		_timerReset
  1397 ;;		_timerWait
  1398 ;; This function is called by:
  1399 ;;		_menuAccess
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text5
  1404  0079F6                     __ptext5:
  1405                           	callstack 0
  1406  0079F6                     _menu:
  1407                           	callstack 21
  1408  0079F6                     
  1409                           ;main.c: 280:     int op = 0;
  1410  0079F6  0E00               	movlw	0
  1411  0079F8  6E24               	movwf	(menu@op+1)^0,c
  1412  0079FA  0E00               	movlw	0
  1413  0079FC  6E23               	movwf	menu@op^0,c
  1414  0079FE                     
  1415                           ;main.c: 281:     lcdCommand(0x80);
  1416  0079FE  0E80               	movlw	128
  1417  007A00  ECB3  F02E         	call	_lcdCommand
  1418  007A04                     
  1419                           ;main.c: 282:     lcdString("Menu            ");
  1420  007A04  0E07               	movlw	low STR_17
  1421  007A06  6E0F               	movwf	lcdString@msg^0,c
  1422  007A08  0E7F               	movlw	high STR_17
  1423  007A0A  6E10               	movwf	(lcdString@msg+1)^0,c
  1424  007A0C  EC09  F030         	call	_lcdString	;wreg free
  1425  007A10                     
  1426                           ;main.c: 283:     for (int i = 0; i < 1000; i++) {
  1427  007A10  0E00               	movlw	0
  1428  007A12  6E22               	movwf	(menu@i+1)^0,c
  1429  007A14  0E00               	movlw	0
  1430  007A16  6E21               	movwf	menu@i^0,c
  1431  007A18                     l2971:
  1432                           
  1433                           ;main.c: 284:         timerReset(50000);
  1434  007A18  0EC3               	movlw	195
  1435  007A1A  6E02               	movwf	(timerReset@tempo+1)^0,c
  1436  007A1C  0E50               	movlw	80
  1437  007A1E  6E01               	movwf	timerReset@tempo^0,c
  1438  007A20  ECD1  F02E         	call	_timerReset	;wreg free
  1439  007A24                     
  1440                           ;main.c: 286:         ssdUpdate();
  1441  007A24  EC55  F038         	call	_ssdUpdate	;wreg free
  1442  007A28                     
  1443                           ;main.c: 288:         if (kpRead() != tecla) {
  1444  007A28  EC94  F02E         	call	_kpRead	;wreg free
  1445  007A2C  5040               	movf	_tecla^0,w,c
  1446  007A2E  1801               	xorwf	?_kpRead^0,w,c
  1447  007A30  E109               	bnz	u2280
  1448  007A32  5041               	movf	(_tecla+1)^0,w,c
  1449  007A34  1802               	xorwf	(?_kpRead+1)^0,w,c
  1450  007A36  B4D8               	btfsc	status,2,c
  1451  007A38  EF20  F03D         	goto	u2281
  1452  007A3C  EF22  F03D         	goto	u2280
  1453  007A40                     u2281:
  1454  007A40  EF14  F03E         	goto	l3035
  1455  007A44                     u2280:
  1456  007A44  EFF6  F03D         	goto	l3033
  1457  007A48                     l2979:
  1458                           
  1459                           ;main.c: 291:                     if (op == 0) {
  1460  007A48  5023               	movf	menu@op^0,w,c
  1461  007A4A  1024               	iorwf	(menu@op+1)^0,w,c
  1462  007A4C  A4D8               	btfss	status,2,c
  1463  007A4E  EF2B  F03D         	goto	u2291
  1464  007A52  EF2D  F03D         	goto	u2290
  1465  007A56                     u2291:
  1466  007A56  EF33  F03D         	goto	l2983
  1467  007A5A                     u2290:
  1468  007A5A                     
  1469                           ;main.c: 292:                         op = 4;
  1470  007A5A  0E00               	movlw	0
  1471  007A5C  6E24               	movwf	(menu@op+1)^0,c
  1472  007A5E  0E04               	movlw	4
  1473  007A60  6E23               	movwf	menu@op^0,c
  1474                           
  1475                           ;main.c: 293:                     } else {
  1476  007A62  EF36  F03D         	goto	l2985
  1477  007A66                     l2983:
  1478                           
  1479                           ;main.c: 294:                         op--;
  1480  007A66  0623               	decf	menu@op^0,f,c
  1481  007A68  A0D8               	btfss	status,0,c
  1482  007A6A  0624               	decf	(menu@op+1)^0,f,c
  1483  007A6C                     l2985:
  1484                           
  1485                           ;main.c: 296:                     lcdCommand(0xC0);
  1486  007A6C  0EC0               	movlw	192
  1487  007A6E  ECB3  F02E         	call	_lcdCommand
  1488  007A72                     
  1489                           ;main.c: 298:                     switch (op) {
  1490  007A72  EF63  F03D         	goto	l3001
  1491  007A76                     l2989:
  1492                           
  1493                           ;main.c: 300:                             lcdString("Ativar alarme  ");
  1494  007A76  0E59               	movlw	low STR_12
  1495  007A78  6E0F               	movwf	lcdString@msg^0,c
  1496  007A7A  0E7F               	movlw	high STR_12
  1497  007A7C  6E10               	movwf	(lcdString@msg+1)^0,c
  1498  007A7E  EC09  F030         	call	_lcdString	;wreg free
  1499                           
  1500                           ;main.c: 301:                             break;
  1501  007A82  EF85  F03D         	goto	l3003
  1502  007A86                     l2991:
  1503                           
  1504                           ;main.c: 303:                             lcdString("Horario alarme ");
  1505  007A86  0E69               	movlw	low STR_13
  1506  007A88  6E0F               	movwf	lcdString@msg^0,c
  1507  007A8A  0E7F               	movlw	high STR_13
  1508  007A8C  6E10               	movwf	(lcdString@msg+1)^0,c
  1509  007A8E  EC09  F030         	call	_lcdString	;wreg free
  1510                           
  1511                           ;main.c: 304:                             break;
  1512  007A92  EF85  F03D         	goto	l3003
  1513  007A96                     l2993:
  1514                           
  1515                           ;main.c: 306:                             lcdString("Ativar radio   ");
  1516  007A96  0E49               	movlw	low STR_14
  1517  007A98  6E0F               	movwf	lcdString@msg^0,c
  1518  007A9A  0E7F               	movlw	high STR_14
  1519  007A9C  6E10               	movwf	(lcdString@msg+1)^0,c
  1520  007A9E  EC09  F030         	call	_lcdString	;wreg free
  1521                           
  1522                           ;main.c: 307:                             break;
  1523  007AA2  EF85  F03D         	goto	l3003
  1524  007AA6                     l2995:
  1525                           
  1526                           ;main.c: 309:                             lcdString("Freq. radio    ");
  1527  007AA6  0E39               	movlw	low STR_15
  1528  007AA8  6E0F               	movwf	lcdString@msg^0,c
  1529  007AAA  0E7F               	movlw	high STR_15
  1530  007AAC  6E10               	movwf	(lcdString@msg+1)^0,c
  1531  007AAE  EC09  F030         	call	_lcdString	;wreg free
  1532                           
  1533                           ;main.c: 310:                             break;
  1534  007AB2  EF85  F03D         	goto	l3003
  1535  007AB6                     l2997:
  1536                           
  1537                           ;main.c: 312:                             lcdString("Mudar hora     ");
  1538  007AB6  0E29               	movlw	low STR_16
  1539  007AB8  6E0F               	movwf	lcdString@msg^0,c
  1540  007ABA  0E7F               	movlw	high STR_16
  1541  007ABC  6E10               	movwf	(lcdString@msg+1)^0,c
  1542  007ABE  EC09  F030         	call	_lcdString	;wreg free
  1543                           
  1544                           ;main.c: 313:                             break;
  1545  007AC2  EF85  F03D         	goto	l3003
  1546  007AC6                     l3001:
  1547  007AC6  C023  F01F         	movff	menu@op,??_menu
  1548  007ACA  C024  F020         	movff	menu@op+1,??_menu+1
  1549                           
  1550                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1551                           ; Switch size 1, requested type "simple"
  1552                           ; Number of cases is 1, Range of values is 0 to 0
  1553                           ; switch strategies available:
  1554                           ; Name         Instructions Cycles
  1555                           ; simple_byte            4     3 (average)
  1556                           ;	Chosen strategy is simple_byte
  1557  007ACE  5020               	movf	(??_menu+1)^0,w,c
  1558  007AD0  0A00               	xorlw	0	; case 0
  1559  007AD2  B4D8               	btfsc	status,2,c
  1560  007AD4  EF6E  F03D         	goto	l3491
  1561  007AD8  EF85  F03D         	goto	l3003
  1562  007ADC                     l3491:
  1563                           
  1564                           ; Switch size 1, requested type "simple"
  1565                           ; Number of cases is 5, Range of values is 0 to 4
  1566                           ; switch strategies available:
  1567                           ; Name         Instructions Cycles
  1568                           ; simple_byte           16     9 (average)
  1569                           ;	Chosen strategy is simple_byte
  1570  007ADC  501F               	movf	??_menu^0,w,c
  1571  007ADE  0A00               	xorlw	0	; case 0
  1572  007AE0  B4D8               	btfsc	status,2,c
  1573  007AE2  EF3B  F03D         	goto	l2989
  1574  007AE6  0A01               	xorlw	1	; case 1
  1575  007AE8  B4D8               	btfsc	status,2,c
  1576  007AEA  EF43  F03D         	goto	l2991
  1577  007AEE  0A03               	xorlw	3	; case 2
  1578  007AF0  B4D8               	btfsc	status,2,c
  1579  007AF2  EF4B  F03D         	goto	l2993
  1580  007AF6  0A01               	xorlw	1	; case 3
  1581  007AF8  B4D8               	btfsc	status,2,c
  1582  007AFA  EF53  F03D         	goto	l2995
  1583  007AFE  0A07               	xorlw	7	; case 4
  1584  007B00  B4D8               	btfsc	status,2,c
  1585  007B02  EF5B  F03D         	goto	l2997
  1586  007B06  EF85  F03D         	goto	l3003
  1587  007B0A                     l3003:
  1588                           
  1589                           ;main.c: 317:                     if (op == 4) {
  1590  007B0A  0E04               	movlw	4
  1591  007B0C  1823               	xorwf	menu@op^0,w,c
  1592  007B0E  1024               	iorwf	(menu@op+1)^0,w,c
  1593  007B10  A4D8               	btfss	status,2,c
  1594  007B12  EF8D  F03D         	goto	u2301
  1595  007B16  EF8F  F03D         	goto	u2300
  1596  007B1A                     u2301:
  1597  007B1A  EF95  F03D         	goto	l3007
  1598  007B1E                     u2300:
  1599  007B1E                     
  1600                           ;main.c: 318:                         op = 0;
  1601  007B1E  0E00               	movlw	0
  1602  007B20  6E24               	movwf	(menu@op+1)^0,c
  1603  007B22  0E00               	movlw	0
  1604  007B24  6E23               	movwf	menu@op^0,c
  1605                           
  1606                           ;main.c: 319:                     } else {
  1607  007B26  EF97  F03D         	goto	l3009
  1608  007B2A                     l3007:
  1609                           
  1610                           ;main.c: 320:                         op++;
  1611  007B2A  4A23               	infsnz	menu@op^0,f,c
  1612  007B2C  2A24               	incf	(menu@op+1)^0,f,c
  1613  007B2E                     l3009:
  1614                           
  1615                           ;main.c: 322:                     lcdCommand(0xC0);
  1616  007B2E  0EC0               	movlw	192
  1617  007B30  ECB3  F02E         	call	_lcdCommand
  1618  007B34                     
  1619                           ;main.c: 323:                     i = 0;
  1620  007B34  0E00               	movlw	0
  1621  007B36  6E22               	movwf	(menu@i+1)^0,c
  1622  007B38  0E00               	movlw	0
  1623  007B3A  6E21               	movwf	menu@i^0,c
  1624                           
  1625                           ;main.c: 324:                     switch (op) {
  1626  007B3C  EFC8  F03D         	goto	l3025
  1627  007B40                     l3013:
  1628                           
  1629                           ;main.c: 326:                             lcdString("Ativar alarme  ");
  1630  007B40  0E59               	movlw	low STR_12
  1631  007B42  6E0F               	movwf	lcdString@msg^0,c
  1632  007B44  0E7F               	movlw	high STR_12
  1633  007B46  6E10               	movwf	(lcdString@msg+1)^0,c
  1634  007B48  EC09  F030         	call	_lcdString	;wreg free
  1635                           
  1636                           ;main.c: 327:                             break;
  1637  007B4C  EF14  F03E         	goto	l3035
  1638  007B50                     l3015:
  1639                           
  1640                           ;main.c: 329:                             lcdString("Horario alarme ");
  1641  007B50  0E69               	movlw	low STR_13
  1642  007B52  6E0F               	movwf	lcdString@msg^0,c
  1643  007B54  0E7F               	movlw	high STR_13
  1644  007B56  6E10               	movwf	(lcdString@msg+1)^0,c
  1645  007B58  EC09  F030         	call	_lcdString	;wreg free
  1646                           
  1647                           ;main.c: 330:                             break;
  1648  007B5C  EF14  F03E         	goto	l3035
  1649  007B60                     l3017:
  1650                           
  1651                           ;main.c: 332:                             lcdString("Ativar radio   ");
  1652  007B60  0E49               	movlw	low STR_14
  1653  007B62  6E0F               	movwf	lcdString@msg^0,c
  1654  007B64  0E7F               	movlw	high STR_14
  1655  007B66  6E10               	movwf	(lcdString@msg+1)^0,c
  1656  007B68  EC09  F030         	call	_lcdString	;wreg free
  1657                           
  1658                           ;main.c: 333:                             break;
  1659  007B6C  EF14  F03E         	goto	l3035
  1660  007B70                     l3019:
  1661                           
  1662                           ;main.c: 335:                             lcdString("Freq. radio    ");
  1663  007B70  0E39               	movlw	low STR_15
  1664  007B72  6E0F               	movwf	lcdString@msg^0,c
  1665  007B74  0E7F               	movlw	high STR_15
  1666  007B76  6E10               	movwf	(lcdString@msg+1)^0,c
  1667  007B78  EC09  F030         	call	_lcdString	;wreg free
  1668                           
  1669                           ;main.c: 336:                             break;
  1670  007B7C  EF14  F03E         	goto	l3035
  1671  007B80                     l3021:
  1672                           
  1673                           ;main.c: 338:                             lcdString("Mudar hora     ");
  1674  007B80  0E29               	movlw	low STR_16
  1675  007B82  6E0F               	movwf	lcdString@msg^0,c
  1676  007B84  0E7F               	movlw	high STR_16
  1677  007B86  6E10               	movwf	(lcdString@msg+1)^0,c
  1678  007B88  EC09  F030         	call	_lcdString	;wreg free
  1679                           
  1680                           ;main.c: 339:                             break;
  1681  007B8C  EF14  F03E         	goto	l3035
  1682  007B90                     l3025:
  1683  007B90  C023  F01F         	movff	menu@op,??_menu
  1684  007B94  C024  F020         	movff	menu@op+1,??_menu+1
  1685                           
  1686                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1687                           ; Switch size 1, requested type "simple"
  1688                           ; Number of cases is 1, Range of values is 0 to 0
  1689                           ; switch strategies available:
  1690                           ; Name         Instructions Cycles
  1691                           ; simple_byte            4     3 (average)
  1692                           ;	Chosen strategy is simple_byte
  1693  007B98  5020               	movf	(??_menu+1)^0,w,c
  1694  007B9A  0A00               	xorlw	0	; case 0
  1695  007B9C  B4D8               	btfsc	status,2,c
  1696  007B9E  EFD3  F03D         	goto	l3493
  1697  007BA2  EF14  F03E         	goto	l3035
  1698  007BA6                     l3493:
  1699                           
  1700                           ; Switch size 1, requested type "simple"
  1701                           ; Number of cases is 5, Range of values is 0 to 4
  1702                           ; switch strategies available:
  1703                           ; Name         Instructions Cycles
  1704                           ; simple_byte           16     9 (average)
  1705                           ;	Chosen strategy is simple_byte
  1706  007BA6  501F               	movf	??_menu^0,w,c
  1707  007BA8  0A00               	xorlw	0	; case 0
  1708  007BAA  B4D8               	btfsc	status,2,c
  1709  007BAC  EFA0  F03D         	goto	l3013
  1710  007BB0  0A01               	xorlw	1	; case 1
  1711  007BB2  B4D8               	btfsc	status,2,c
  1712  007BB4  EFA8  F03D         	goto	l3015
  1713  007BB8  0A03               	xorlw	3	; case 2
  1714  007BBA  B4D8               	btfsc	status,2,c
  1715  007BBC  EFB0  F03D         	goto	l3017
  1716  007BC0  0A01               	xorlw	1	; case 3
  1717  007BC2  B4D8               	btfsc	status,2,c
  1718  007BC4  EFB8  F03D         	goto	l3019
  1719  007BC8  0A07               	xorlw	7	; case 4
  1720  007BCA  B4D8               	btfsc	status,2,c
  1721  007BCC  EFC0  F03D         	goto	l3021
  1722  007BD0  EF14  F03E         	goto	l3035
  1723  007BD4                     l3027:
  1724                           
  1725                           ;main.c: 343:                     selectFunction(op);
  1726  007BD4  C023  F01B         	movff	menu@op,selectFunction@op
  1727  007BD8  C024  F01C         	movff	menu@op+1,selectFunction@op+1
  1728  007BDC  EC6C  F031         	call	_selectFunction	;wreg free
  1729  007BE0                     
  1730                           ;main.c: 344:                     i = 0;
  1731  007BE0  0E00               	movlw	0
  1732  007BE2  6E22               	movwf	(menu@i+1)^0,c
  1733  007BE4  0E00               	movlw	0
  1734  007BE6  6E21               	movwf	menu@i^0,c
  1735                           
  1736                           ;main.c: 345:                     break;
  1737  007BE8  EF14  F03E         	goto	l3035
  1738  007BEC                     l3033:
  1739  007BEC  ECF2  F030         	call	_kpReadKey	;wreg free
  1740  007BF0  6E1F               	movwf	??_menu^0,c
  1741  007BF2  6A20               	clrf	(??_menu+1)^0,c
  1742                           
  1743                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1744                           ; Switch size 1, requested type "simple"
  1745                           ; Number of cases is 1, Range of values is 0 to 0
  1746                           ; switch strategies available:
  1747                           ; Name         Instructions Cycles
  1748                           ; simple_byte            4     3 (average)
  1749                           ;	Chosen strategy is simple_byte
  1750  007BF4  5020               	movf	(??_menu+1)^0,w,c
  1751  007BF6  0A00               	xorlw	0	; case 0
  1752  007BF8  B4D8               	btfsc	status,2,c
  1753  007BFA  EF01  F03E         	goto	l3495
  1754  007BFE  EF14  F03E         	goto	l3035
  1755  007C02                     l3495:
  1756                           
  1757                           ; Switch size 1, requested type "simple"
  1758                           ; Number of cases is 4, Range of values is 66 to 115
  1759                           ; switch strategies available:
  1760                           ; Name         Instructions Cycles
  1761                           ; simple_byte           13     7 (average)
  1762                           ;	Chosen strategy is simple_byte
  1763  007C02  501F               	movf	??_menu^0,w,c
  1764  007C04  0A42               	xorlw	66	; case 66
  1765  007C06  B4D8               	btfsc	status,2,c
  1766  007C08  EF85  F03D         	goto	l3003
  1767  007C0C  0A11               	xorlw	17	; case 83
  1768  007C0E  B4D8               	btfsc	status,2,c
  1769  007C10  EFEA  F03D         	goto	l3027
  1770  007C14  0A0B               	xorlw	11	; case 88
  1771  007C16  B4D8               	btfsc	status,2,c
  1772  007C18  EF24  F03D         	goto	l2979
  1773  007C1C  0A2B               	xorlw	43	; case 115
  1774  007C1E  B4D8               	btfsc	status,2,c
  1775  007C20  EF14  F03E         	goto	l3035
  1776  007C24  EF14  F03E         	goto	l3035
  1777  007C28                     l3035:
  1778                           
  1779                           ;main.c: 352:         timerWait();
  1780  007C28  EC9E  F02E         	call	_timerWait	;wreg free
  1781  007C2C                     
  1782                           ;main.c: 353:     }
  1783  007C2C  4A21               	infsnz	menu@i^0,f,c
  1784  007C2E  2A22               	incf	(menu@i+1)^0,f,c
  1785  007C30  BE22               	btfsc	(menu@i+1)^0,7,c
  1786  007C32  EF24  F03E         	goto	u2311
  1787  007C36  0EE8               	movlw	232
  1788  007C38  5C21               	subwf	menu@i^0,w,c
  1789  007C3A  0E03               	movlw	3
  1790  007C3C  5822               	subwfb	(menu@i+1)^0,w,c
  1791  007C3E  A0D8               	btfss	status,0,c
  1792  007C40  EF24  F03E         	goto	u2311
  1793  007C44  EF26  F03E         	goto	u2310
  1794  007C48                     u2311:
  1795  007C48  EF0C  F03D         	goto	l2971
  1796  007C4C                     u2310:
  1797  007C4C  0012               	return		;funcret
  1798  007C4E                     __end_of_menu:
  1799                           	callstack 0
  1800                           
  1801 ;; *************** function _selectFunction *****************
  1802 ;; Defined at:
  1803 ;;		line 239 in file "main.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;  op              2   26[COMRAM] int 
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;		None
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  1    wreg      void 
  1810 ;; Registers used:
  1811 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1812 ;; Tracked objects:
  1813 ;;		On entry : 0/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1817 ;;      Params:         2       0       0       0       0       0       0
  1818 ;;      Locals:         0       0       0       0       0       0       0
  1819 ;;      Temps:          2       0       0       0       0       0       0
  1820 ;;      Totals:         4       0       0       0       0       0       0
  1821 ;;Total ram usage:        4 bytes
  1822 ;; Hardware stack levels used: 1
  1823 ;; Hardware stack levels required when called: 7
  1824 ;; This function calls:
  1825 ;;		_alarmeConfig
  1826 ;;		_alarmeHora
  1827 ;;		_horaConfig
  1828 ;;		_radioConfig
  1829 ;;		_radioFreq
  1830 ;; This function is called by:
  1831 ;;		_menu
  1832 ;; This function uses a non-reentrant model
  1833 ;;
  1834                           
  1835                           	psect	text6
  1836  0062D8                     __ptext6:
  1837                           	callstack 0
  1838  0062D8                     _selectFunction:
  1839                           	callstack 21
  1840  0062D8                     
  1841                           ;main.c: 240:     switch (op) {
  1842  0062D8  EF8A  F031         	goto	l2789
  1843  0062DC                     l2777:
  1844                           
  1845                           ;main.c: 242:             alarmeConfig();
  1846  0062DC  EC69  F034         	call	_alarmeConfig	;wreg free
  1847                           
  1848                           ;main.c: 243:             break;
  1849  0062E0  EFAC  F031         	goto	l156
  1850  0062E4                     l2779:
  1851                           
  1852                           ;main.c: 245:             alarmeHora(0);
  1853  0062E4  0E00               	movlw	0
  1854  0062E6  6E16               	movwf	(alarmeHora@pos+1)^0,c
  1855  0062E8  0E00               	movlw	0
  1856  0062EA  6E15               	movwf	alarmeHora@pos^0,c
  1857  0062EC  EC0B  F039         	call	_alarmeHora	;wreg free
  1858                           
  1859                           ;main.c: 246:             break;
  1860  0062F0  EFAC  F031         	goto	l156
  1861  0062F4                     l2781:
  1862                           
  1863                           ;main.c: 248:             radioConfig();
  1864  0062F4  ECF3  F035         	call	_radioConfig	;wreg free
  1865                           
  1866                           ;main.c: 249:             break;
  1867  0062F8  EFAC  F031         	goto	l156
  1868  0062FC                     l2783:
  1869                           
  1870                           ;main.c: 251:             radioFreq();
  1871  0062FC  EC7C  F036         	call	_radioFreq	;wreg free
  1872                           
  1873                           ;main.c: 252:             break;
  1874  006300  EFAC  F031         	goto	l156
  1875  006304                     l2785:
  1876                           
  1877                           ;main.c: 254:             horaConfig(0);
  1878  006304  0E00               	movlw	0
  1879  006306  6E16               	movwf	(horaConfig@pos+1)^0,c
  1880  006308  0E00               	movlw	0
  1881  00630A  6E15               	movwf	horaConfig@pos^0,c
  1882  00630C  ECDC  F039         	call	_horaConfig	;wreg free
  1883                           
  1884                           ;main.c: 255:             break;
  1885  006310  EFAC  F031         	goto	l156
  1886  006314                     l2789:
  1887  006314  C01B  F01D         	movff	selectFunction@op,??_selectFunction
  1888  006318  C01C  F01E         	movff	selectFunction@op+1,??_selectFunction+1
  1889                           
  1890                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1891                           ; Switch size 1, requested type "simple"
  1892                           ; Number of cases is 1, Range of values is 0 to 0
  1893                           ; switch strategies available:
  1894                           ; Name         Instructions Cycles
  1895                           ; simple_byte            4     3 (average)
  1896                           ;	Chosen strategy is simple_byte
  1897  00631C  501E               	movf	(??_selectFunction+1)^0,w,c
  1898  00631E  0A00               	xorlw	0	; case 0
  1899  006320  B4D8               	btfsc	status,2,c
  1900  006322  EF95  F031         	goto	l3497
  1901  006326  EFAC  F031         	goto	l156
  1902  00632A                     l3497:
  1903                           
  1904                           ; Switch size 1, requested type "simple"
  1905                           ; Number of cases is 5, Range of values is 0 to 4
  1906                           ; switch strategies available:
  1907                           ; Name         Instructions Cycles
  1908                           ; simple_byte           16     9 (average)
  1909                           ;	Chosen strategy is simple_byte
  1910  00632A  501D               	movf	??_selectFunction^0,w,c
  1911  00632C  0A00               	xorlw	0	; case 0
  1912  00632E  B4D8               	btfsc	status,2,c
  1913  006330  EF6E  F031         	goto	l2777
  1914  006334  0A01               	xorlw	1	; case 1
  1915  006336  B4D8               	btfsc	status,2,c
  1916  006338  EF72  F031         	goto	l2779
  1917  00633C  0A03               	xorlw	3	; case 2
  1918  00633E  B4D8               	btfsc	status,2,c
  1919  006340  EF7A  F031         	goto	l2781
  1920  006344  0A01               	xorlw	1	; case 3
  1921  006346  B4D8               	btfsc	status,2,c
  1922  006348  EF7E  F031         	goto	l2783
  1923  00634C  0A07               	xorlw	7	; case 4
  1924  00634E  B4D8               	btfsc	status,2,c
  1925  006350  EF82  F031         	goto	l2785
  1926  006354  EFAC  F031         	goto	l156
  1927  006358                     l156:
  1928  006358  0012               	return		;funcret
  1929  00635A                     __end_of_selectFunction:
  1930                           	callstack 0
  1931                           
  1932 ;; *************** function _radioFreq *****************
  1933 ;; Defined at:
  1934 ;;		line 67 in file "main.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;		None
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;  i               2   22[COMRAM] int 
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      void 
  1941 ;; Registers used:
  1942 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1948 ;;      Params:         0       0       0       0       0       0       0
  1949 ;;      Locals:         2       0       0       0       0       0       0
  1950 ;;      Temps:          2       0       0       0       0       0       0
  1951 ;;      Totals:         4       0       0       0       0       0       0
  1952 ;;Total ram usage:        4 bytes
  1953 ;; Hardware stack levels used: 1
  1954 ;; Hardware stack levels required when called: 6
  1955 ;; This function calls:
  1956 ;;		_kpRead
  1957 ;;		_kpReadKey
  1958 ;;		_lcdCommand
  1959 ;;		_lcdString
  1960 ;;		_ssdUpdate
  1961 ;;		_timerReset
  1962 ;;		_timerWait
  1963 ;; This function is called by:
  1964 ;;		_selectFunction
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           	psect	text7
  1969  006CF8                     __ptext7:
  1970                           	callstack 0
  1971  006CF8                     _radioFreq:
  1972                           	callstack 21
  1973  006CF8                     
  1974                           ;main.c: 68:     lcdCommand(0x01);
  1975  006CF8  0E01               	movlw	1
  1976  006CFA  ECB3  F02E         	call	_lcdCommand
  1977                           
  1978                           ;main.c: 69:     lcdCommand(0x80);
  1979  006CFE  0E80               	movlw	128
  1980  006D00  ECB3  F02E         	call	_lcdCommand
  1981  006D04                     
  1982                           ;main.c: 70:     lcdString("Radio");
  1983  006D04  0EF8               	movlw	low STR_1
  1984  006D06  6E0F               	movwf	lcdString@msg^0,c
  1985  006D08  0E7F               	movlw	high STR_1
  1986  006D0A  6E10               	movwf	(lcdString@msg+1)^0,c
  1987  006D0C  EC09  F030         	call	_lcdString	;wreg free
  1988  006D10                     
  1989                           ;main.c: 71:     if (freq == 'f') {
  1990  006D10  0E66               	movlw	102
  1991  006D12  184F               	xorwf	_freq^0,w,c
  1992  006D14  A4D8               	btfss	status,2,c
  1993  006D16  EF8F  F036         	goto	u1701
  1994  006D1A  EF91  F036         	goto	u1700
  1995  006D1E                     u1701:
  1996  006D1E  EF9C  F036         	goto	l2573
  1997  006D22                     u1700:
  1998  006D22                     
  1999                           ;main.c: 72:         lcdCommand(0xC0);
  2000  006D22  0EC0               	movlw	192
  2001  006D24  ECB3  F02E         	call	_lcdCommand
  2002  006D28                     
  2003                           ;main.c: 73:         lcdString("Frequencia: FM");
  2004  006D28  0E88               	movlw	low STR_5
  2005  006D2A  6E0F               	movwf	lcdString@msg^0,c
  2006  006D2C  0E7F               	movlw	high STR_5
  2007  006D2E  6E10               	movwf	(lcdString@msg+1)^0,c
  2008  006D30  EC09  F030         	call	_lcdString	;wreg free
  2009                           
  2010                           ;main.c: 74:     } else {
  2011  006D34  EFA5  F036         	goto	l2577
  2012  006D38                     l2573:
  2013                           
  2014                           ;main.c: 75:         lcdCommand(0xC0);
  2015  006D38  0EC0               	movlw	192
  2016  006D3A  ECB3  F02E         	call	_lcdCommand
  2017  006D3E                     
  2018                           ;main.c: 77:         lcdString("Frequencia: AM");
  2019  006D3E  0E79               	movlw	low STR_6
  2020  006D40  6E0F               	movwf	lcdString@msg^0,c
  2021  006D42  0E7F               	movlw	high STR_6
  2022  006D44  6E10               	movwf	(lcdString@msg+1)^0,c
  2023  006D46  EC09  F030         	call	_lcdString	;wreg free
  2024  006D4A                     l2577:
  2025                           
  2026                           ;main.c: 79:     for (int i = 0; i < 100; i++) {
  2027  006D4A  0E00               	movlw	0
  2028  006D4C  6E18               	movwf	(radioFreq@i+1)^0,c
  2029  006D4E  0E00               	movlw	0
  2030  006D50  6E17               	movwf	radioFreq@i^0,c
  2031  006D52                     l2583:
  2032                           
  2033                           ;main.c: 80:         timerReset(5000);
  2034  006D52  0E13               	movlw	19
  2035  006D54  6E02               	movwf	(timerReset@tempo+1)^0,c
  2036  006D56  0E88               	movlw	136
  2037  006D58  6E01               	movwf	timerReset@tempo^0,c
  2038  006D5A  ECD1  F02E         	call	_timerReset	;wreg free
  2039  006D5E                     
  2040                           ;main.c: 82:         ssdUpdate();
  2041  006D5E  EC55  F038         	call	_ssdUpdate	;wreg free
  2042  006D62                     
  2043                           ;main.c: 84:         if (kpRead() != tecla) {
  2044  006D62  EC94  F02E         	call	_kpRead	;wreg free
  2045  006D66  5040               	movf	_tecla^0,w,c
  2046  006D68  1801               	xorwf	?_kpRead^0,w,c
  2047  006D6A  E109               	bnz	u1710
  2048  006D6C  5041               	movf	(_tecla+1)^0,w,c
  2049  006D6E  1802               	xorwf	(?_kpRead+1)^0,w,c
  2050  006D70  B4D8               	btfsc	status,2,c
  2051  006D72  EFBD  F036         	goto	u1711
  2052  006D76  EFBF  F036         	goto	u1710
  2053  006D7A                     u1711:
  2054  006D7A  EFF2  F036         	goto	l2601
  2055  006D7E                     u1710:
  2056  006D7E                     
  2057                           ;main.c: 85:             tecla = kpRead();
  2058  006D7E  EC94  F02E         	call	_kpRead	;wreg free
  2059  006D82  C001  F040         	movff	?_kpRead,_tecla
  2060  006D86  C002  F041         	movff	?_kpRead+1,_tecla+1
  2061                           
  2062                           ;main.c: 86:             switch (kpReadKey()) {
  2063  006D8A  EFDC  F036         	goto	l2599
  2064  006D8E                     l2591:
  2065                           
  2066                           ;main.c: 88:                     if (freq == 'f') {
  2067  006D8E  0E66               	movlw	102
  2068  006D90  184F               	xorwf	_freq^0,w,c
  2069  006D92  A4D8               	btfss	status,2,c
  2070  006D94  EFCE  F036         	goto	u1721
  2071  006D98  EFD0  F036         	goto	u1720
  2072  006D9C                     u1721:
  2073  006D9C  EFD4  F036         	goto	l2595
  2074  006DA0                     u1720:
  2075  006DA0                     
  2076                           ;main.c: 89:                         freq = 'a';
  2077  006DA0  0E61               	movlw	97
  2078  006DA2  6E4F               	movwf	_freq^0,c
  2079                           
  2080                           ;main.c: 90:                     } else {
  2081  006DA4  EFD6  F036         	goto	l87
  2082  006DA8                     l2595:
  2083                           
  2084                           ;main.c: 91:                         freq = 'f';
  2085  006DA8  0E66               	movlw	102
  2086  006DAA  6E4F               	movwf	_freq^0,c
  2087  006DAC                     l87:
  2088                           
  2089                           ;main.c: 93:                     i = 1000;
  2090  006DAC  0E03               	movlw	3
  2091  006DAE  6E18               	movwf	(radioFreq@i+1)^0,c
  2092  006DB0  0EE8               	movlw	232
  2093  006DB2  6E17               	movwf	radioFreq@i^0,c
  2094                           
  2095                           ;main.c: 94:                     break;
  2096  006DB4  EFF2  F036         	goto	l2601
  2097  006DB8                     l2599:
  2098  006DB8  ECF2  F030         	call	_kpReadKey	;wreg free
  2099  006DBC  6E15               	movwf	??_radioFreq^0,c
  2100  006DBE  6A16               	clrf	(??_radioFreq+1)^0,c
  2101                           
  2102                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2103                           ; Switch size 1, requested type "simple"
  2104                           ; Number of cases is 1, Range of values is 0 to 0
  2105                           ; switch strategies available:
  2106                           ; Name         Instructions Cycles
  2107                           ; simple_byte            4     3 (average)
  2108                           ;	Chosen strategy is simple_byte
  2109  006DC0  5016               	movf	(??_radioFreq+1)^0,w,c
  2110  006DC2  0A00               	xorlw	0	; case 0
  2111  006DC4  B4D8               	btfsc	status,2,c
  2112  006DC6  EFE7  F036         	goto	l3499
  2113  006DCA  EFF2  F036         	goto	l2601
  2114  006DCE                     l3499:
  2115                           
  2116                           ; Switch size 1, requested type "simple"
  2117                           ; Number of cases is 2, Range of values is 83 to 115
  2118                           ; switch strategies available:
  2119                           ; Name         Instructions Cycles
  2120                           ; simple_byte            7     4 (average)
  2121                           ;	Chosen strategy is simple_byte
  2122  006DCE  5015               	movf	??_radioFreq^0,w,c
  2123  006DD0  0A53               	xorlw	83	; case 83
  2124  006DD2  B4D8               	btfsc	status,2,c
  2125  006DD4  EFC7  F036         	goto	l2591
  2126  006DD8  0A20               	xorlw	32	; case 115
  2127  006DDA  B4D8               	btfsc	status,2,c
  2128  006DDC  EFF2  F036         	goto	l2601
  2129  006DE0  EFF2  F036         	goto	l2601
  2130  006DE4                     l2601:
  2131                           
  2132                           ;main.c: 99:         timerWait();
  2133  006DE4  EC9E  F02E         	call	_timerWait	;wreg free
  2134  006DE8                     
  2135                           ;main.c: 101:     }
  2136  006DE8  4A17               	infsnz	radioFreq@i^0,f,c
  2137  006DEA  2A18               	incf	(radioFreq@i+1)^0,f,c
  2138  006DEC  BE18               	btfsc	(radioFreq@i+1)^0,7,c
  2139  006DEE  EF02  F037         	goto	u1731
  2140  006DF2  5018               	movf	(radioFreq@i+1)^0,w,c
  2141  006DF4  E109               	bnz	u1730
  2142  006DF6  0E64               	movlw	100
  2143  006DF8  5C17               	subwf	radioFreq@i^0,w,c
  2144  006DFA  A0D8               	btfss	status,0,c
  2145  006DFC  EF02  F037         	goto	u1731
  2146  006E00  EF04  F037         	goto	u1730
  2147  006E04                     u1731:
  2148  006E04  EFA9  F036         	goto	l2583
  2149  006E08                     u1730:
  2150  006E08  0012               	return		;funcret
  2151  006E0A                     __end_of_radioFreq:
  2152                           	callstack 0
  2153                           
  2154 ;; *************** function _radioConfig *****************
  2155 ;; Defined at:
  2156 ;;		line 29 in file "main.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;		None
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;  i               2   22[COMRAM] int 
  2161 ;; Return value:  Size  Location     Type
  2162 ;;                  1    wreg      void 
  2163 ;; Registers used:
  2164 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2170 ;;      Params:         0       0       0       0       0       0       0
  2171 ;;      Locals:         2       0       0       0       0       0       0
  2172 ;;      Temps:          2       0       0       0       0       0       0
  2173 ;;      Totals:         4       0       0       0       0       0       0
  2174 ;;Total ram usage:        4 bytes
  2175 ;; Hardware stack levels used: 1
  2176 ;; Hardware stack levels required when called: 6
  2177 ;; This function calls:
  2178 ;;		_kpRead
  2179 ;;		_kpReadKey
  2180 ;;		_lcdCommand
  2181 ;;		_lcdString
  2182 ;;		_ssdUpdate
  2183 ;;		_timerReset
  2184 ;;		_timerWait
  2185 ;; This function is called by:
  2186 ;;		_selectFunction
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           	psect	text8
  2191  006BE6                     __ptext8:
  2192                           	callstack 0
  2193  006BE6                     _radioConfig:
  2194                           	callstack 21
  2195  006BE6                     
  2196                           ;main.c: 30:     lcdCommand(0x01);
  2197  006BE6  0E01               	movlw	1
  2198  006BE8  ECB3  F02E         	call	_lcdCommand
  2199                           
  2200                           ;main.c: 31:     lcdCommand(0x80);
  2201  006BEC  0E80               	movlw	128
  2202  006BEE  ECB3  F02E         	call	_lcdCommand
  2203  006BF2                     
  2204                           ;main.c: 32:     lcdString("Radio");
  2205  006BF2  0EF8               	movlw	low STR_1
  2206  006BF4  6E0F               	movwf	lcdString@msg^0,c
  2207  006BF6  0E7F               	movlw	high STR_1
  2208  006BF8  6E10               	movwf	(lcdString@msg+1)^0,c
  2209  006BFA  EC09  F030         	call	_lcdString	;wreg free
  2210  006BFE                     
  2211                           ;main.c: 33:     if (radioAtivo == '0') {
  2212  006BFE  0E30               	movlw	48
  2213  006C00  1850               	xorwf	_radioAtivo^0,w,c
  2214  006C02  A4D8               	btfss	status,2,c
  2215  006C04  EF06  F036         	goto	u1661
  2216  006C08  EF08  F036         	goto	u1660
  2217  006C0C                     u1661:
  2218  006C0C  EF13  F036         	goto	l2525
  2219  006C10                     u1660:
  2220  006C10                     
  2221                           ;main.c: 34:         lcdCommand(0xC0);
  2222  006C10  0EC0               	movlw	192
  2223  006C12  ECB3  F02E         	call	_lcdCommand
  2224  006C16                     
  2225                           ;main.c: 35:         lcdString("Radio: desligado");
  2226  006C16  0E18               	movlw	low STR_2
  2227  006C18  6E0F               	movwf	lcdString@msg^0,c
  2228  006C1A  0E7F               	movlw	high STR_2
  2229  006C1C  6E10               	movwf	(lcdString@msg+1)^0,c
  2230  006C1E  EC09  F030         	call	_lcdString	;wreg free
  2231                           
  2232                           ;main.c: 36:     } else {
  2233  006C22  EF1C  F036         	goto	l2529
  2234  006C26                     l2525:
  2235                           
  2236                           ;main.c: 37:         lcdCommand(0xC0);
  2237  006C26  0EC0               	movlw	192
  2238  006C28  ECB3  F02E         	call	_lcdCommand
  2239  006C2C                     
  2240                           ;main.c: 39:         lcdString("Radio: ligado");
  2241  006C2C  0EC4               	movlw	low STR_3
  2242  006C2E  6E0F               	movwf	lcdString@msg^0,c
  2243  006C30  0E7F               	movlw	high STR_3
  2244  006C32  6E10               	movwf	(lcdString@msg+1)^0,c
  2245  006C34  EC09  F030         	call	_lcdString	;wreg free
  2246  006C38                     l2529:
  2247                           
  2248                           ;main.c: 41:     for (int i = 0; i < 100; i++) {
  2249  006C38  0E00               	movlw	0
  2250  006C3A  6E18               	movwf	(radioConfig@i+1)^0,c
  2251  006C3C  0E00               	movlw	0
  2252  006C3E  6E17               	movwf	radioConfig@i^0,c
  2253  006C40                     l2535:
  2254                           
  2255                           ;main.c: 42:         timerReset(5000);
  2256  006C40  0E13               	movlw	19
  2257  006C42  6E02               	movwf	(timerReset@tempo+1)^0,c
  2258  006C44  0E88               	movlw	136
  2259  006C46  6E01               	movwf	timerReset@tempo^0,c
  2260  006C48  ECD1  F02E         	call	_timerReset	;wreg free
  2261  006C4C                     
  2262                           ;main.c: 44:         ssdUpdate();
  2263  006C4C  EC55  F038         	call	_ssdUpdate	;wreg free
  2264  006C50                     
  2265                           ;main.c: 46:         if (kpRead() != tecla) {
  2266  006C50  EC94  F02E         	call	_kpRead	;wreg free
  2267  006C54  5040               	movf	_tecla^0,w,c
  2268  006C56  1801               	xorwf	?_kpRead^0,w,c
  2269  006C58  E109               	bnz	u1670
  2270  006C5A  5041               	movf	(_tecla+1)^0,w,c
  2271  006C5C  1802               	xorwf	(?_kpRead+1)^0,w,c
  2272  006C5E  B4D8               	btfsc	status,2,c
  2273  006C60  EF34  F036         	goto	u1671
  2274  006C64  EF36  F036         	goto	u1670
  2275  006C68                     u1671:
  2276  006C68  EF69  F036         	goto	l2553
  2277  006C6C                     u1670:
  2278  006C6C                     
  2279                           ;main.c: 47:             tecla = kpRead();
  2280  006C6C  EC94  F02E         	call	_kpRead	;wreg free
  2281  006C70  C001  F040         	movff	?_kpRead,_tecla
  2282  006C74  C002  F041         	movff	?_kpRead+1,_tecla+1
  2283                           
  2284                           ;main.c: 48:             switch (kpReadKey()) {
  2285  006C78  EF53  F036         	goto	l2551
  2286  006C7C                     l2543:
  2287                           
  2288                           ;main.c: 50:                     if (radioAtivo == '0') {
  2289  006C7C  0E30               	movlw	48
  2290  006C7E  1850               	xorwf	_radioAtivo^0,w,c
  2291  006C80  A4D8               	btfss	status,2,c
  2292  006C82  EF45  F036         	goto	u1681
  2293  006C86  EF47  F036         	goto	u1680
  2294  006C8A                     u1681:
  2295  006C8A  EF4B  F036         	goto	l2547
  2296  006C8E                     u1680:
  2297  006C8E                     
  2298                           ;main.c: 51:                         radioAtivo = '1';
  2299  006C8E  0E31               	movlw	49
  2300  006C90  6E50               	movwf	_radioAtivo^0,c
  2301                           
  2302                           ;main.c: 52:                     } else {
  2303  006C92  EF4D  F036         	goto	l73
  2304  006C96                     l2547:
  2305                           
  2306                           ;main.c: 53:                         radioAtivo = '0';
  2307  006C96  0E30               	movlw	48
  2308  006C98  6E50               	movwf	_radioAtivo^0,c
  2309  006C9A                     l73:
  2310                           
  2311                           ;main.c: 55:                     i = 1000;
  2312  006C9A  0E03               	movlw	3
  2313  006C9C  6E18               	movwf	(radioConfig@i+1)^0,c
  2314  006C9E  0EE8               	movlw	232
  2315  006CA0  6E17               	movwf	radioConfig@i^0,c
  2316                           
  2317                           ;main.c: 56:                     break;
  2318  006CA2  EF69  F036         	goto	l2553
  2319  006CA6                     l2551:
  2320  006CA6  ECF2  F030         	call	_kpReadKey	;wreg free
  2321  006CAA  6E15               	movwf	??_radioConfig^0,c
  2322  006CAC  6A16               	clrf	(??_radioConfig+1)^0,c
  2323                           
  2324                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2325                           ; Switch size 1, requested type "simple"
  2326                           ; Number of cases is 1, Range of values is 0 to 0
  2327                           ; switch strategies available:
  2328                           ; Name         Instructions Cycles
  2329                           ; simple_byte            4     3 (average)
  2330                           ;	Chosen strategy is simple_byte
  2331  006CAE  5016               	movf	(??_radioConfig+1)^0,w,c
  2332  006CB0  0A00               	xorlw	0	; case 0
  2333  006CB2  B4D8               	btfsc	status,2,c
  2334  006CB4  EF5E  F036         	goto	l3501
  2335  006CB8  EF69  F036         	goto	l2553
  2336  006CBC                     l3501:
  2337                           
  2338                           ; Switch size 1, requested type "simple"
  2339                           ; Number of cases is 2, Range of values is 83 to 115
  2340                           ; switch strategies available:
  2341                           ; Name         Instructions Cycles
  2342                           ; simple_byte            7     4 (average)
  2343                           ;	Chosen strategy is simple_byte
  2344  006CBC  5015               	movf	??_radioConfig^0,w,c
  2345  006CBE  0A53               	xorlw	83	; case 83
  2346  006CC0  B4D8               	btfsc	status,2,c
  2347  006CC2  EF3E  F036         	goto	l2543
  2348  006CC6  0A20               	xorlw	32	; case 115
  2349  006CC8  B4D8               	btfsc	status,2,c
  2350  006CCA  EF69  F036         	goto	l2553
  2351  006CCE  EF69  F036         	goto	l2553
  2352  006CD2                     l2553:
  2353                           
  2354                           ;main.c: 62:         timerWait();
  2355  006CD2  EC9E  F02E         	call	_timerWait	;wreg free
  2356  006CD6                     
  2357                           ;main.c: 64:     }
  2358  006CD6  4A17               	infsnz	radioConfig@i^0,f,c
  2359  006CD8  2A18               	incf	(radioConfig@i+1)^0,f,c
  2360  006CDA  BE18               	btfsc	(radioConfig@i+1)^0,7,c
  2361  006CDC  EF79  F036         	goto	u1691
  2362  006CE0  5018               	movf	(radioConfig@i+1)^0,w,c
  2363  006CE2  E109               	bnz	u1690
  2364  006CE4  0E64               	movlw	100
  2365  006CE6  5C17               	subwf	radioConfig@i^0,w,c
  2366  006CE8  A0D8               	btfss	status,0,c
  2367  006CEA  EF79  F036         	goto	u1691
  2368  006CEE  EF7B  F036         	goto	u1690
  2369  006CF2                     u1691:
  2370  006CF2  EF20  F036         	goto	l2535
  2371  006CF6                     u1690:
  2372  006CF6  0012               	return		;funcret
  2373  006CF8                     __end_of_radioConfig:
  2374                           	callstack 0
  2375                           
  2376 ;; *************** function _horaConfig *****************
  2377 ;; Defined at:
  2378 ;;		line 156 in file "main.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;  pos             2   20[COMRAM] int 
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;  i               2   24[COMRAM] int 
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  1    wreg      void 
  2385 ;; Registers used:
  2386 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2392 ;;      Params:         2       0       0       0       0       0       0
  2393 ;;      Locals:         2       0       0       0       0       0       0
  2394 ;;      Temps:          2       0       0       0       0       0       0
  2395 ;;      Totals:         6       0       0       0       0       0       0
  2396 ;;Total ram usage:        6 bytes
  2397 ;; Hardware stack levels used: 1
  2398 ;; Hardware stack levels required when called: 6
  2399 ;; This function calls:
  2400 ;;		_kpRead
  2401 ;;		_kpReadKey
  2402 ;;		_lcdCommand
  2403 ;;		_lcdString
  2404 ;;		_ssdUpdate
  2405 ;;		_timerReset
  2406 ;;		_timerWait
  2407 ;; This function is called by:
  2408 ;;		_selectFunction
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412                           	psect	text9
  2413  0073B8                     __ptext9:
  2414                           	callstack 0
  2415  0073B8                     _horaConfig:
  2416                           	callstack 21
  2417  0073B8                     
  2418                           ;main.c: 157:     lcdCommand(0x01);
  2419  0073B8  0E01               	movlw	1
  2420  0073BA  ECB3  F02E         	call	_lcdCommand
  2421                           
  2422                           ;main.c: 158:     lcdCommand(0x80);
  2423  0073BE  0E80               	movlw	128
  2424  0073C0  ECB3  F02E         	call	_lcdCommand
  2425  0073C4                     
  2426                           ;main.c: 159:     lcdString("hora do alarme");
  2427  0073C4  0E97               	movlw	low STR_7
  2428  0073C6  6E0F               	movwf	lcdString@msg^0,c
  2429  0073C8  0E7F               	movlw	high STR_7
  2430  0073CA  6E10               	movwf	(lcdString@msg+1)^0,c
  2431  0073CC  EC09  F030         	call	_lcdString	;wreg free
  2432  0073D0                     
  2433                           ;main.c: 161:     for (int i = 0; i < 100; i++) {
  2434  0073D0  0E00               	movlw	0
  2435  0073D2  6E1A               	movwf	(horaConfig@i+1)^0,c
  2436  0073D4  0E00               	movlw	0
  2437  0073D6  6E19               	movwf	horaConfig@i^0,c
  2438  0073D8                     l2681:
  2439                           
  2440                           ;main.c: 162:         timerReset(5000);
  2441  0073D8  0E13               	movlw	19
  2442  0073DA  6E02               	movwf	(timerReset@tempo+1)^0,c
  2443  0073DC  0E88               	movlw	136
  2444  0073DE  6E01               	movwf	timerReset@tempo^0,c
  2445  0073E0  ECD1  F02E         	call	_timerReset	;wreg free
  2446  0073E4                     
  2447                           ;main.c: 164:         ssdUpdate();
  2448  0073E4  EC55  F038         	call	_ssdUpdate	;wreg free
  2449  0073E8                     
  2450                           ;main.c: 166:         if (kpRead() != tecla) {
  2451  0073E8  EC94  F02E         	call	_kpRead	;wreg free
  2452  0073EC  5040               	movf	_tecla^0,w,c
  2453  0073EE  1801               	xorwf	?_kpRead^0,w,c
  2454  0073F0  E109               	bnz	u1800
  2455  0073F2  5041               	movf	(_tecla+1)^0,w,c
  2456  0073F4  1802               	xorwf	(?_kpRead+1)^0,w,c
  2457  0073F6  B4D8               	btfsc	status,2,c
  2458  0073F8  EF00  F03A         	goto	u1801
  2459  0073FC  EF02  F03A         	goto	u1800
  2460  007400                     u1801:
  2461  007400  EF9A  F03A         	goto	l2721
  2462  007404                     u1800:
  2463  007404                     
  2464                           ;main.c: 167:             tecla = kpRead();
  2465  007404  EC94  F02E         	call	_kpRead	;wreg free
  2466  007408  C001  F040         	movff	?_kpRead,_tecla
  2467  00740C  C002  F041         	movff	?_kpRead+1,_tecla+1
  2468                           
  2469                           ;main.c: 168:             switch (kpReadKey()) {
  2470  007410  EF78  F03A         	goto	l2719
  2471  007414                     l2689:
  2472                           
  2473                           ;main.c: 170:                     if (pos == 0) {
  2474  007414  5015               	movf	horaConfig@pos^0,w,c
  2475  007416  1016               	iorwf	(horaConfig@pos+1)^0,w,c
  2476  007418  A4D8               	btfss	status,2,c
  2477  00741A  EF11  F03A         	goto	u1811
  2478  00741E  EF13  F03A         	goto	u1810
  2479  007422                     u1811:
  2480  007422  EF21  F03A         	goto	l2693
  2481  007426                     u1810:
  2482  007426                     
  2483                           ;main.c: 171:                         hora = hora + 360000;
  2484  007426  0E40               	movlw	64
  2485  007428  244A               	addwf	_hora^0,w,c
  2486  00742A  6E4A               	movwf	_hora^0,c
  2487  00742C  0E7E               	movlw	126
  2488  00742E  204B               	addwfc	(_hora+1)^0,w,c
  2489  007430  6E4B               	movwf	(_hora+1)^0,c
  2490  007432  0E05               	movlw	5
  2491  007434  204C               	addwfc	(_hora+2)^0,w,c
  2492  007436  6E4C               	movwf	(_hora+2)^0,c
  2493  007438  0E00               	movlw	0
  2494  00743A  204D               	addwfc	(_hora+3)^0,w,c
  2495  00743C  6E4D               	movwf	(_hora+3)^0,c
  2496                           
  2497                           ;main.c: 172:                     } else {
  2498  00743E  EF2D  F03A         	goto	l2695
  2499  007442                     l2693:
  2500                           
  2501                           ;main.c: 173:                         hora = hora + 6000;
  2502  007442  0E70               	movlw	112
  2503  007444  244A               	addwf	_hora^0,w,c
  2504  007446  6E4A               	movwf	_hora^0,c
  2505  007448  0E17               	movlw	23
  2506  00744A  204B               	addwfc	(_hora+1)^0,w,c
  2507  00744C  6E4B               	movwf	(_hora+1)^0,c
  2508  00744E  0E00               	movlw	0
  2509  007450  204C               	addwfc	(_hora+2)^0,w,c
  2510  007452  6E4C               	movwf	(_hora+2)^0,c
  2511  007454  0E00               	movlw	0
  2512  007456  204D               	addwfc	(_hora+3)^0,w,c
  2513  007458  6E4D               	movwf	(_hora+3)^0,c
  2514  00745A                     l2695:
  2515                           
  2516                           ;main.c: 175:                     i = 1000;
  2517  00745A  0E03               	movlw	3
  2518  00745C  6E1A               	movwf	(horaConfig@i+1)^0,c
  2519  00745E  0EE8               	movlw	232
  2520  007460  6E19               	movwf	horaConfig@i^0,c
  2521                           
  2522                           ;main.c: 176:                     break;
  2523  007462  EF9A  F03A         	goto	l2721
  2524  007466                     l2697:
  2525                           
  2526                           ;main.c: 178:                     if (pos == 0) {
  2527  007466  5015               	movf	horaConfig@pos^0,w,c
  2528  007468  1016               	iorwf	(horaConfig@pos+1)^0,w,c
  2529  00746A  A4D8               	btfss	status,2,c
  2530  00746C  EF3A  F03A         	goto	u1821
  2531  007470  EF3C  F03A         	goto	u1820
  2532  007474                     u1821:
  2533  007474  EF4A  F03A         	goto	l2701
  2534  007478                     u1820:
  2535  007478                     
  2536                           ;main.c: 179:                         hora = hora - 360000;
  2537  007478  0EC0               	movlw	192
  2538  00747A  244A               	addwf	_hora^0,w,c
  2539  00747C  6E4A               	movwf	_hora^0,c
  2540  00747E  0E81               	movlw	129
  2541  007480  204B               	addwfc	(_hora+1)^0,w,c
  2542  007482  6E4B               	movwf	(_hora+1)^0,c
  2543  007484  0EFA               	movlw	250
  2544  007486  204C               	addwfc	(_hora+2)^0,w,c
  2545  007488  6E4C               	movwf	(_hora+2)^0,c
  2546  00748A  0EFF               	movlw	255
  2547  00748C  204D               	addwfc	(_hora+3)^0,w,c
  2548  00748E  6E4D               	movwf	(_hora+3)^0,c
  2549                           
  2550                           ;main.c: 180:                     } else {
  2551  007490  EF2D  F03A         	goto	l2695
  2552  007494                     l2701:
  2553                           
  2554                           ;main.c: 181:                         hora = hora - 6000;
  2555  007494  0E90               	movlw	144
  2556  007496  244A               	addwf	_hora^0,w,c
  2557  007498  6E4A               	movwf	_hora^0,c
  2558  00749A  0EE8               	movlw	232
  2559  00749C  204B               	addwfc	(_hora+1)^0,w,c
  2560  00749E  6E4B               	movwf	(_hora+1)^0,c
  2561  0074A0  0EFF               	movlw	255
  2562  0074A2  204C               	addwfc	(_hora+2)^0,w,c
  2563  0074A4  6E4C               	movwf	(_hora+2)^0,c
  2564  0074A6  0EFF               	movlw	255
  2565  0074A8  204D               	addwfc	(_hora+3)^0,w,c
  2566  0074AA  6E4D               	movwf	(_hora+3)^0,c
  2567  0074AC  EF2D  F03A         	goto	l2695
  2568  0074B0                     l2705:
  2569                           
  2570                           ;main.c: 186:                     if (pos == 1) {
  2571  0074B0  0415               	decf	horaConfig@pos^0,w,c
  2572  0074B2  1016               	iorwf	(horaConfig@pos+1)^0,w,c
  2573  0074B4  A4D8               	btfss	status,2,c
  2574  0074B6  EF5F  F03A         	goto	u1831
  2575  0074BA  EF61  F03A         	goto	u1830
  2576  0074BE                     u1831:
  2577  0074BE  EF67  F03A         	goto	l2709
  2578  0074C2                     u1830:
  2579  0074C2                     l2707:
  2580                           
  2581                           ;main.c: 187:                         pos = 0;
  2582  0074C2  0E00               	movlw	0
  2583  0074C4  6E16               	movwf	(horaConfig@pos+1)^0,c
  2584  0074C6  0E00               	movlw	0
  2585  0074C8  6E15               	movwf	horaConfig@pos^0,c
  2586                           
  2587                           ;main.c: 188:                     } else {
  2588  0074CA  EF9A  F03A         	goto	l2721
  2589  0074CE                     l2709:
  2590                           
  2591                           ;main.c: 189:                         pos = 1;
  2592  0074CE  0E00               	movlw	0
  2593  0074D0  6E16               	movwf	(horaConfig@pos+1)^0,c
  2594  0074D2  0E01               	movlw	1
  2595  0074D4  6E15               	movwf	horaConfig@pos^0,c
  2596  0074D6  EF9A  F03A         	goto	l2721
  2597  0074DA                     l2711:
  2598                           
  2599                           ;main.c: 193:                     if (pos == 1) {
  2600  0074DA  0415               	decf	horaConfig@pos^0,w,c
  2601  0074DC  1016               	iorwf	(horaConfig@pos+1)^0,w,c
  2602  0074DE  A4D8               	btfss	status,2,c
  2603  0074E0  EF74  F03A         	goto	u1841
  2604  0074E4  EF76  F03A         	goto	u1840
  2605  0074E8                     u1841:
  2606  0074E8  EF67  F03A         	goto	l2709
  2607  0074EC                     u1840:
  2608  0074EC  EF61  F03A         	goto	l2707
  2609  0074F0                     l2719:
  2610  0074F0  ECF2  F030         	call	_kpReadKey	;wreg free
  2611  0074F4  6E17               	movwf	??_horaConfig^0,c
  2612  0074F6  6A18               	clrf	(??_horaConfig+1)^0,c
  2613                           
  2614                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2615                           ; Switch size 1, requested type "simple"
  2616                           ; Number of cases is 1, Range of values is 0 to 0
  2617                           ; switch strategies available:
  2618                           ; Name         Instructions Cycles
  2619                           ; simple_byte            4     3 (average)
  2620                           ;	Chosen strategy is simple_byte
  2621  0074F8  5018               	movf	(??_horaConfig+1)^0,w,c
  2622  0074FA  0A00               	xorlw	0	; case 0
  2623  0074FC  B4D8               	btfsc	status,2,c
  2624  0074FE  EF83  F03A         	goto	l3503
  2625  007502  EF9A  F03A         	goto	l2721
  2626  007506                     l3503:
  2627                           
  2628                           ; Switch size 1, requested type "simple"
  2629                           ; Number of cases is 5, Range of values is 65 to 115
  2630                           ; switch strategies available:
  2631                           ; Name         Instructions Cycles
  2632                           ; simple_byte           16     9 (average)
  2633                           ;	Chosen strategy is simple_byte
  2634  007506  5017               	movf	??_horaConfig^0,w,c
  2635  007508  0A41               	xorlw	65	; case 65
  2636  00750A  B4D8               	btfsc	status,2,c
  2637  00750C  EF6D  F03A         	goto	l2711
  2638  007510  0A03               	xorlw	3	; case 66
  2639  007512  B4D8               	btfsc	status,2,c
  2640  007514  EF33  F03A         	goto	l2697
  2641  007518  0A1A               	xorlw	26	; case 88
  2642  00751A  B4D8               	btfsc	status,2,c
  2643  00751C  EF0A  F03A         	goto	l2689
  2644  007520  0A01               	xorlw	1	; case 89
  2645  007522  B4D8               	btfsc	status,2,c
  2646  007524  EF58  F03A         	goto	l2705
  2647  007528  0A2A               	xorlw	42	; case 115
  2648  00752A  B4D8               	btfsc	status,2,c
  2649  00752C  EF9A  F03A         	goto	l2721
  2650  007530  EF9A  F03A         	goto	l2721
  2651  007534                     l2721:
  2652                           
  2653                           ;main.c: 203:         timerWait();
  2654  007534  EC9E  F02E         	call	_timerWait	;wreg free
  2655  007538                     
  2656                           ;main.c: 204:     }
  2657  007538  4A19               	infsnz	horaConfig@i^0,f,c
  2658  00753A  2A1A               	incf	(horaConfig@i+1)^0,f,c
  2659  00753C  BE1A               	btfsc	(horaConfig@i+1)^0,7,c
  2660  00753E  EFAA  F03A         	goto	u1851
  2661  007542  501A               	movf	(horaConfig@i+1)^0,w,c
  2662  007544  E109               	bnz	u1850
  2663  007546  0E64               	movlw	100
  2664  007548  5C19               	subwf	horaConfig@i^0,w,c
  2665  00754A  A0D8               	btfss	status,0,c
  2666  00754C  EFAA  F03A         	goto	u1851
  2667  007550  EFAC  F03A         	goto	u1850
  2668  007554                     u1851:
  2669  007554  EFEC  F039         	goto	l2681
  2670  007558                     u1850:
  2671  007558  0012               	return		;funcret
  2672  00755A                     __end_of_horaConfig:
  2673                           	callstack 0
  2674                           
  2675 ;; *************** function _alarmeHora *****************
  2676 ;; Defined at:
  2677 ;;		line 104 in file "main.c"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;  pos             2   20[COMRAM] int 
  2680 ;; Auto vars:     Size  Location     Type
  2681 ;;  i               2   24[COMRAM] int 
  2682 ;; Return value:  Size  Location     Type
  2683 ;;                  1    wreg      void 
  2684 ;; Registers used:
  2685 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2686 ;; Tracked objects:
  2687 ;;		On entry : 0/0
  2688 ;;		On exit  : 0/0
  2689 ;;		Unchanged: 0/0
  2690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2691 ;;      Params:         2       0       0       0       0       0       0
  2692 ;;      Locals:         2       0       0       0       0       0       0
  2693 ;;      Temps:          2       0       0       0       0       0       0
  2694 ;;      Totals:         6       0       0       0       0       0       0
  2695 ;;Total ram usage:        6 bytes
  2696 ;; Hardware stack levels used: 1
  2697 ;; Hardware stack levels required when called: 6
  2698 ;; This function calls:
  2699 ;;		_kpRead
  2700 ;;		_kpReadKey
  2701 ;;		_lcdCommand
  2702 ;;		_lcdString
  2703 ;;		_ssdUpdate
  2704 ;;		_timerReset
  2705 ;;		_timerWait
  2706 ;; This function is called by:
  2707 ;;		_selectFunction
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           	psect	text10
  2712  007216                     __ptext10:
  2713                           	callstack 0
  2714  007216                     _alarmeHora:
  2715                           	callstack 21
  2716  007216                     
  2717                           ;main.c: 105:     lcdCommand(0x01);
  2718  007216  0E01               	movlw	1
  2719  007218  ECB3  F02E         	call	_lcdCommand
  2720                           
  2721                           ;main.c: 106:     lcdCommand(0x80);
  2722  00721C  0E80               	movlw	128
  2723  00721E  ECB3  F02E         	call	_lcdCommand
  2724  007222                     
  2725                           ;main.c: 107:     lcdString("hora do alarme");
  2726  007222  0E97               	movlw	low STR_7
  2727  007224  6E0F               	movwf	lcdString@msg^0,c
  2728  007226  0E7F               	movlw	high STR_7
  2729  007228  6E10               	movwf	(lcdString@msg+1)^0,c
  2730  00722A  EC09  F030         	call	_lcdString	;wreg free
  2731  00722E                     
  2732                           ;main.c: 109:     for (int i = 0; i < 100; i++) {
  2733  00722E  0E00               	movlw	0
  2734  007230  6E1A               	movwf	(alarmeHora@i+1)^0,c
  2735  007232  0E00               	movlw	0
  2736  007234  6E19               	movwf	alarmeHora@i^0,c
  2737  007236                     l2621:
  2738                           
  2739                           ;main.c: 110:         timerReset(5000);
  2740  007236  0E13               	movlw	19
  2741  007238  6E02               	movwf	(timerReset@tempo+1)^0,c
  2742  00723A  0E88               	movlw	136
  2743  00723C  6E01               	movwf	timerReset@tempo^0,c
  2744  00723E  ECD1  F02E         	call	_timerReset	;wreg free
  2745  007242                     
  2746                           ;main.c: 112:         ssdUpdate();
  2747  007242  EC55  F038         	call	_ssdUpdate	;wreg free
  2748  007246                     
  2749                           ;main.c: 114:         if (kpRead() != tecla) {
  2750  007246  EC94  F02E         	call	_kpRead	;wreg free
  2751  00724A  5040               	movf	_tecla^0,w,c
  2752  00724C  1801               	xorwf	?_kpRead^0,w,c
  2753  00724E  E109               	bnz	u1740
  2754  007250  5041               	movf	(_tecla+1)^0,w,c
  2755  007252  1802               	xorwf	(?_kpRead+1)^0,w,c
  2756  007254  B4D8               	btfsc	status,2,c
  2757  007256  EF2F  F039         	goto	u1741
  2758  00725A  EF31  F039         	goto	u1740
  2759  00725E                     u1741:
  2760  00725E  EFC9  F039         	goto	l2661
  2761  007262                     u1740:
  2762  007262                     
  2763                           ;main.c: 115:             tecla = kpRead();
  2764  007262  EC94  F02E         	call	_kpRead	;wreg free
  2765  007266  C001  F040         	movff	?_kpRead,_tecla
  2766  00726A  C002  F041         	movff	?_kpRead+1,_tecla+1
  2767                           
  2768                           ;main.c: 116:             switch (kpReadKey()) {
  2769  00726E  EFA7  F039         	goto	l2659
  2770  007272                     l2629:
  2771                           
  2772                           ;main.c: 118:                     if (pos == 0) {
  2773  007272  5015               	movf	alarmeHora@pos^0,w,c
  2774  007274  1016               	iorwf	(alarmeHora@pos+1)^0,w,c
  2775  007276  A4D8               	btfss	status,2,c
  2776  007278  EF40  F039         	goto	u1751
  2777  00727C  EF42  F039         	goto	u1750
  2778  007280                     u1751:
  2779  007280  EF50  F039         	goto	l2633
  2780  007284                     u1750:
  2781  007284                     
  2782                           ;main.c: 119:                         horaAlarme = horaAlarme + 360000;
  2783  007284  0E40               	movlw	64
  2784  007286  242A               	addwf	_horaAlarme^0,w,c
  2785  007288  6E2A               	movwf	_horaAlarme^0,c
  2786  00728A  0E7E               	movlw	126
  2787  00728C  202B               	addwfc	(_horaAlarme+1)^0,w,c
  2788  00728E  6E2B               	movwf	(_horaAlarme+1)^0,c
  2789  007290  0E05               	movlw	5
  2790  007292  202C               	addwfc	(_horaAlarme+2)^0,w,c
  2791  007294  6E2C               	movwf	(_horaAlarme+2)^0,c
  2792  007296  0E00               	movlw	0
  2793  007298  202D               	addwfc	(_horaAlarme+3)^0,w,c
  2794  00729A  6E2D               	movwf	(_horaAlarme+3)^0,c
  2795                           
  2796                           ;main.c: 120:                     } else {
  2797  00729C  EF5C  F039         	goto	l2635
  2798  0072A0                     l2633:
  2799                           
  2800                           ;main.c: 121:                         horaAlarme = horaAlarme + 6000;
  2801  0072A0  0E70               	movlw	112
  2802  0072A2  242A               	addwf	_horaAlarme^0,w,c
  2803  0072A4  6E2A               	movwf	_horaAlarme^0,c
  2804  0072A6  0E17               	movlw	23
  2805  0072A8  202B               	addwfc	(_horaAlarme+1)^0,w,c
  2806  0072AA  6E2B               	movwf	(_horaAlarme+1)^0,c
  2807  0072AC  0E00               	movlw	0
  2808  0072AE  202C               	addwfc	(_horaAlarme+2)^0,w,c
  2809  0072B0  6E2C               	movwf	(_horaAlarme+2)^0,c
  2810  0072B2  0E00               	movlw	0
  2811  0072B4  202D               	addwfc	(_horaAlarme+3)^0,w,c
  2812  0072B6  6E2D               	movwf	(_horaAlarme+3)^0,c
  2813  0072B8                     l2635:
  2814                           
  2815                           ;main.c: 123:                     i = 1000;
  2816  0072B8  0E03               	movlw	3
  2817  0072BA  6E1A               	movwf	(alarmeHora@i+1)^0,c
  2818  0072BC  0EE8               	movlw	232
  2819  0072BE  6E19               	movwf	alarmeHora@i^0,c
  2820                           
  2821                           ;main.c: 124:                     break;
  2822  0072C0  EFC9  F039         	goto	l2661
  2823  0072C4                     l2637:
  2824                           
  2825                           ;main.c: 126:                     if (pos == 0) {
  2826  0072C4  5015               	movf	alarmeHora@pos^0,w,c
  2827  0072C6  1016               	iorwf	(alarmeHora@pos+1)^0,w,c
  2828  0072C8  A4D8               	btfss	status,2,c
  2829  0072CA  EF69  F039         	goto	u1761
  2830  0072CE  EF6B  F039         	goto	u1760
  2831  0072D2                     u1761:
  2832  0072D2  EF79  F039         	goto	l2641
  2833  0072D6                     u1760:
  2834  0072D6                     
  2835                           ;main.c: 127:                         horaAlarme = horaAlarme - 360000;
  2836  0072D6  0EC0               	movlw	192
  2837  0072D8  242A               	addwf	_horaAlarme^0,w,c
  2838  0072DA  6E2A               	movwf	_horaAlarme^0,c
  2839  0072DC  0E81               	movlw	129
  2840  0072DE  202B               	addwfc	(_horaAlarme+1)^0,w,c
  2841  0072E0  6E2B               	movwf	(_horaAlarme+1)^0,c
  2842  0072E2  0EFA               	movlw	250
  2843  0072E4  202C               	addwfc	(_horaAlarme+2)^0,w,c
  2844  0072E6  6E2C               	movwf	(_horaAlarme+2)^0,c
  2845  0072E8  0EFF               	movlw	255
  2846  0072EA  202D               	addwfc	(_horaAlarme+3)^0,w,c
  2847  0072EC  6E2D               	movwf	(_horaAlarme+3)^0,c
  2848                           
  2849                           ;main.c: 128:                     } else {
  2850  0072EE  EF5C  F039         	goto	l2635
  2851  0072F2                     l2641:
  2852                           
  2853                           ;main.c: 129:                         horaAlarme = horaAlarme - 6000;
  2854  0072F2  0E90               	movlw	144
  2855  0072F4  242A               	addwf	_horaAlarme^0,w,c
  2856  0072F6  6E2A               	movwf	_horaAlarme^0,c
  2857  0072F8  0EE8               	movlw	232
  2858  0072FA  202B               	addwfc	(_horaAlarme+1)^0,w,c
  2859  0072FC  6E2B               	movwf	(_horaAlarme+1)^0,c
  2860  0072FE  0EFF               	movlw	255
  2861  007300  202C               	addwfc	(_horaAlarme+2)^0,w,c
  2862  007302  6E2C               	movwf	(_horaAlarme+2)^0,c
  2863  007304  0EFF               	movlw	255
  2864  007306  202D               	addwfc	(_horaAlarme+3)^0,w,c
  2865  007308  6E2D               	movwf	(_horaAlarme+3)^0,c
  2866  00730A  EF5C  F039         	goto	l2635
  2867  00730E                     l2645:
  2868                           
  2869                           ;main.c: 134:                     if (pos == 1) {
  2870  00730E  0415               	decf	alarmeHora@pos^0,w,c
  2871  007310  1016               	iorwf	(alarmeHora@pos+1)^0,w,c
  2872  007312  A4D8               	btfss	status,2,c
  2873  007314  EF8E  F039         	goto	u1771
  2874  007318  EF90  F039         	goto	u1770
  2875  00731C                     u1771:
  2876  00731C  EF96  F039         	goto	l2649
  2877  007320                     u1770:
  2878  007320                     l2647:
  2879                           
  2880                           ;main.c: 135:                         pos = 0;
  2881  007320  0E00               	movlw	0
  2882  007322  6E16               	movwf	(alarmeHora@pos+1)^0,c
  2883  007324  0E00               	movlw	0
  2884  007326  6E15               	movwf	alarmeHora@pos^0,c
  2885                           
  2886                           ;main.c: 136:                     } else {
  2887  007328  EFC9  F039         	goto	l2661
  2888  00732C                     l2649:
  2889                           
  2890                           ;main.c: 137:                         pos = 1;
  2891  00732C  0E00               	movlw	0
  2892  00732E  6E16               	movwf	(alarmeHora@pos+1)^0,c
  2893  007330  0E01               	movlw	1
  2894  007332  6E15               	movwf	alarmeHora@pos^0,c
  2895  007334  EFC9  F039         	goto	l2661
  2896  007338                     l2651:
  2897                           
  2898                           ;main.c: 141:                     if (pos == 1) {
  2899  007338  0415               	decf	alarmeHora@pos^0,w,c
  2900  00733A  1016               	iorwf	(alarmeHora@pos+1)^0,w,c
  2901  00733C  A4D8               	btfss	status,2,c
  2902  00733E  EFA3  F039         	goto	u1781
  2903  007342  EFA5  F039         	goto	u1780
  2904  007346                     u1781:
  2905  007346  EF96  F039         	goto	l2649
  2906  00734A                     u1780:
  2907  00734A  EF90  F039         	goto	l2647
  2908  00734E                     l2659:
  2909  00734E  ECF2  F030         	call	_kpReadKey	;wreg free
  2910  007352  6E17               	movwf	??_alarmeHora^0,c
  2911  007354  6A18               	clrf	(??_alarmeHora+1)^0,c
  2912                           
  2913                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2914                           ; Switch size 1, requested type "simple"
  2915                           ; Number of cases is 1, Range of values is 0 to 0
  2916                           ; switch strategies available:
  2917                           ; Name         Instructions Cycles
  2918                           ; simple_byte            4     3 (average)
  2919                           ;	Chosen strategy is simple_byte
  2920  007356  5018               	movf	(??_alarmeHora+1)^0,w,c
  2921  007358  0A00               	xorlw	0	; case 0
  2922  00735A  B4D8               	btfsc	status,2,c
  2923  00735C  EFB2  F039         	goto	l3505
  2924  007360  EFC9  F039         	goto	l2661
  2925  007364                     l3505:
  2926                           
  2927                           ; Switch size 1, requested type "simple"
  2928                           ; Number of cases is 5, Range of values is 65 to 115
  2929                           ; switch strategies available:
  2930                           ; Name         Instructions Cycles
  2931                           ; simple_byte           16     9 (average)
  2932                           ;	Chosen strategy is simple_byte
  2933  007364  5017               	movf	??_alarmeHora^0,w,c
  2934  007366  0A41               	xorlw	65	; case 65
  2935  007368  B4D8               	btfsc	status,2,c
  2936  00736A  EF9C  F039         	goto	l2651
  2937  00736E  0A03               	xorlw	3	; case 66
  2938  007370  B4D8               	btfsc	status,2,c
  2939  007372  EF62  F039         	goto	l2637
  2940  007376  0A1A               	xorlw	26	; case 88
  2941  007378  B4D8               	btfsc	status,2,c
  2942  00737A  EF39  F039         	goto	l2629
  2943  00737E  0A01               	xorlw	1	; case 89
  2944  007380  B4D8               	btfsc	status,2,c
  2945  007382  EF87  F039         	goto	l2645
  2946  007386  0A2A               	xorlw	42	; case 115
  2947  007388  B4D8               	btfsc	status,2,c
  2948  00738A  EFC9  F039         	goto	l2661
  2949  00738E  EFC9  F039         	goto	l2661
  2950  007392                     l2661:
  2951                           
  2952                           ;main.c: 152:         timerWait();
  2953  007392  EC9E  F02E         	call	_timerWait	;wreg free
  2954  007396                     
  2955                           ;main.c: 153:     }
  2956  007396  4A19               	infsnz	alarmeHora@i^0,f,c
  2957  007398  2A1A               	incf	(alarmeHora@i+1)^0,f,c
  2958  00739A  BE1A               	btfsc	(alarmeHora@i+1)^0,7,c
  2959  00739C  EFD9  F039         	goto	u1791
  2960  0073A0  501A               	movf	(alarmeHora@i+1)^0,w,c
  2961  0073A2  E109               	bnz	u1790
  2962  0073A4  0E64               	movlw	100
  2963  0073A6  5C19               	subwf	alarmeHora@i^0,w,c
  2964  0073A8  A0D8               	btfss	status,0,c
  2965  0073AA  EFD9  F039         	goto	u1791
  2966  0073AE  EFDB  F039         	goto	u1790
  2967  0073B2                     u1791:
  2968  0073B2  EF1B  F039         	goto	l2621
  2969  0073B6                     u1790:
  2970  0073B6  0012               	return		;funcret
  2971  0073B8                     __end_of_alarmeHora:
  2972                           	callstack 0
  2973                           
  2974 ;; *************** function _alarmeConfig *****************
  2975 ;; Defined at:
  2976 ;;		line 207 in file "main.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;		None
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;  i               2   22[COMRAM] int 
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  1    wreg      void 
  2983 ;; Registers used:
  2984 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2990 ;;      Params:         0       0       0       0       0       0       0
  2991 ;;      Locals:         2       0       0       0       0       0       0
  2992 ;;      Temps:          2       0       0       0       0       0       0
  2993 ;;      Totals:         4       0       0       0       0       0       0
  2994 ;;Total ram usage:        4 bytes
  2995 ;; Hardware stack levels used: 1
  2996 ;; Hardware stack levels required when called: 6
  2997 ;; This function calls:
  2998 ;;		_kpRead
  2999 ;;		_kpReadKey
  3000 ;;		_lcdCommand
  3001 ;;		_lcdString
  3002 ;;		_ssdUpdate
  3003 ;; This function is called by:
  3004 ;;		_selectFunction
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           	psect	text11
  3009  0068D2                     __ptext11:
  3010                           	callstack 0
  3011  0068D2                     _alarmeConfig:
  3012                           	callstack 21
  3013  0068D2                     
  3014                           ;main.c: 208:     lcdCommand(0x01);
  3015  0068D2  0E01               	movlw	1
  3016  0068D4  ECB3  F02E         	call	_lcdCommand
  3017                           
  3018                           ;main.c: 209:     lcdCommand(0x80);
  3019  0068D8  0E80               	movlw	128
  3020  0068DA  ECB3  F02E         	call	_lcdCommand
  3021  0068DE                     
  3022                           ;main.c: 210:     lcdString("Alarme");
  3023  0068DE  0EF1               	movlw	low STR_9
  3024  0068E0  6E0F               	movwf	lcdString@msg^0,c
  3025  0068E2  0E7F               	movlw	high STR_9
  3026  0068E4  6E10               	movwf	(lcdString@msg+1)^0,c
  3027  0068E6  EC09  F030         	call	_lcdString	;wreg free
  3028  0068EA                     
  3029                           ;main.c: 211:     if (alarmeAtivo == '0') {
  3030  0068EA  0E30               	movlw	48
  3031  0068EC  1851               	xorwf	_alarmeAtivo^0,w,c
  3032  0068EE  A4D8               	btfss	status,2,c
  3033  0068F0  EF7C  F034         	goto	u1861
  3034  0068F4  EF7E  F034         	goto	u1860
  3035  0068F8                     u1861:
  3036  0068F8  EF89  F034         	goto	l2741
  3037  0068FC                     u1860:
  3038  0068FC                     
  3039                           ;main.c: 212:         lcdCommand(0xC0);
  3040  0068FC  0EC0               	movlw	192
  3041  0068FE  ECB3  F02E         	call	_lcdCommand
  3042  006902                     
  3043                           ;main.c: 213:         lcdString("Alarme: desligado");
  3044  006902  0EF5               	movlw	low STR_10
  3045  006904  6E0F               	movwf	lcdString@msg^0,c
  3046  006906  0E7E               	movlw	high STR_10
  3047  006908  6E10               	movwf	(lcdString@msg+1)^0,c
  3048  00690A  EC09  F030         	call	_lcdString	;wreg free
  3049                           
  3050                           ;main.c: 214:     } else {
  3051  00690E  EF92  F034         	goto	l2745
  3052  006912                     l2741:
  3053                           
  3054                           ;main.c: 215:         lcdCommand(0xC0);
  3055  006912  0EC0               	movlw	192
  3056  006914  ECB3  F02E         	call	_lcdCommand
  3057  006918                     
  3058                           ;main.c: 216:         lcdString("Alarme: ligado");
  3059  006918  0EA6               	movlw	low STR_11
  3060  00691A  6E0F               	movwf	lcdString@msg^0,c
  3061  00691C  0E7F               	movlw	high STR_11
  3062  00691E  6E10               	movwf	(lcdString@msg+1)^0,c
  3063  006920  EC09  F030         	call	_lcdString	;wreg free
  3064  006924                     l2745:
  3065                           
  3066                           ;main.c: 218:     for (int i = 0; i < 5000; i++) {
  3067  006924  0E00               	movlw	0
  3068  006926  6E18               	movwf	(alarmeConfig@i+1)^0,c
  3069  006928  0E00               	movlw	0
  3070  00692A  6E17               	movwf	alarmeConfig@i^0,c
  3071  00692C                     l2751:
  3072                           
  3073                           ;main.c: 219:         ssdUpdate();
  3074  00692C  EC55  F038         	call	_ssdUpdate	;wreg free
  3075  006930                     
  3076                           ;main.c: 221:         if (kpRead() != tecla) {
  3077  006930  EC94  F02E         	call	_kpRead	;wreg free
  3078  006934  5040               	movf	_tecla^0,w,c
  3079  006936  1801               	xorwf	?_kpRead^0,w,c
  3080  006938  E109               	bnz	u1870
  3081  00693A  5041               	movf	(_tecla+1)^0,w,c
  3082  00693C  1802               	xorwf	(?_kpRead+1)^0,w,c
  3083  00693E  B4D8               	btfsc	status,2,c
  3084  006940  EFA4  F034         	goto	u1871
  3085  006944  EFA6  F034         	goto	u1870
  3086  006948                     u1871:
  3087  006948  EFD9  F034         	goto	l2767
  3088  00694C                     u1870:
  3089  00694C                     
  3090                           ;main.c: 222:             tecla = kpRead();
  3091  00694C  EC94  F02E         	call	_kpRead	;wreg free
  3092  006950  C001  F040         	movff	?_kpRead,_tecla
  3093  006954  C002  F041         	movff	?_kpRead+1,_tecla+1
  3094                           
  3095                           ;main.c: 223:             switch (kpReadKey()) {
  3096  006958  EFC3  F034         	goto	l2765
  3097  00695C                     l2757:
  3098                           
  3099                           ;main.c: 225:                     if (alarmeAtivo == '0') {
  3100  00695C  0E30               	movlw	48
  3101  00695E  1851               	xorwf	_alarmeAtivo^0,w,c
  3102  006960  A4D8               	btfss	status,2,c
  3103  006962  EFB5  F034         	goto	u1881
  3104  006966  EFB7  F034         	goto	u1880
  3105  00696A                     u1881:
  3106  00696A  EFBB  F034         	goto	l2761
  3107  00696E                     u1880:
  3108  00696E                     
  3109                           ;main.c: 226:                         alarmeAtivo = '1';
  3110  00696E  0E31               	movlw	49
  3111  006970  6E51               	movwf	_alarmeAtivo^0,c
  3112                           
  3113                           ;main.c: 227:                     } else {
  3114  006972  EFBD  F034         	goto	l143
  3115  006976                     l2761:
  3116                           
  3117                           ;main.c: 228:                         alarmeAtivo = '0';
  3118  006976  0E30               	movlw	48
  3119  006978  6E51               	movwf	_alarmeAtivo^0,c
  3120  00697A                     l143:
  3121                           
  3122                           ;main.c: 230:                     i = 1000;
  3123  00697A  0E03               	movlw	3
  3124  00697C  6E18               	movwf	(alarmeConfig@i+1)^0,c
  3125  00697E  0EE8               	movlw	232
  3126  006980  6E17               	movwf	alarmeConfig@i^0,c
  3127                           
  3128                           ;main.c: 231:                     break;
  3129  006982  EFD9  F034         	goto	l2767
  3130  006986                     l2765:
  3131  006986  ECF2  F030         	call	_kpReadKey	;wreg free
  3132  00698A  6E15               	movwf	??_alarmeConfig^0,c
  3133  00698C  6A16               	clrf	(??_alarmeConfig+1)^0,c
  3134                           
  3135                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3136                           ; Switch size 1, requested type "simple"
  3137                           ; Number of cases is 1, Range of values is 0 to 0
  3138                           ; switch strategies available:
  3139                           ; Name         Instructions Cycles
  3140                           ; simple_byte            4     3 (average)
  3141                           ;	Chosen strategy is simple_byte
  3142  00698E  5016               	movf	(??_alarmeConfig+1)^0,w,c
  3143  006990  0A00               	xorlw	0	; case 0
  3144  006992  B4D8               	btfsc	status,2,c
  3145  006994  EFCE  F034         	goto	l3507
  3146  006998  EFD9  F034         	goto	l2767
  3147  00699C                     l3507:
  3148                           
  3149                           ; Switch size 1, requested type "simple"
  3150                           ; Number of cases is 2, Range of values is 83 to 115
  3151                           ; switch strategies available:
  3152                           ; Name         Instructions Cycles
  3153                           ; simple_byte            7     4 (average)
  3154                           ;	Chosen strategy is simple_byte
  3155  00699C  5015               	movf	??_alarmeConfig^0,w,c
  3156  00699E  0A53               	xorlw	83	; case 83
  3157  0069A0  B4D8               	btfsc	status,2,c
  3158  0069A2  EFAE  F034         	goto	l2757
  3159  0069A6  0A20               	xorlw	32	; case 115
  3160  0069A8  B4D8               	btfsc	status,2,c
  3161  0069AA  EFD9  F034         	goto	l2767
  3162  0069AE  EFD9  F034         	goto	l2767
  3163  0069B2                     l2767:
  3164                           
  3165                           ;main.c: 236:     }
  3166  0069B2  4A17               	infsnz	alarmeConfig@i^0,f,c
  3167  0069B4  2A18               	incf	(alarmeConfig@i+1)^0,f,c
  3168  0069B6  BE18               	btfsc	(alarmeConfig@i+1)^0,7,c
  3169  0069B8  EFE7  F034         	goto	u1891
  3170  0069BC  0E88               	movlw	136
  3171  0069BE  5C17               	subwf	alarmeConfig@i^0,w,c
  3172  0069C0  0E13               	movlw	19
  3173  0069C2  5818               	subwfb	(alarmeConfig@i+1)^0,w,c
  3174  0069C4  A0D8               	btfss	status,0,c
  3175  0069C6  EFE7  F034         	goto	u1891
  3176  0069CA  EFE9  F034         	goto	u1890
  3177  0069CE                     u1891:
  3178  0069CE  EF96  F034         	goto	l2751
  3179  0069D2                     u1890:
  3180  0069D2  0012               	return		;funcret
  3181  0069D4                     __end_of_alarmeConfig:
  3182                           	callstack 0
  3183                           
  3184 ;; *************** function _lcdInit *****************
  3185 ;; Defined at:
  3186 ;;		line 72 in file "lcd.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;		None
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;		None
  3191 ;; Return value:  Size  Location     Type
  3192 ;;                  1    wreg      void 
  3193 ;; Registers used:
  3194 ;;		wreg, status,2, status,0, cstack
  3195 ;; Tracked objects:
  3196 ;;		On entry : 0/0
  3197 ;;		On exit  : 0/0
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3200 ;;      Params:         0       0       0       0       0       0       0
  3201 ;;      Locals:         0       0       0       0       0       0       0
  3202 ;;      Temps:          0       0       0       0       0       0       0
  3203 ;;      Totals:         0       0       0       0       0       0       0
  3204 ;;Total ram usage:        0 bytes
  3205 ;; Hardware stack levels used: 1
  3206 ;; Hardware stack levels required when called: 5
  3207 ;; This function calls:
  3208 ;;		_delayMicro
  3209 ;;		_delayMili
  3210 ;;		_lcdCommand
  3211 ;;		_pinMode
  3212 ;;		_pushNibble
  3213 ;;		_soInit
  3214 ;; This function is called by:
  3215 ;;		_main
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text12
  3220  00668A                     __ptext12:
  3221                           	callstack 0
  3222  00668A                     _lcdInit:
  3223                           	callstack 25
  3224  00668A                     
  3225                           ;lcd.c: 73:  pinMode(PIN_D4, 0);
  3226  00668A  0E00               	movlw	0
  3227  00668C  6E02               	movwf	(pinMode@pin+1)^0,c
  3228  00668E  0E1C               	movlw	28
  3229  006690  6E01               	movwf	pinMode@pin^0,c
  3230  006692  0E00               	movlw	0
  3231  006694  6E04               	movwf	(pinMode@type+1)^0,c
  3232  006696  0E00               	movlw	0
  3233  006698  6E03               	movwf	pinMode@type^0,c
  3234  00669A  ECD4  F03B         	call	_pinMode	;wreg free
  3235                           
  3236                           ;lcd.c: 74:  pinMode(PIN_D5, 0);
  3237  00669E  0E00               	movlw	0
  3238  0066A0  6E02               	movwf	(pinMode@pin+1)^0,c
  3239  0066A2  0E1D               	movlw	29
  3240  0066A4  6E01               	movwf	pinMode@pin^0,c
  3241  0066A6  0E00               	movlw	0
  3242  0066A8  6E04               	movwf	(pinMode@type+1)^0,c
  3243  0066AA  0E00               	movlw	0
  3244  0066AC  6E03               	movwf	pinMode@type^0,c
  3245  0066AE  ECD4  F03B         	call	_pinMode	;wreg free
  3246                           
  3247                           ;lcd.c: 75:  soInit();
  3248  0066B2  EC7E  F02F         	call	_soInit	;wreg free
  3249                           
  3250                           ;lcd.c: 76:  delayMili(15);
  3251  0066B6  0E00               	movlw	0
  3252  0066B8  6E02               	movwf	(delayMili@a+1)^0,c
  3253  0066BA  0E0F               	movlw	15
  3254  0066BC  6E01               	movwf	delayMili@a^0,c
  3255  0066BE  EC32  F02F         	call	_delayMili	;wreg free
  3256                           
  3257                           ;lcd.c: 78:  pushNibble(0x03, 0);
  3258  0066C2  0E00               	movlw	0
  3259  0066C4  6E0B               	movwf	(pushNibble@rs+1)^0,c
  3260  0066C6  0E00               	movlw	0
  3261  0066C8  6E0A               	movwf	pushNibble@rs^0,c
  3262  0066CA  0E03               	movlw	3
  3263  0066CC  ECF5  F02E         	call	_pushNibble
  3264                           
  3265                           ;lcd.c: 79:  delayMili(5);
  3266  0066D0  0E00               	movlw	0
  3267  0066D2  6E02               	movwf	(delayMili@a+1)^0,c
  3268  0066D4  0E05               	movlw	5
  3269  0066D6  6E01               	movwf	delayMili@a^0,c
  3270  0066D8  EC32  F02F         	call	_delayMili	;wreg free
  3271                           
  3272                           ;lcd.c: 80:  pushNibble(0x03, 0);
  3273  0066DC  0E00               	movlw	0
  3274  0066DE  6E0B               	movwf	(pushNibble@rs+1)^0,c
  3275  0066E0  0E00               	movlw	0
  3276  0066E2  6E0A               	movwf	pushNibble@rs^0,c
  3277  0066E4  0E03               	movlw	3
  3278  0066E6  ECF5  F02E         	call	_pushNibble
  3279  0066EA                     
  3280                           ;lcd.c: 81:  delayMicro(160);
  3281  0066EA  0E00               	movlw	0
  3282  0066EC  6E02               	movwf	(delayMicro@a+1)^0,c
  3283  0066EE  0EA0               	movlw	160
  3284  0066F0  6E01               	movwf	delayMicro@a^0,c
  3285  0066F2  EC8F  F02E         	call	_delayMicro	;wreg free
  3286  0066F6                     
  3287                           ;lcd.c: 82:  pushNibble(0x03, 0);
  3288  0066F6  0E00               	movlw	0
  3289  0066F8  6E0B               	movwf	(pushNibble@rs+1)^0,c
  3290  0066FA  0E00               	movlw	0
  3291  0066FC  6E0A               	movwf	pushNibble@rs^0,c
  3292  0066FE  0E03               	movlw	3
  3293  006700  ECF5  F02E         	call	_pushNibble
  3294                           
  3295                           ;lcd.c: 83:  delayMicro(160);
  3296  006704  0E00               	movlw	0
  3297  006706  6E02               	movwf	(delayMicro@a+1)^0,c
  3298  006708  0EA0               	movlw	160
  3299  00670A  6E01               	movwf	delayMicro@a^0,c
  3300  00670C  EC8F  F02E         	call	_delayMicro	;wreg free
  3301  006710                     
  3302                           ;lcd.c: 85:  pushNibble(0x02, 0);
  3303  006710  0E00               	movlw	0
  3304  006712  6E0B               	movwf	(pushNibble@rs+1)^0,c
  3305  006714  0E00               	movlw	0
  3306  006716  6E0A               	movwf	pushNibble@rs^0,c
  3307  006718  0E02               	movlw	2
  3308  00671A  ECF5  F02E         	call	_pushNibble
  3309  00671E                     
  3310                           ;lcd.c: 86:  delayMili(10);
  3311  00671E  0E00               	movlw	0
  3312  006720  6E02               	movwf	(delayMili@a+1)^0,c
  3313  006722  0E0A               	movlw	10
  3314  006724  6E01               	movwf	delayMili@a^0,c
  3315  006726  EC32  F02F         	call	_delayMili	;wreg free
  3316  00672A                     
  3317                           ;lcd.c: 88:  lcdCommand(0x28);
  3318  00672A  0E28               	movlw	40
  3319  00672C  ECB3  F02E         	call	_lcdCommand
  3320  006730                     
  3321                           ;lcd.c: 89:  lcdCommand(0x08 + 0x04);
  3322  006730  0E0C               	movlw	12
  3323  006732  ECB3  F02E         	call	_lcdCommand
  3324  006736                     
  3325                           ;lcd.c: 90:  lcdCommand(0x01);
  3326  006736  0E01               	movlw	1
  3327  006738  ECB3  F02E         	call	_lcdCommand
  3328  00673C  0012               	return		;funcret
  3329  00673E                     __end_of_lcdInit:
  3330                           	callstack 0
  3331                           
  3332 ;; *************** function _pushNibble *****************
  3333 ;; Defined at:
  3334 ;;		line 25 in file "lcd.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;  value           1    wreg     unsigned char 
  3337 ;;  rs              2    9[COMRAM] int 
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;  value           1   11[COMRAM] unsigned char 
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  1    wreg      void 
  3342 ;; Registers used:
  3343 ;;		wreg, status,2, status,0, cstack
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3349 ;;      Params:         2       0       0       0       0       0       0
  3350 ;;      Locals:         1       0       0       0       0       0       0
  3351 ;;      Temps:          0       0       0       0       0       0       0
  3352 ;;      Totals:         3       0       0       0       0       0       0
  3353 ;;Total ram usage:        3 bytes
  3354 ;; Hardware stack levels used: 1
  3355 ;; Hardware stack levels required when called: 3
  3356 ;; This function calls:
  3357 ;;		_digitalWrite
  3358 ;;		_pulseEnablePin
  3359 ;;		_soWrite
  3360 ;; This function is called by:
  3361 ;;		_lcdInit
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365                           	psect	text13
  3366  005DEA                     __ptext13:
  3367                           	callstack 0
  3368  005DEA                     _pushNibble:
  3369                           	callstack 26
  3370                           
  3371                           ;incstack = 0
  3372                           ;pushNibble@value stored from wreg
  3373  005DEA  6E0C               	movwf	pushNibble@value^0,c
  3374  005DEC                     
  3375                           ;lcd.c: 26:  soWrite(value);
  3376  005DEC  C00C  F007         	movff	pushNibble@value,soWrite@value
  3377  005DF0  6A08               	clrf	(soWrite@value+1)^0,c
  3378  005DF2  ECE2  F02F         	call	_soWrite	;wreg free
  3379                           
  3380                           ;lcd.c: 27:  digitalWrite(PIN_D5, rs);
  3381  005DF6  0E00               	movlw	0
  3382  005DF8  6E02               	movwf	(digitalWrite@pin+1)^0,c
  3383  005DFA  0E1D               	movlw	29
  3384  005DFC  6E01               	movwf	digitalWrite@pin^0,c
  3385  005DFE  C00A  F003         	movff	pushNibble@rs,digitalWrite@value
  3386  005E02  C00B  F004         	movff	pushNibble@rs+1,digitalWrite@value+1
  3387  005E06  ECAD  F03A         	call	_digitalWrite	;wreg free
  3388                           
  3389                           ;lcd.c: 28:  pulseEnablePin();
  3390  005E0A  EC9D  F02F         	call	_pulseEnablePin	;wreg free
  3391  005E0E  0012               	return		;funcret
  3392  005E10                     __end_of_pushNibble:
  3393                           	callstack 0
  3394                           
  3395 ;; *************** function _kpInit *****************
  3396 ;; Defined at:
  3397 ;;		line 54 in file "keypad.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;		None
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;		None
  3402 ;; Return value:  Size  Location     Type
  3403 ;;                  1    wreg      void 
  3404 ;; Registers used:
  3405 ;;		wreg, status,2, status,0, cstack
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3411 ;;      Params:         0       0       0       0       0       0       0
  3412 ;;      Locals:         0       0       0       0       0       0       0
  3413 ;;      Temps:          0       0       0       0       0       0       0
  3414 ;;      Totals:         0       0       0       0       0       0       0
  3415 ;;Total ram usage:        0 bytes
  3416 ;; Hardware stack levels used: 1
  3417 ;; Hardware stack levels required when called: 2
  3418 ;; This function calls:
  3419 ;;		_pinMode
  3420 ;;		_soInit
  3421 ;; This function is called by:
  3422 ;;		_main
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           	psect	text14
  3427  005E94                     __ptext14:
  3428                           	callstack 0
  3429  005E94                     _kpInit:
  3430                           	callstack 28
  3431  005E94                     
  3432                           ;keypad.c: 55:   soInit();
  3433  005E94  EC7E  F02F         	call	_soInit	;wreg free
  3434                           
  3435                           ;keypad.c: 56:   pinMode(PIN_B2, 1);
  3436  005E98  0E00               	movlw	0
  3437  005E9A  6E02               	movwf	(pinMode@pin+1)^0,c
  3438  005E9C  0E0A               	movlw	10
  3439  005E9E  6E01               	movwf	pinMode@pin^0,c
  3440  005EA0  0E00               	movlw	0
  3441  005EA2  6E04               	movwf	(pinMode@type+1)^0,c
  3442  005EA4  0E01               	movlw	1
  3443  005EA6  6E03               	movwf	pinMode@type^0,c
  3444  005EA8  ECD4  F03B         	call	_pinMode	;wreg free
  3445                           
  3446                           ;keypad.c: 57:   pinMode(PIN_B1, 1);
  3447  005EAC  0E00               	movlw	0
  3448  005EAE  6E02               	movwf	(pinMode@pin+1)^0,c
  3449  005EB0  0E09               	movlw	9
  3450  005EB2  6E01               	movwf	pinMode@pin^0,c
  3451  005EB4  0E00               	movlw	0
  3452  005EB6  6E04               	movwf	(pinMode@type+1)^0,c
  3453  005EB8  0E01               	movlw	1
  3454  005EBA  6E03               	movwf	pinMode@type^0,c
  3455  005EBC  ECD4  F03B         	call	_pinMode	;wreg free
  3456  005EC0                     
  3457                           ;keypad.c: 58:   ADCON1 = 0b00001100;
  3458  005EC0  0E0C               	movlw	12
  3459  005EC2  6EC1               	movwf	193,c	;volatile
  3460  005EC4  0012               	return		;funcret
  3461  005EC6                     __end_of_kpInit:
  3462                           	callstack 0
  3463                           
  3464 ;; *************** function _soInit *****************
  3465 ;; Defined at:
  3466 ;;		line 3 in file "so.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;		None
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;		None
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  1    wreg      void 
  3473 ;; Registers used:
  3474 ;;		wreg, status,2, status,0, cstack
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3480 ;;      Params:         0       0       0       0       0       0       0
  3481 ;;      Locals:         0       0       0       0       0       0       0
  3482 ;;      Temps:          0       0       0       0       0       0       0
  3483 ;;      Totals:         0       0       0       0       0       0       0
  3484 ;;Total ram usage:        0 bytes
  3485 ;; Hardware stack levels used: 1
  3486 ;; Hardware stack levels required when called: 1
  3487 ;; This function calls:
  3488 ;;		_pinMode
  3489 ;; This function is called by:
  3490 ;;		_kpInit
  3491 ;;		_lcdInit
  3492 ;;		_ssdInit
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           	psect	text15
  3497  005EFC                     __ptext15:
  3498                           	callstack 0
  3499  005EFC                     _soInit:
  3500                           	callstack 28
  3501  005EFC                     
  3502                           ;so.c: 4:  pinMode(PIN_D7, 0);
  3503  005EFC  0E00               	movlw	0
  3504  005EFE  6E02               	movwf	(pinMode@pin+1)^0,c
  3505  005F00  0E1F               	movlw	31
  3506  005F02  6E01               	movwf	pinMode@pin^0,c
  3507  005F04  0E00               	movlw	0
  3508  005F06  6E04               	movwf	(pinMode@type+1)^0,c
  3509  005F08  0E00               	movlw	0
  3510  005F0A  6E03               	movwf	pinMode@type^0,c
  3511  005F0C  ECD4  F03B         	call	_pinMode	;wreg free
  3512                           
  3513                           ;so.c: 5:  pinMode(PIN_B0, 0);
  3514  005F10  0E00               	movlw	0
  3515  005F12  6E02               	movwf	(pinMode@pin+1)^0,c
  3516  005F14  0E08               	movlw	8
  3517  005F16  6E01               	movwf	pinMode@pin^0,c
  3518  005F18  0E00               	movlw	0
  3519  005F1A  6E04               	movwf	(pinMode@type+1)^0,c
  3520  005F1C  0E00               	movlw	0
  3521  005F1E  6E03               	movwf	pinMode@type^0,c
  3522  005F20  ECD4  F03B         	call	_pinMode	;wreg free
  3523                           
  3524                           ;so.c: 6:  pinMode(PIN_D6, 0);
  3525  005F24  0E00               	movlw	0
  3526  005F26  6E02               	movwf	(pinMode@pin+1)^0,c
  3527  005F28  0E1E               	movlw	30
  3528  005F2A  6E01               	movwf	pinMode@pin^0,c
  3529  005F2C  0E00               	movlw	0
  3530  005F2E  6E04               	movwf	(pinMode@type+1)^0,c
  3531  005F30  0E00               	movlw	0
  3532  005F32  6E03               	movwf	pinMode@type^0,c
  3533  005F34  ECD4  F03B         	call	_pinMode	;wreg free
  3534  005F38  0012               	return		;funcret
  3535  005F3A                     __end_of_soInit:
  3536                           	callstack 0
  3537                           
  3538 ;; *************** function _kpDebounce *****************
  3539 ;; Defined at:
  3540 ;;		line 27 in file "keypad.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;		None
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;  i               2   12[COMRAM] int 
  3545 ;; Return value:  Size  Location     Type
  3546 ;;                  1    wreg      void 
  3547 ;; Registers used:
  3548 ;;		wreg, status,2, status,0, cstack
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3554 ;;      Params:         0       0       0       0       0       0       0
  3555 ;;      Locals:         2       0       0       0       0       0       0
  3556 ;;      Temps:          3       0       0       0       0       0       0
  3557 ;;      Totals:         5       0       0       0       0       0       0
  3558 ;;Total ram usage:        5 bytes
  3559 ;; Hardware stack levels used: 1
  3560 ;; Hardware stack levels required when called: 3
  3561 ;; This function calls:
  3562 ;;		_digitalRead
  3563 ;;		_soWrite
  3564 ;; This function is called by:
  3565 ;;		_main
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           	psect	text16
  3570  006E0A                     __ptext16:
  3571                           	callstack 0
  3572  006E0A                     _kpDebounce:
  3573                           	callstack 27
  3574  006E0A                     
  3575                           ;keypad.c: 28:     int i;;keypad.c: 29:     static unsigned char tempo;;keypad.c: 30:   
      +                            static unsigned int newRead;;keypad.c: 31:     static unsigned int oldRead;;keypad.c: 
      +                          32:     newRead = 0;
  3576  006E0A  0E00               	movlw	0
  3577  006E0C  6E3D               	movwf	(kpDebounce@newRead+1)^0,c
  3578  006E0E  0E00               	movlw	0
  3579  006E10  6E3C               	movwf	kpDebounce@newRead^0,c
  3580                           
  3581                           ;keypad.c: 33:     for(i = 0; i<5; i++){
  3582  006E12  0E00               	movlw	0
  3583  006E14  6E0E               	movwf	(kpDebounce@i+1)^0,c
  3584  006E16  0E00               	movlw	0
  3585  006E18  6E0D               	movwf	kpDebounce@i^0,c
  3586  006E1A                     l3353:
  3587  006E1A  BE0E               	btfsc	(kpDebounce@i+1)^0,7,c
  3588  006E1C  EF19  F037         	goto	u2691
  3589  006E20  500E               	movf	(kpDebounce@i+1)^0,w,c
  3590  006E22  E109               	bnz	u2690
  3591  006E24  0E05               	movlw	5
  3592  006E26  5C0D               	subwf	kpDebounce@i^0,w,c
  3593  006E28  A0D8               	btfss	status,0,c
  3594  006E2A  EF19  F037         	goto	u2691
  3595  006E2E  EF1B  F037         	goto	u2690
  3596  006E32                     u2691:
  3597  006E32  EF1D  F037         	goto	l3357
  3598  006E36                     u2690:
  3599  006E36  EF7E  F037         	goto	l3369
  3600  006E3A                     l3357:
  3601                           
  3602                           ;keypad.c: 35:       soWrite(1<<(i+3));
  3603  006E3A  C00D  F00A         	movff	kpDebounce@i,??_kpDebounce
  3604  006E3E  0E03               	movlw	3
  3605  006E40  260A               	addwf	??_kpDebounce^0,f,c
  3606  006E42  0E01               	movlw	1
  3607  006E44  6E0B               	movwf	(??_kpDebounce+1)^0,c
  3608  006E46  0E00               	movlw	0
  3609  006E48  6E0C               	movwf	(??_kpDebounce+2)^0,c
  3610  006E4A  2A0A               	incf	??_kpDebounce^0,f,c
  3611  006E4C  EF2B  F037         	goto	u2704
  3612  006E50                     u2705:
  3613  006E50  90D8               	bcf	status,0,c
  3614  006E52  360B               	rlcf	(??_kpDebounce+1)^0,f,c
  3615  006E54  360C               	rlcf	(??_kpDebounce+2)^0,f,c
  3616  006E56                     u2704:
  3617  006E56  2E0A               	decfsz	??_kpDebounce^0,f,c
  3618  006E58  EF28  F037         	goto	u2705
  3619  006E5C  C00B  F007         	movff	??_kpDebounce+1,soWrite@value
  3620  006E60  C00C  F008         	movff	??_kpDebounce+2,soWrite@value+1
  3621  006E64  ECE2  F02F         	call	_soWrite	;wreg free
  3622                           
  3623                           ;keypad.c: 36:       if(digitalRead(PIN_B2)){
  3624  006E68  0E00               	movlw	0
  3625  006E6A  6E02               	movwf	(digitalRead@pin+1)^0,c
  3626  006E6C  0E0A               	movlw	10
  3627  006E6E  6E01               	movwf	digitalRead@pin^0,c
  3628  006E70  ECA0  F037         	call	_digitalRead	;wreg free
  3629  006E74  5001               	movf	?_digitalRead^0,w,c
  3630  006E76  1002               	iorwf	(?_digitalRead+1)^0,w,c
  3631  006E78  B4D8               	btfsc	status,2,c
  3632  006E7A  EF41  F037         	goto	u2711
  3633  006E7E  EF43  F037         	goto	u2710
  3634  006E82                     u2711:
  3635  006E82  EF56  F037         	goto	l3361
  3636  006E86                     u2710:
  3637  006E86                     
  3638                           ;keypad.c: 37:         ((newRead) |= (1<<(i)));
  3639  006E86  C00D  F00A         	movff	kpDebounce@i,??_kpDebounce
  3640  006E8A  0E01               	movlw	1
  3641  006E8C  6E0B               	movwf	(??_kpDebounce+1)^0,c
  3642  006E8E  0E00               	movlw	0
  3643  006E90  6E0C               	movwf	(??_kpDebounce+2)^0,c
  3644  006E92  2A0A               	incf	??_kpDebounce^0,f,c
  3645  006E94  EF4F  F037         	goto	u2724
  3646  006E98                     u2725:
  3647  006E98  90D8               	bcf	status,0,c
  3648  006E9A  360B               	rlcf	(??_kpDebounce+1)^0,f,c
  3649  006E9C  360C               	rlcf	(??_kpDebounce+2)^0,f,c
  3650  006E9E                     u2724:
  3651  006E9E  2E0A               	decfsz	??_kpDebounce^0,f,c
  3652  006EA0  EF4C  F037         	goto	u2725
  3653  006EA4  500B               	movf	(??_kpDebounce+1)^0,w,c
  3654  006EA6  123C               	iorwf	kpDebounce@newRead^0,f,c
  3655  006EA8  500C               	movf	(??_kpDebounce+2)^0,w,c
  3656  006EAA  123D               	iorwf	(kpDebounce@newRead+1)^0,f,c
  3657  006EAC                     l3361:
  3658                           
  3659                           ;keypad.c: 39:       if(digitalRead(PIN_B1)){
  3660  006EAC  0E00               	movlw	0
  3661  006EAE  6E02               	movwf	(digitalRead@pin+1)^0,c
  3662  006EB0  0E09               	movlw	9
  3663  006EB2  6E01               	movwf	digitalRead@pin^0,c
  3664  006EB4  ECA0  F037         	call	_digitalRead	;wreg free
  3665  006EB8  5001               	movf	?_digitalRead^0,w,c
  3666  006EBA  1002               	iorwf	(?_digitalRead+1)^0,w,c
  3667  006EBC  B4D8               	btfsc	status,2,c
  3668  006EBE  EF63  F037         	goto	u2731
  3669  006EC2  EF65  F037         	goto	u2730
  3670  006EC6                     u2731:
  3671  006EC6  EF7A  F037         	goto	l3365
  3672  006ECA                     u2730:
  3673  006ECA                     
  3674                           ;keypad.c: 40:         ((newRead) |= (1<<((i+5))));
  3675  006ECA  C00D  F00A         	movff	kpDebounce@i,??_kpDebounce
  3676  006ECE  0E05               	movlw	5
  3677  006ED0  260A               	addwf	??_kpDebounce^0,f,c
  3678  006ED2  0E01               	movlw	1
  3679  006ED4  6E0B               	movwf	(??_kpDebounce+1)^0,c
  3680  006ED6  0E00               	movlw	0
  3681  006ED8  6E0C               	movwf	(??_kpDebounce+2)^0,c
  3682  006EDA  2A0A               	incf	??_kpDebounce^0,f,c
  3683  006EDC  EF73  F037         	goto	u2744
  3684  006EE0                     u2745:
  3685  006EE0  90D8               	bcf	status,0,c
  3686  006EE2  360B               	rlcf	(??_kpDebounce+1)^0,f,c
  3687  006EE4  360C               	rlcf	(??_kpDebounce+2)^0,f,c
  3688  006EE6                     u2744:
  3689  006EE6  2E0A               	decfsz	??_kpDebounce^0,f,c
  3690  006EE8  EF70  F037         	goto	u2745
  3691  006EEC  500B               	movf	(??_kpDebounce+1)^0,w,c
  3692  006EEE  123C               	iorwf	kpDebounce@newRead^0,f,c
  3693  006EF0  500C               	movf	(??_kpDebounce+2)^0,w,c
  3694  006EF2  123D               	iorwf	(kpDebounce@newRead+1)^0,f,c
  3695  006EF4                     l3365:
  3696                           
  3697                           ;keypad.c: 42:     }
  3698  006EF4  4A0D               	infsnz	kpDebounce@i^0,f,c
  3699  006EF6  2A0E               	incf	(kpDebounce@i+1)^0,f,c
  3700  006EF8  EF0D  F037         	goto	l3353
  3701  006EFC                     l3369:
  3702                           
  3703                           ;keypad.c: 43:     if (oldRead == newRead) {
  3704  006EFC  503C               	movf	kpDebounce@newRead^0,w,c
  3705  006EFE  183A               	xorwf	kpDebounce@oldRead^0,w,c
  3706  006F00  E107               	bnz	u2751
  3707  006F02  503D               	movf	(kpDebounce@newRead+1)^0,w,c
  3708  006F04  183B               	xorwf	(kpDebounce@oldRead+1)^0,w,c
  3709  006F06  A4D8               	btfss	status,2,c
  3710  006F08  EF88  F037         	goto	u2751
  3711  006F0C  EF8A  F037         	goto	u2750
  3712  006F10                     u2751:
  3713  006F10  EF8D  F037         	goto	l3373
  3714  006F14                     u2750:
  3715  006F14                     
  3716                           ;keypad.c: 44:         tempo--;
  3717  006F14  0649               	decf	kpDebounce@tempo^0,f,c
  3718                           
  3719                           ;keypad.c: 45:     } else {
  3720  006F16  EF93  F037         	goto	l376
  3721  006F1A                     l3373:
  3722                           
  3723                           ;keypad.c: 46:         tempo = 1;
  3724  006F1A  0E01               	movlw	1
  3725  006F1C  6E49               	movwf	kpDebounce@tempo^0,c
  3726  006F1E                     
  3727                           ;keypad.c: 47:         oldRead = newRead;
  3728  006F1E  C03C  F03A         	movff	kpDebounce@newRead,kpDebounce@oldRead
  3729  006F22  C03D  F03B         	movff	kpDebounce@newRead+1,kpDebounce@oldRead+1
  3730  006F26                     l376:
  3731                           
  3732                           ;keypad.c: 49:     if (tempo == 0) {
  3733  006F26  5049               	movf	kpDebounce@tempo^0,w,c
  3734  006F28  A4D8               	btfss	status,2,c
  3735  006F2A  EF99  F037         	goto	u2761
  3736  006F2E  EF9B  F037         	goto	u2760
  3737  006F32                     u2761:
  3738  006F32  EF9F  F037         	goto	l378
  3739  006F36                     u2760:
  3740  006F36                     
  3741                           ;keypad.c: 50:         keys = oldRead;
  3742  006F36  C03A  F03E         	movff	kpDebounce@oldRead,_keys
  3743  006F3A  C03B  F03F         	movff	kpDebounce@oldRead+1,_keys+1
  3744  006F3E                     l378:
  3745  006F3E  0012               	return		;funcret
  3746  006F40                     __end_of_kpDebounce:
  3747                           	callstack 0
  3748                           
  3749 ;; *************** function _digitalRead *****************
  3750 ;; Defined at:
  3751 ;;		line 39 in file "io.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;  pin             2    0[COMRAM] int 
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;		None
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  2    0[COMRAM] int 
  3758 ;; Registers used:
  3759 ;;		wreg, status,2, status,0
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3765 ;;      Params:         2       0       0       0       0       0       0
  3766 ;;      Locals:         0       0       0       0       0       0       0
  3767 ;;      Temps:          3       0       0       0       0       0       0
  3768 ;;      Totals:         5       0       0       0       0       0       0
  3769 ;;Total ram usage:        5 bytes
  3770 ;; Hardware stack levels used: 1
  3771 ;; This function calls:
  3772 ;;		Nothing
  3773 ;; This function is called by:
  3774 ;;		_kpDebounce
  3775 ;; This function uses a non-reentrant model
  3776 ;;
  3777                           
  3778                           	psect	text17
  3779  006F40                     __ptext17:
  3780                           	callstack 0
  3781  006F40                     _digitalRead:
  3782                           	callstack 29
  3783  006F40                     
  3784                           ;io.c: 40:     if(pin <8){
  3785  006F40  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  3786  006F42  EFAE  F037         	goto	u2370
  3787  006F46  5002               	movf	(digitalRead@pin+1)^0,w,c
  3788  006F48  E107               	bnz	u2371
  3789  006F4A  0E08               	movlw	8
  3790  006F4C  5C01               	subwf	digitalRead@pin^0,w,c
  3791  006F4E  B0D8               	btfsc	status,0,c
  3792  006F50  EFAC  F037         	goto	u2371
  3793  006F54  EFAE  F037         	goto	u2370
  3794  006F58                     u2371:
  3795  006F58  EFC2  F037         	goto	l3085
  3796  006F5C                     u2370:
  3797  006F5C                     
  3798                           ;io.c: 41:         return ((PORTA) & (1<<(pin)));
  3799  006F5C  C001  F003         	movff	digitalRead@pin,??_digitalRead
  3800  006F60  0E01               	movlw	1
  3801  006F62  6E04               	movwf	(??_digitalRead+1)^0,c
  3802  006F64  2A03               	incf	??_digitalRead^0,f,c
  3803  006F66  EFB7  F037         	goto	u2384
  3804  006F6A                     u2385:
  3805  006F6A  90D8               	bcf	status,0,c
  3806  006F6C  3604               	rlcf	(??_digitalRead+1)^0,f,c
  3807  006F6E                     u2384:
  3808  006F6E  2E03               	decfsz	??_digitalRead^0,f,c
  3809  006F70  EFB5  F037         	goto	u2385
  3810  006F74  5004               	movf	(??_digitalRead+1)^0,w,c
  3811  006F76  1480               	andwf	128,w,c	;volatile
  3812  006F78  6E05               	movwf	(??_digitalRead+2)^0,c
  3813  006F7A  5005               	movf	(??_digitalRead+2)^0,w,c
  3814  006F7C  6E01               	movwf	?_digitalRead^0,c
  3815  006F7E  6A02               	clrf	(?_digitalRead+1)^0,c
  3816  006F80  EF54  F038         	goto	l309
  3817  006F84                     l3085:
  3818  006F84  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  3819  006F86  EFD0  F037         	goto	u2390
  3820  006F8A  5002               	movf	(digitalRead@pin+1)^0,w,c
  3821  006F8C  E107               	bnz	u2391
  3822  006F8E  0E10               	movlw	16
  3823  006F90  5C01               	subwf	digitalRead@pin^0,w,c
  3824  006F92  B0D8               	btfsc	status,0,c
  3825  006F94  EFCE  F037         	goto	u2391
  3826  006F98  EFD0  F037         	goto	u2390
  3827  006F9C                     u2391:
  3828  006F9C  EFE6  F037         	goto	l3093
  3829  006FA0                     u2390:
  3830  006FA0                     
  3831                           ;io.c: 43:         return ((PORTB) & (1<<(pin-8)));
  3832  006FA0  C001  F003         	movff	digitalRead@pin,??_digitalRead
  3833  006FA4  0EF8               	movlw	-8
  3834  006FA6  2603               	addwf	??_digitalRead^0,f,c
  3835  006FA8  0E01               	movlw	1
  3836  006FAA  6E04               	movwf	(??_digitalRead+1)^0,c
  3837  006FAC  2A03               	incf	??_digitalRead^0,f,c
  3838  006FAE  EFDB  F037         	goto	u2404
  3839  006FB2                     u2405:
  3840  006FB2  90D8               	bcf	status,0,c
  3841  006FB4  3604               	rlcf	(??_digitalRead+1)^0,f,c
  3842  006FB6                     u2404:
  3843  006FB6  2E03               	decfsz	??_digitalRead^0,f,c
  3844  006FB8  EFD9  F037         	goto	u2405
  3845  006FBC  5004               	movf	(??_digitalRead+1)^0,w,c
  3846  006FBE  1481               	andwf	129,w,c	;volatile
  3847  006FC0  6E05               	movwf	(??_digitalRead+2)^0,c
  3848  006FC2  5005               	movf	(??_digitalRead+2)^0,w,c
  3849  006FC4  6E01               	movwf	?_digitalRead^0,c
  3850  006FC6  6A02               	clrf	(?_digitalRead+1)^0,c
  3851  006FC8  EF54  F038         	goto	l309
  3852  006FCC                     l3093:
  3853  006FCC  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  3854  006FCE  EFF4  F037         	goto	u2410
  3855  006FD2  5002               	movf	(digitalRead@pin+1)^0,w,c
  3856  006FD4  E107               	bnz	u2411
  3857  006FD6  0E18               	movlw	24
  3858  006FD8  5C01               	subwf	digitalRead@pin^0,w,c
  3859  006FDA  B0D8               	btfsc	status,0,c
  3860  006FDC  EFF2  F037         	goto	u2411
  3861  006FE0  EFF4  F037         	goto	u2410
  3862  006FE4                     u2411:
  3863  006FE4  EF0A  F038         	goto	l3101
  3864  006FE8                     u2410:
  3865  006FE8                     
  3866                           ;io.c: 45:         return ((PORTC) & (1<<(pin-16)));
  3867  006FE8  C001  F003         	movff	digitalRead@pin,??_digitalRead
  3868  006FEC  0EF0               	movlw	-16
  3869  006FEE  2603               	addwf	??_digitalRead^0,f,c
  3870  006FF0  0E01               	movlw	1
  3871  006FF2  6E04               	movwf	(??_digitalRead+1)^0,c
  3872  006FF4  2A03               	incf	??_digitalRead^0,f,c
  3873  006FF6  EFFF  F037         	goto	u2424
  3874  006FFA                     u2425:
  3875  006FFA  90D8               	bcf	status,0,c
  3876  006FFC  3604               	rlcf	(??_digitalRead+1)^0,f,c
  3877  006FFE                     u2424:
  3878  006FFE  2E03               	decfsz	??_digitalRead^0,f,c
  3879  007000  EFFD  F037         	goto	u2425
  3880  007004  5004               	movf	(??_digitalRead+1)^0,w,c
  3881  007006  1482               	andwf	130,w,c	;volatile
  3882  007008  6E05               	movwf	(??_digitalRead+2)^0,c
  3883  00700A  5005               	movf	(??_digitalRead+2)^0,w,c
  3884  00700C  6E01               	movwf	?_digitalRead^0,c
  3885  00700E  6A02               	clrf	(?_digitalRead+1)^0,c
  3886  007010  EF54  F038         	goto	l309
  3887  007014                     l3101:
  3888  007014  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  3889  007016  EF18  F038         	goto	u2430
  3890  00701A  5002               	movf	(digitalRead@pin+1)^0,w,c
  3891  00701C  E107               	bnz	u2431
  3892  00701E  0E20               	movlw	32
  3893  007020  5C01               	subwf	digitalRead@pin^0,w,c
  3894  007022  B0D8               	btfsc	status,0,c
  3895  007024  EF16  F038         	goto	u2431
  3896  007028  EF18  F038         	goto	u2430
  3897  00702C                     u2431:
  3898  00702C  EF2E  F038         	goto	l3109
  3899  007030                     u2430:
  3900  007030                     
  3901                           ;io.c: 47:         return ((PORTD) & (1<<(pin-24)));
  3902  007030  C001  F003         	movff	digitalRead@pin,??_digitalRead
  3903  007034  0EE8               	movlw	-24
  3904  007036  2603               	addwf	??_digitalRead^0,f,c
  3905  007038  0E01               	movlw	1
  3906  00703A  6E04               	movwf	(??_digitalRead+1)^0,c
  3907  00703C  2A03               	incf	??_digitalRead^0,f,c
  3908  00703E  EF23  F038         	goto	u2444
  3909  007042                     u2445:
  3910  007042  90D8               	bcf	status,0,c
  3911  007044  3604               	rlcf	(??_digitalRead+1)^0,f,c
  3912  007046                     u2444:
  3913  007046  2E03               	decfsz	??_digitalRead^0,f,c
  3914  007048  EF21  F038         	goto	u2445
  3915  00704C  5004               	movf	(??_digitalRead+1)^0,w,c
  3916  00704E  1483               	andwf	131,w,c	;volatile
  3917  007050  6E05               	movwf	(??_digitalRead+2)^0,c
  3918  007052  5005               	movf	(??_digitalRead+2)^0,w,c
  3919  007054  6E01               	movwf	?_digitalRead^0,c
  3920  007056  6A02               	clrf	(?_digitalRead+1)^0,c
  3921  007058  EF54  F038         	goto	l309
  3922  00705C                     l3109:
  3923  00705C  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  3924  00705E  EF3C  F038         	goto	u2450
  3925  007062  5002               	movf	(digitalRead@pin+1)^0,w,c
  3926  007064  E107               	bnz	u2451
  3927  007066  0E28               	movlw	40
  3928  007068  5C01               	subwf	digitalRead@pin^0,w,c
  3929  00706A  B0D8               	btfsc	status,0,c
  3930  00706C  EF3A  F038         	goto	u2451
  3931  007070  EF3C  F038         	goto	u2450
  3932  007074                     u2451:
  3933  007074  EF52  F038         	goto	l314
  3934  007078                     u2450:
  3935  007078                     
  3936                           ;io.c: 49:         return ((PORTE) & (1<<(pin-32)));
  3937  007078  C001  F003         	movff	digitalRead@pin,??_digitalRead
  3938  00707C  0EE0               	movlw	-32
  3939  00707E  2603               	addwf	??_digitalRead^0,f,c
  3940  007080  0E01               	movlw	1
  3941  007082  6E04               	movwf	(??_digitalRead+1)^0,c
  3942  007084  2A03               	incf	??_digitalRead^0,f,c
  3943  007086  EF47  F038         	goto	u2464
  3944  00708A                     u2465:
  3945  00708A  90D8               	bcf	status,0,c
  3946  00708C  3604               	rlcf	(??_digitalRead+1)^0,f,c
  3947  00708E                     u2464:
  3948  00708E  2E03               	decfsz	??_digitalRead^0,f,c
  3949  007090  EF45  F038         	goto	u2465
  3950  007094  5004               	movf	(??_digitalRead+1)^0,w,c
  3951  007096  1484               	andwf	132,w,c	;volatile
  3952  007098  6E05               	movwf	(??_digitalRead+2)^0,c
  3953  00709A  5005               	movf	(??_digitalRead+2)^0,w,c
  3954  00709C  6E01               	movwf	?_digitalRead^0,c
  3955  00709E  6A02               	clrf	(?_digitalRead+1)^0,c
  3956  0070A0  EF54  F038         	goto	l309
  3957  0070A4                     l314:
  3958  0070A4                     
  3959                           ;io.c: 51:     return -1;
  3960  0070A4  6801               	setf	?_digitalRead^0,c
  3961  0070A6  6802               	setf	(?_digitalRead+1)^0,c
  3962  0070A8                     l309:
  3963  0070A8  0012               	return		;funcret
  3964  0070AA                     __end_of_digitalRead:
  3965                           	callstack 0
  3966                           
  3967 ;; *************** function _compararAlarme *****************
  3968 ;; Defined at:
  3969 ;;		line 373 in file "main.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;		None
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;  i               2    0        int 
  3974 ;; Return value:  Size  Location     Type
  3975 ;;                  1    wreg      void 
  3976 ;; Registers used:
  3977 ;;		wreg, status,2, status,0, cstack
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3983 ;;      Params:         0       0       0       0       0       0       0
  3984 ;;      Locals:         0       0       0       0       0       0       0
  3985 ;;      Temps:          4       0       0       0       0       0       0
  3986 ;;      Totals:         4       0       0       0       0       0       0
  3987 ;;Total ram usage:        4 bytes
  3988 ;; Hardware stack levels used: 1
  3989 ;; Hardware stack levels required when called: 6
  3990 ;; This function calls:
  3991 ;;		___lldiv
  3992 ;;		_kpRead
  3993 ;;		_kpReadKey
  3994 ;;		_lcdCommand
  3995 ;;		_lcdString
  3996 ;;		_pwmFrequency
  3997 ;;		_ssdUpdate
  3998 ;;		_timerReset
  3999 ;;		_timerWait
  4000 ;; This function is called by:
  4001 ;;		_main
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           	psect	text18
  4006  006530                     __ptext18:
  4007                           	callstack 0
  4008  006530                     _compararAlarme:
  4009                           	callstack 24
  4010  006530                     
  4011                           ;main.c: 374:     if ((hora / 6000) == (horaAlarme / 6000)) {
  4012  006530  C04A  F001         	movff	_hora,___lldiv@dividend
  4013  006534  C04B  F002         	movff	_hora+1,___lldiv@dividend+1
  4014  006538  C04C  F003         	movff	_hora+2,___lldiv@dividend+2
  4015  00653C  C04D  F004         	movff	_hora+3,___lldiv@dividend+3
  4016  006540  0E70               	movlw	112
  4017  006542  6E05               	movwf	___lldiv@divisor^0,c
  4018  006544  0E17               	movlw	23
  4019  006546  6E06               	movwf	(___lldiv@divisor+1)^0,c
  4020  006548  0E00               	movlw	0
  4021  00654A  6E07               	movwf	(___lldiv@divisor+2)^0,c
  4022  00654C  0E00               	movlw	0
  4023  00654E  6E08               	movwf	(___lldiv@divisor+3)^0,c
  4024  006550  ECF1  F031         	call	___lldiv	;wreg free
  4025  006554  C001  F015         	movff	?___lldiv,??_compararAlarme
  4026  006558  C002  F016         	movff	?___lldiv+1,??_compararAlarme+1
  4027  00655C  C003  F017         	movff	?___lldiv+2,??_compararAlarme+2
  4028  006560  C004  F018         	movff	?___lldiv+3,??_compararAlarme+3
  4029  006564  C02A  F001         	movff	_horaAlarme,___lldiv@dividend
  4030  006568  C02B  F002         	movff	_horaAlarme+1,___lldiv@dividend+1
  4031  00656C  C02C  F003         	movff	_horaAlarme+2,___lldiv@dividend+2
  4032  006570  C02D  F004         	movff	_horaAlarme+3,___lldiv@dividend+3
  4033  006574  0E70               	movlw	112
  4034  006576  6E05               	movwf	___lldiv@divisor^0,c
  4035  006578  0E17               	movlw	23
  4036  00657A  6E06               	movwf	(___lldiv@divisor+1)^0,c
  4037  00657C  0E00               	movlw	0
  4038  00657E  6E07               	movwf	(___lldiv@divisor+2)^0,c
  4039  006580  0E00               	movlw	0
  4040  006582  6E08               	movwf	(___lldiv@divisor+3)^0,c
  4041  006584  ECF1  F031         	call	___lldiv	;wreg free
  4042  006588  5001               	movf	?___lldiv^0,w,c
  4043  00658A  1815               	xorwf	??_compararAlarme^0,w,c
  4044  00658C  E10D               	bnz	u2651
  4045  00658E  5002               	movf	(?___lldiv+1)^0,w,c
  4046  006590  1816               	xorwf	(??_compararAlarme+1)^0,w,c
  4047  006592  E10A               	bnz	u2651
  4048  006594  5003               	movf	(?___lldiv+2)^0,w,c
  4049  006596  1817               	xorwf	(??_compararAlarme+2)^0,w,c
  4050  006598  E107               	bnz	u2651
  4051  00659A  5004               	movf	(?___lldiv+3)^0,w,c
  4052  00659C  1818               	xorwf	(??_compararAlarme+3)^0,w,c
  4053  00659E  A4D8               	btfss	status,2,c
  4054  0065A0  EFD4  F032         	goto	u2651
  4055  0065A4  EFD6  F032         	goto	u2650
  4056  0065A8                     u2651:
  4057  0065A8  EFEA  F032         	goto	l3273
  4058  0065AC                     u2650:
  4059  0065AC                     
  4060                           ;main.c: 375:         if (soneca == '0') {
  4061  0065AC  0E30               	movlw	48
  4062  0065AE  1852               	xorwf	_soneca^0,w,c
  4063  0065B0  A4D8               	btfss	status,2,c
  4064  0065B2  EFDD  F032         	goto	u2661
  4065  0065B6  EFDF  F032         	goto	u2660
  4066  0065BA                     u2661:
  4067  0065BA  EFEC  F032         	goto	l217
  4068  0065BE                     u2660:
  4069  0065BE                     
  4070                           ;main.c: 376:             lcdCommand(0x01);
  4071  0065BE  0E01               	movlw	1
  4072  0065C0  ECB3  F02E         	call	_lcdCommand
  4073                           
  4074                           ;main.c: 377:             pwmFrequency(600);
  4075  0065C4  0E02               	movlw	2
  4076  0065C6  6E10               	movwf	(pwmFrequency@freq+1)^0,c
  4077  0065C8  0E58               	movlw	88
  4078  0065CA  6E0F               	movwf	pwmFrequency@freq^0,c
  4079  0065CC  ECE2  F02E         	call	_pwmFrequency	;wreg free
  4080  0065D0  EFEC  F032         	goto	l217
  4081  0065D4                     l3273:
  4082                           
  4083                           ;main.c: 399:         soneca = '0';
  4084  0065D4  0E30               	movlw	48
  4085  0065D6  6E52               	movwf	_soneca^0,c
  4086  0065D8                     l217:
  4087  0065D8  0012               	return		;funcret
  4088  0065DA                     __end_of_compararAlarme:
  4089                           	callstack 0
  4090                           
  4091 ;; *************** function _timerWait *****************
  4092 ;; Defined at:
  4093 ;;		line 31 in file "timer.c"
  4094 ;; Parameters:    Size  Location     Type
  4095 ;;		None
  4096 ;; Auto vars:     Size  Location     Type
  4097 ;;		None
  4098 ;; Return value:  Size  Location     Type
  4099 ;;                  1    wreg      void 
  4100 ;; Registers used:
  4101 ;;		None
  4102 ;; Tracked objects:
  4103 ;;		On entry : 0/0
  4104 ;;		On exit  : 0/0
  4105 ;;		Unchanged: 0/0
  4106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4107 ;;      Params:         0       0       0       0       0       0       0
  4108 ;;      Locals:         0       0       0       0       0       0       0
  4109 ;;      Temps:          0       0       0       0       0       0       0
  4110 ;;      Totals:         0       0       0       0       0       0       0
  4111 ;;Total ram usage:        0 bytes
  4112 ;; Hardware stack levels used: 1
  4113 ;; This function calls:
  4114 ;;		Nothing
  4115 ;; This function is called by:
  4116 ;;		_radioConfig
  4117 ;;		_radioFreq
  4118 ;;		_alarmeHora
  4119 ;;		_horaConfig
  4120 ;;		_menu
  4121 ;;		_compararAlarme
  4122 ;;		_main
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           	psect	text19
  4127  005D3C                     __ptext19:
  4128                           	callstack 0
  4129  005D3C                     _timerWait:
  4130                           	callstack 30
  4131  005D3C                     l524:
  4132  005D3C  A4F2               	btfss	242,2,c	;volatile
  4133  005D3E  EFA3  F02E         	goto	u271
  4134  005D42  EFA5  F02E         	goto	u270
  4135  005D46                     u271:
  4136  005D46  EF9E  F02E         	goto	l524
  4137  005D4A                     u270:
  4138  005D4A  0012               	return		;funcret
  4139  005D4C                     __end_of_timerWait:
  4140                           	callstack 0
  4141                           
  4142 ;; *************** function _timerReset *****************
  4143 ;; Defined at:
  4144 ;;		line 37 in file "timer.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;  tempo           2    0[COMRAM] unsigned int 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  ciclos          2    2[COMRAM] unsigned int 
  4149 ;; Return value:  Size  Location     Type
  4150 ;;                  1    wreg      void 
  4151 ;; Registers used:
  4152 ;;		wreg, status,2, status,0
  4153 ;; Tracked objects:
  4154 ;;		On entry : 0/0
  4155 ;;		On exit  : 0/0
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4158 ;;      Params:         2       0       0       0       0       0       0
  4159 ;;      Locals:         2       0       0       0       0       0       0
  4160 ;;      Temps:          0       0       0       0       0       0       0
  4161 ;;      Totals:         4       0       0       0       0       0       0
  4162 ;;Total ram usage:        4 bytes
  4163 ;; Hardware stack levels used: 1
  4164 ;; This function calls:
  4165 ;;		Nothing
  4166 ;; This function is called by:
  4167 ;;		_radioConfig
  4168 ;;		_radioFreq
  4169 ;;		_alarmeHora
  4170 ;;		_horaConfig
  4171 ;;		_menu
  4172 ;;		_compararAlarme
  4173 ;;		_main
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           	psect	text20
  4178  005DA2                     __ptext20:
  4179                           	callstack 0
  4180  005DA2                     _timerReset:
  4181                           	callstack 30
  4182  005DA2                     
  4183                           ;timer.c: 37: void timerReset(unsigned int tempo);timer.c: 38: {;timer.c: 39:     unsign
      +                          ed int ciclos;;timer.c: 42:     ciclos = tempo * 2;
  4184  005DA2  90D8               	bcf	status,0,c
  4185  005DA4  3401               	rlcf	timerReset@tempo^0,w,c
  4186  005DA6  6E03               	movwf	timerReset@ciclos^0,c
  4187  005DA8  3402               	rlcf	(timerReset@tempo+1)^0,w,c
  4188  005DAA  6E04               	movwf	(timerReset@ciclos+1)^0,c
  4189  005DAC                     
  4190                           ;timer.c: 44:  ciclos = 65535 - ciclos;
  4191  005DAC  1E03               	comf	timerReset@ciclos^0,f,c
  4192  005DAE  1E04               	comf	(timerReset@ciclos+1)^0,f,c
  4193  005DB0                     
  4194                           ;timer.c: 47:     ciclos -=50;
  4195  005DB0  0E32               	movlw	50
  4196  005DB2  5E03               	subwf	timerReset@ciclos^0,f,c
  4197  005DB4  0E00               	movlw	0
  4198  005DB6  5A04               	subwfb	(timerReset@ciclos+1)^0,f,c
  4199  005DB8                     
  4200                           ;timer.c: 49:  TMR0H = (ciclos >> 8);
  4201  005DB8  5004               	movf	(timerReset@ciclos+1)^0,w,c
  4202  005DBA  6ED7               	movwf	215,c	;volatile
  4203  005DBC                     
  4204                           ;timer.c: 50:  TMR0L = (ciclos & 0x00FF);
  4205  005DBC  C003  FFD6         	movff	timerReset@ciclos,4054	;volatile
  4206  005DC0                     
  4207                           ;timer.c: 52:  ((INTCON) &= ~(1<<(2)));
  4208  005DC0  94F2               	bcf	242,2,c	;volatile
  4209  005DC2  0012               	return		;funcret
  4210  005DC4                     __end_of_timerReset:
  4211                           	callstack 0
  4212                           
  4213 ;; *************** function _ssdUpdate *****************
  4214 ;; Defined at:
  4215 ;;		line 50 in file "ssd.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;		None
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;		None
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  1    wreg      void 
  4222 ;; Registers used:
  4223 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4229 ;;      Params:         0       0       0       0       0       0       0
  4230 ;;      Locals:         0       0       0       0       0       0       0
  4231 ;;      Temps:          2       0       0       0       0       0       0
  4232 ;;      Totals:         2       0       0       0       0       0       0
  4233 ;;Total ram usage:        2 bytes
  4234 ;; Hardware stack levels used: 1
  4235 ;; Hardware stack levels required when called: 3
  4236 ;; This function calls:
  4237 ;;		_digitalWrite
  4238 ;;		_soWrite
  4239 ;; This function is called by:
  4240 ;;		_radioConfig
  4241 ;;		_radioFreq
  4242 ;;		_alarmeHora
  4243 ;;		_horaConfig
  4244 ;;		_alarmeConfig
  4245 ;;		_menu
  4246 ;;		_compararAlarme
  4247 ;;		_main
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           	psect	text21
  4252  0070AA                     __ptext21:
  4253                           	callstack 0
  4254  0070AA                     _ssdUpdate:
  4255                           	callstack 27
  4256  0070AA                     
  4257                           ;ssd.c: 54:     digitalWrite(PIN_D0,0);
  4258  0070AA  0E00               	movlw	0
  4259  0070AC  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4260  0070AE  0E18               	movlw	24
  4261  0070B0  6E01               	movwf	digitalWrite@pin^0,c
  4262  0070B2  0E00               	movlw	0
  4263  0070B4  6E04               	movwf	(digitalWrite@value+1)^0,c
  4264  0070B6  0E00               	movlw	0
  4265  0070B8  6E03               	movwf	digitalWrite@value^0,c
  4266  0070BA  ECAD  F03A         	call	_digitalWrite	;wreg free
  4267                           
  4268                           ;ssd.c: 55:     digitalWrite(PIN_D1,0);
  4269  0070BE  0E00               	movlw	0
  4270  0070C0  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4271  0070C2  0E19               	movlw	25
  4272  0070C4  6E01               	movwf	digitalWrite@pin^0,c
  4273  0070C6  0E00               	movlw	0
  4274  0070C8  6E04               	movwf	(digitalWrite@value+1)^0,c
  4275  0070CA  0E00               	movlw	0
  4276  0070CC  6E03               	movwf	digitalWrite@value^0,c
  4277  0070CE  ECAD  F03A         	call	_digitalWrite	;wreg free
  4278                           
  4279                           ;ssd.c: 56:     digitalWrite(PIN_D2,0);
  4280  0070D2  0E00               	movlw	0
  4281  0070D4  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4282  0070D6  0E1A               	movlw	26
  4283  0070D8  6E01               	movwf	digitalWrite@pin^0,c
  4284  0070DA  0E00               	movlw	0
  4285  0070DC  6E04               	movwf	(digitalWrite@value+1)^0,c
  4286  0070DE  0E00               	movlw	0
  4287  0070E0  6E03               	movwf	digitalWrite@value^0,c
  4288  0070E2  ECAD  F03A         	call	_digitalWrite	;wreg free
  4289                           
  4290                           ;ssd.c: 57:     digitalWrite(PIN_D3,0);
  4291  0070E6  0E00               	movlw	0
  4292  0070E8  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4293  0070EA  0E1B               	movlw	27
  4294  0070EC  6E01               	movwf	digitalWrite@pin^0,c
  4295  0070EE  0E00               	movlw	0
  4296  0070F0  6E04               	movwf	(digitalWrite@value+1)^0,c
  4297  0070F2  0E00               	movlw	0
  4298  0070F4  6E03               	movwf	digitalWrite@value^0,c
  4299  0070F6  ECAD  F03A         	call	_digitalWrite	;wreg free
  4300                           
  4301                           ;ssd.c: 60:     soWrite(0x00);
  4302  0070FA  0E00               	movlw	0
  4303  0070FC  6E08               	movwf	(soWrite@value+1)^0,c
  4304  0070FE  0E00               	movlw	0
  4305  007100  6E07               	movwf	soWrite@value^0,c
  4306  007102  ECE2  F02F         	call	_soWrite	;wreg free
  4307                           
  4308                           ;ssd.c: 62:     switch (display)
  4309  007106  EFED  F038         	goto	l2507
  4310  00710A                     l2479:
  4311                           
  4312                           ;ssd.c: 65:             soWrite(valor[v0]);
  4313  00710A  0EDB               	movlw	low _valor
  4314  00710C  2447               	addwf	_v0^0,w,c
  4315  00710E  6EF6               	movwf	tblptrl,c
  4316  007110  6AF7               	clrf	tblptrh,c
  4317  007112  0E7E               	movlw	high _valor
  4318  007114  22F7               	addwfc	tblptrh,f,c
  4319  007116                     	if	0	;There are less than 3 active tblptr bytes
  4320  007116                     	endif
  4321  007116  0008               	tblrd		*
  4322  007118  50F5               	movf	tablat,w,c
  4323  00711A  6E07               	movwf	soWrite@value^0,c
  4324  00711C  6A08               	clrf	(soWrite@value+1)^0,c
  4325  00711E  ECE2  F02F         	call	_soWrite	;wreg free
  4326  007122                     
  4327                           ;ssd.c: 66:             digitalWrite(PIN_D0,1);
  4328  007122  0E00               	movlw	0
  4329  007124  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4330  007126  0E18               	movlw	24
  4331  007128  6E01               	movwf	digitalWrite@pin^0,c
  4332  00712A  0E00               	movlw	0
  4333  00712C  6E04               	movwf	(digitalWrite@value+1)^0,c
  4334  00712E  0E01               	movlw	1
  4335  007130  6E03               	movwf	digitalWrite@value^0,c
  4336  007132  ECAD  F03A         	call	_digitalWrite	;wreg free
  4337  007136                     
  4338                           ;ssd.c: 67:             display = 1;
  4339  007136  0E01               	movlw	1
  4340  007138  6E48               	movwf	_display^0,c
  4341                           
  4342                           ;ssd.c: 68:             break;
  4343  00713A  EF0A  F039         	goto	l507
  4344  00713E                     l2485:
  4345                           
  4346                           ;ssd.c: 71:             soWrite(valor[v1]);
  4347  00713E  0EDB               	movlw	low _valor
  4348  007140  2446               	addwf	_v1^0,w,c
  4349  007142  6EF6               	movwf	tblptrl,c
  4350  007144  6AF7               	clrf	tblptrh,c
  4351  007146  0E7E               	movlw	high _valor
  4352  007148  22F7               	addwfc	tblptrh,f,c
  4353  00714A                     	if	0	;There are less than 3 active tblptr bytes
  4354  00714A                     	endif
  4355  00714A  0008               	tblrd		*
  4356  00714C  50F5               	movf	tablat,w,c
  4357  00714E  6E07               	movwf	soWrite@value^0,c
  4358  007150  6A08               	clrf	(soWrite@value+1)^0,c
  4359  007152  ECE2  F02F         	call	_soWrite	;wreg free
  4360  007156                     
  4361                           ;ssd.c: 72:             digitalWrite(PIN_D1,1);
  4362  007156  0E00               	movlw	0
  4363  007158  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4364  00715A  0E19               	movlw	25
  4365  00715C  6E01               	movwf	digitalWrite@pin^0,c
  4366  00715E  0E00               	movlw	0
  4367  007160  6E04               	movwf	(digitalWrite@value+1)^0,c
  4368  007162  0E01               	movlw	1
  4369  007164  6E03               	movwf	digitalWrite@value^0,c
  4370  007166  ECAD  F03A         	call	_digitalWrite	;wreg free
  4371  00716A                     
  4372                           ;ssd.c: 73:             display = 2;
  4373  00716A  0E02               	movlw	2
  4374  00716C  6E48               	movwf	_display^0,c
  4375                           
  4376                           ;ssd.c: 74:             break;
  4377  00716E  EF0A  F039         	goto	l507
  4378  007172                     l2491:
  4379                           
  4380                           ;ssd.c: 77:             soWrite(valor[v2]);
  4381  007172  0EDB               	movlw	low _valor
  4382  007174  2445               	addwf	_v2^0,w,c
  4383  007176  6EF6               	movwf	tblptrl,c
  4384  007178  6AF7               	clrf	tblptrh,c
  4385  00717A  0E7E               	movlw	high _valor
  4386  00717C  22F7               	addwfc	tblptrh,f,c
  4387  00717E                     	if	0	;There are less than 3 active tblptr bytes
  4388  00717E                     	endif
  4389  00717E  0008               	tblrd		*
  4390  007180  50F5               	movf	tablat,w,c
  4391  007182  6E07               	movwf	soWrite@value^0,c
  4392  007184  6A08               	clrf	(soWrite@value+1)^0,c
  4393  007186  ECE2  F02F         	call	_soWrite	;wreg free
  4394  00718A                     
  4395                           ;ssd.c: 78:             digitalWrite(PIN_D2,1);
  4396  00718A  0E00               	movlw	0
  4397  00718C  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4398  00718E  0E1A               	movlw	26
  4399  007190  6E01               	movwf	digitalWrite@pin^0,c
  4400  007192  0E00               	movlw	0
  4401  007194  6E04               	movwf	(digitalWrite@value+1)^0,c
  4402  007196  0E01               	movlw	1
  4403  007198  6E03               	movwf	digitalWrite@value^0,c
  4404  00719A  ECAD  F03A         	call	_digitalWrite	;wreg free
  4405  00719E                     
  4406                           ;ssd.c: 79:             display = 3;
  4407  00719E  0E03               	movlw	3
  4408  0071A0  6E48               	movwf	_display^0,c
  4409                           
  4410                           ;ssd.c: 80:             break;
  4411  0071A2  EF0A  F039         	goto	l507
  4412  0071A6                     l2497:
  4413                           
  4414                           ;ssd.c: 83:             soWrite(valor[v3]);
  4415  0071A6  0EDB               	movlw	low _valor
  4416  0071A8  2444               	addwf	_v3^0,w,c
  4417  0071AA  6EF6               	movwf	tblptrl,c
  4418  0071AC  6AF7               	clrf	tblptrh,c
  4419  0071AE  0E7E               	movlw	high _valor
  4420  0071B0  22F7               	addwfc	tblptrh,f,c
  4421  0071B2                     	if	0	;There are less than 3 active tblptr bytes
  4422  0071B2                     	endif
  4423  0071B2  0008               	tblrd		*
  4424  0071B4  50F5               	movf	tablat,w,c
  4425  0071B6  6E07               	movwf	soWrite@value^0,c
  4426  0071B8  6A08               	clrf	(soWrite@value+1)^0,c
  4427  0071BA  ECE2  F02F         	call	_soWrite	;wreg free
  4428  0071BE                     
  4429                           ;ssd.c: 84:             digitalWrite(PIN_D3,1);
  4430  0071BE  0E00               	movlw	0
  4431  0071C0  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4432  0071C2  0E1B               	movlw	27
  4433  0071C4  6E01               	movwf	digitalWrite@pin^0,c
  4434  0071C6  0E00               	movlw	0
  4435  0071C8  6E04               	movwf	(digitalWrite@value+1)^0,c
  4436  0071CA  0E01               	movlw	1
  4437  0071CC  6E03               	movwf	digitalWrite@value^0,c
  4438  0071CE  ECAD  F03A         	call	_digitalWrite	;wreg free
  4439  0071D2                     l2501:
  4440                           
  4441                           ;ssd.c: 85:             display = 0;
  4442  0071D2  0E00               	movlw	0
  4443  0071D4  6E48               	movwf	_display^0,c
  4444                           
  4445                           ;ssd.c: 86:             break;
  4446  0071D6  EF0A  F039         	goto	l507
  4447  0071DA                     l2507:
  4448  0071DA  5048               	movf	_display^0,w,c
  4449  0071DC  6E0A               	movwf	??_ssdUpdate^0,c
  4450  0071DE  6A0B               	clrf	(??_ssdUpdate+1)^0,c
  4451                           
  4452                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4453                           ; Switch size 1, requested type "simple"
  4454                           ; Number of cases is 1, Range of values is 0 to 0
  4455                           ; switch strategies available:
  4456                           ; Name         Instructions Cycles
  4457                           ; simple_byte            4     3 (average)
  4458                           ;	Chosen strategy is simple_byte
  4459  0071E0  500B               	movf	(??_ssdUpdate+1)^0,w,c
  4460  0071E2  0A00               	xorlw	0	; case 0
  4461  0071E4  B4D8               	btfsc	status,2,c
  4462  0071E6  EFF7  F038         	goto	l3509
  4463  0071EA  EFE9  F038         	goto	l2501
  4464  0071EE                     l3509:
  4465                           
  4466                           ; Switch size 1, requested type "simple"
  4467                           ; Number of cases is 4, Range of values is 0 to 3
  4468                           ; switch strategies available:
  4469                           ; Name         Instructions Cycles
  4470                           ; simple_byte           13     7 (average)
  4471                           ;	Chosen strategy is simple_byte
  4472  0071EE  500A               	movf	??_ssdUpdate^0,w,c
  4473  0071F0  0A00               	xorlw	0	; case 0
  4474  0071F2  B4D8               	btfsc	status,2,c
  4475  0071F4  EF85  F038         	goto	l2479
  4476  0071F8  0A01               	xorlw	1	; case 1
  4477  0071FA  B4D8               	btfsc	status,2,c
  4478  0071FC  EF9F  F038         	goto	l2485
  4479  007200  0A03               	xorlw	3	; case 2
  4480  007202  B4D8               	btfsc	status,2,c
  4481  007204  EFB9  F038         	goto	l2491
  4482  007208  0A01               	xorlw	1	; case 3
  4483  00720A  B4D8               	btfsc	status,2,c
  4484  00720C  EFD3  F038         	goto	l2497
  4485  007210  EFE9  F038         	goto	l2501
  4486  007214                     l507:
  4487  007214  0012               	return		;funcret
  4488  007216                     __end_of_ssdUpdate:
  4489                           	callstack 0
  4490                           
  4491 ;; *************** function _pwmFrequency *****************
  4492 ;; Defined at:
  4493 ;;		line 44 in file "pwm.c"
  4494 ;; Parameters:    Size  Location     Type
  4495 ;;  freq            2   14[COMRAM] unsigned int 
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;		None
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  1    wreg      void 
  4500 ;; Registers used:
  4501 ;;		wreg, status,2, status,0, cstack
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4507 ;;      Params:         2       0       0       0       0       0       0
  4508 ;;      Locals:         0       0       0       0       0       0       0
  4509 ;;      Temps:          0       0       0       0       0       0       0
  4510 ;;      Totals:         2       0       0       0       0       0       0
  4511 ;;Total ram usage:        2 bytes
  4512 ;; Hardware stack levels used: 1
  4513 ;; Hardware stack levels required when called: 1
  4514 ;; This function calls:
  4515 ;;		___aldiv
  4516 ;; This function is called by:
  4517 ;;		_compararAlarme
  4518 ;;		_pwmInit
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           	psect	text22
  4523  005DC4                     __ptext22:
  4524                           	callstack 0
  4525  005DC4                     _pwmFrequency:
  4526                           	callstack 28
  4527  005DC4                     
  4528                           ;pwm.c: 44: void pwmFrequency(unsigned int freq);pwm.c: 45: {;pwm.c: 48:  PR2 = (125000l
      +                          /(freq)) - 1;
  4529  005DC4  0E48               	movlw	72
  4530  005DC6  6E01               	movwf	___aldiv@dividend^0,c
  4531  005DC8  0EE8               	movlw	232
  4532  005DCA  6E02               	movwf	(___aldiv@dividend+1)^0,c
  4533  005DCC  0E01               	movlw	1
  4534  005DCE  6E03               	movwf	(___aldiv@dividend+2)^0,c
  4535  005DD0  0E00               	movlw	0
  4536  005DD2  6E04               	movwf	(___aldiv@dividend+3)^0,c
  4537  005DD4  C00F  F005         	movff	pwmFrequency@freq,___aldiv@divisor
  4538  005DD8  C010  F006         	movff	pwmFrequency@freq+1,___aldiv@divisor+1
  4539  005DDC  6A07               	clrf	(___aldiv@divisor+2)^0,c
  4540  005DDE  6A08               	clrf	(___aldiv@divisor+3)^0,c
  4541  005DE0  EC6D  F035         	call	___aldiv	;wreg free
  4542  005DE4  0401               	decf	?___aldiv^0,w,c
  4543  005DE6  6ECB               	movwf	203,c	;volatile
  4544  005DE8  0012               	return		;funcret
  4545  005DEA                     __end_of_pwmFrequency:
  4546                           	callstack 0
  4547                           
  4548 ;; *************** function ___aldiv *****************
  4549 ;; Defined at:
  4550 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aldiv.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  dividend        4    0[COMRAM] long 
  4553 ;;  divisor         4    4[COMRAM] long 
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;  quotient        4   10[COMRAM] long 
  4556 ;;  sign            1    9[COMRAM] unsigned char 
  4557 ;;  counter         1    8[COMRAM] unsigned char 
  4558 ;; Return value:  Size  Location     Type
  4559 ;;                  4    0[COMRAM] long 
  4560 ;; Registers used:
  4561 ;;		wreg, status,2, status,0
  4562 ;; Tracked objects:
  4563 ;;		On entry : 0/0
  4564 ;;		On exit  : 0/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4567 ;;      Params:         8       0       0       0       0       0       0
  4568 ;;      Locals:         6       0       0       0       0       0       0
  4569 ;;      Temps:          0       0       0       0       0       0       0
  4570 ;;      Totals:        14       0       0       0       0       0       0
  4571 ;;Total ram usage:       14 bytes
  4572 ;; Hardware stack levels used: 1
  4573 ;; This function calls:
  4574 ;;		Nothing
  4575 ;; This function is called by:
  4576 ;;		_pwmFrequency
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           	psect	text23
  4581  006ADA                     __ptext23:
  4582                           	callstack 0
  4583  006ADA                     ___aldiv:
  4584                           	callstack 28
  4585  006ADA  0E00               	movlw	0
  4586  006ADC  6E0A               	movwf	___aldiv@sign^0,c
  4587  006ADE  BE08               	btfsc	(___aldiv@divisor+3)^0,7,c
  4588  006AE0  EF76  F035         	goto	u2100
  4589  006AE4  EF74  F035         	goto	u2101
  4590  006AE8                     u2101:
  4591  006AE8  EF80  F035         	goto	l2843
  4592  006AEC                     u2100:
  4593  006AEC  1E08               	comf	(___aldiv@divisor+3)^0,f,c
  4594  006AEE  1E07               	comf	(___aldiv@divisor+2)^0,f,c
  4595  006AF0  1E06               	comf	(___aldiv@divisor+1)^0,f,c
  4596  006AF2  6C05               	negf	___aldiv@divisor^0,c
  4597  006AF4  0E00               	movlw	0
  4598  006AF6  2206               	addwfc	(___aldiv@divisor+1)^0,f,c
  4599  006AF8  2207               	addwfc	(___aldiv@divisor+2)^0,f,c
  4600  006AFA  2208               	addwfc	(___aldiv@divisor+3)^0,f,c
  4601  006AFC  0E01               	movlw	1
  4602  006AFE  6E0A               	movwf	___aldiv@sign^0,c
  4603  006B00                     l2843:
  4604  006B00  BE04               	btfsc	(___aldiv@dividend+3)^0,7,c
  4605  006B02  EF87  F035         	goto	u2110
  4606  006B06  EF85  F035         	goto	u2111
  4607  006B0A                     u2111:
  4608  006B0A  EF91  F035         	goto	l2849
  4609  006B0E                     u2110:
  4610  006B0E  1E04               	comf	(___aldiv@dividend+3)^0,f,c
  4611  006B10  1E03               	comf	(___aldiv@dividend+2)^0,f,c
  4612  006B12  1E02               	comf	(___aldiv@dividend+1)^0,f,c
  4613  006B14  6C01               	negf	___aldiv@dividend^0,c
  4614  006B16  0E00               	movlw	0
  4615  006B18  2202               	addwfc	(___aldiv@dividend+1)^0,f,c
  4616  006B1A  2203               	addwfc	(___aldiv@dividend+2)^0,f,c
  4617  006B1C  2204               	addwfc	(___aldiv@dividend+3)^0,f,c
  4618  006B1E  0E01               	movlw	1
  4619  006B20  1A0A               	xorwf	___aldiv@sign^0,f,c
  4620  006B22                     l2849:
  4621  006B22  0E00               	movlw	0
  4622  006B24  6E0B               	movwf	___aldiv@quotient^0,c
  4623  006B26  0E00               	movlw	0
  4624  006B28  6E0C               	movwf	(___aldiv@quotient+1)^0,c
  4625  006B2A  0E00               	movlw	0
  4626  006B2C  6E0D               	movwf	(___aldiv@quotient+2)^0,c
  4627  006B2E  0E00               	movlw	0
  4628  006B30  6E0E               	movwf	(___aldiv@quotient+3)^0,c
  4629  006B32  5005               	movf	___aldiv@divisor^0,w,c
  4630  006B34  1006               	iorwf	(___aldiv@divisor+1)^0,w,c
  4631  006B36  1007               	iorwf	(___aldiv@divisor+2)^0,w,c
  4632  006B38  1008               	iorwf	(___aldiv@divisor+3)^0,w,c
  4633  006B3A  B4D8               	btfsc	status,2,c
  4634  006B3C  EFA2  F035         	goto	u2121
  4635  006B40  EFA4  F035         	goto	u2120
  4636  006B44                     u2121:
  4637  006B44  EFDA  F035         	goto	l2871
  4638  006B48                     u2120:
  4639  006B48  0E01               	movlw	1
  4640  006B4A  6E09               	movwf	___aldiv@counter^0,c
  4641  006B4C  EFAE  F035         	goto	l2857
  4642  006B50                     l2855:
  4643  006B50  90D8               	bcf	status,0,c
  4644  006B52  3605               	rlcf	___aldiv@divisor^0,f,c
  4645  006B54  3606               	rlcf	(___aldiv@divisor+1)^0,f,c
  4646  006B56  3607               	rlcf	(___aldiv@divisor+2)^0,f,c
  4647  006B58  3608               	rlcf	(___aldiv@divisor+3)^0,f,c
  4648  006B5A  2A09               	incf	___aldiv@counter^0,f,c
  4649  006B5C                     l2857:
  4650  006B5C  AE08               	btfss	(___aldiv@divisor+3)^0,7,c
  4651  006B5E  EFB3  F035         	goto	u2131
  4652  006B62  EFB5  F035         	goto	u2130
  4653  006B66                     u2131:
  4654  006B66  EFA8  F035         	goto	l2855
  4655  006B6A                     u2130:
  4656  006B6A                     l2859:
  4657  006B6A  90D8               	bcf	status,0,c
  4658  006B6C  360B               	rlcf	___aldiv@quotient^0,f,c
  4659  006B6E  360C               	rlcf	(___aldiv@quotient+1)^0,f,c
  4660  006B70  360D               	rlcf	(___aldiv@quotient+2)^0,f,c
  4661  006B72  360E               	rlcf	(___aldiv@quotient+3)^0,f,c
  4662  006B74  5005               	movf	___aldiv@divisor^0,w,c
  4663  006B76  5C01               	subwf	___aldiv@dividend^0,w,c
  4664  006B78  5006               	movf	(___aldiv@divisor+1)^0,w,c
  4665  006B7A  5802               	subwfb	(___aldiv@dividend+1)^0,w,c
  4666  006B7C  5007               	movf	(___aldiv@divisor+2)^0,w,c
  4667  006B7E  5803               	subwfb	(___aldiv@dividend+2)^0,w,c
  4668  006B80  5008               	movf	(___aldiv@divisor+3)^0,w,c
  4669  006B82  5804               	subwfb	(___aldiv@dividend+3)^0,w,c
  4670  006B84  A0D8               	btfss	status,0,c
  4671  006B86  EFC7  F035         	goto	u2141
  4672  006B8A  EFC9  F035         	goto	u2140
  4673  006B8E                     u2141:
  4674  006B8E  EFD2  F035         	goto	l2867
  4675  006B92                     u2140:
  4676  006B92  5005               	movf	___aldiv@divisor^0,w,c
  4677  006B94  5E01               	subwf	___aldiv@dividend^0,f,c
  4678  006B96  5006               	movf	(___aldiv@divisor+1)^0,w,c
  4679  006B98  5A02               	subwfb	(___aldiv@dividend+1)^0,f,c
  4680  006B9A  5007               	movf	(___aldiv@divisor+2)^0,w,c
  4681  006B9C  5A03               	subwfb	(___aldiv@dividend+2)^0,f,c
  4682  006B9E  5008               	movf	(___aldiv@divisor+3)^0,w,c
  4683  006BA0  5A04               	subwfb	(___aldiv@dividend+3)^0,f,c
  4684  006BA2  800B               	bsf	___aldiv@quotient^0,0,c
  4685  006BA4                     l2867:
  4686  006BA4  90D8               	bcf	status,0,c
  4687  006BA6  3208               	rrcf	(___aldiv@divisor+3)^0,f,c
  4688  006BA8  3207               	rrcf	(___aldiv@divisor+2)^0,f,c
  4689  006BAA  3206               	rrcf	(___aldiv@divisor+1)^0,f,c
  4690  006BAC  3205               	rrcf	___aldiv@divisor^0,f,c
  4691  006BAE  2E09               	decfsz	___aldiv@counter^0,f,c
  4692  006BB0  EFB5  F035         	goto	l2859
  4693  006BB4                     l2871:
  4694  006BB4  500A               	movf	___aldiv@sign^0,w,c
  4695  006BB6  B4D8               	btfsc	status,2,c
  4696  006BB8  EFE0  F035         	goto	u2151
  4697  006BBC  EFE2  F035         	goto	u2150
  4698  006BC0                     u2151:
  4699  006BC0  EFEA  F035         	goto	l2875
  4700  006BC4                     u2150:
  4701  006BC4  1E0E               	comf	(___aldiv@quotient+3)^0,f,c
  4702  006BC6  1E0D               	comf	(___aldiv@quotient+2)^0,f,c
  4703  006BC8  1E0C               	comf	(___aldiv@quotient+1)^0,f,c
  4704  006BCA  6C0B               	negf	___aldiv@quotient^0,c
  4705  006BCC  0E00               	movlw	0
  4706  006BCE  220C               	addwfc	(___aldiv@quotient+1)^0,f,c
  4707  006BD0  220D               	addwfc	(___aldiv@quotient+2)^0,f,c
  4708  006BD2  220E               	addwfc	(___aldiv@quotient+3)^0,f,c
  4709  006BD4                     l2875:
  4710  006BD4  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  4711  006BD8  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  4712  006BDC  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  4713  006BE0  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  4714  006BE4  0012               	return		;funcret
  4715  006BE6                     __end_of___aldiv:
  4716                           	callstack 0
  4717                           
  4718 ;; *************** function _kpReadKey *****************
  4719 ;; Defined at:
  4720 ;;		line 17 in file "keypad.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;		None
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;  i               2    3[COMRAM] int 
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  1    wreg      unsigned char 
  4727 ;; Registers used:
  4728 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4734 ;;      Params:         0       0       0       0       0       0       0
  4735 ;;      Locals:         2       0       0       0       0       0       0
  4736 ;;      Temps:          3       0       0       0       0       0       0
  4737 ;;      Totals:         5       0       0       0       0       0       0
  4738 ;;Total ram usage:        5 bytes
  4739 ;; Hardware stack levels used: 1
  4740 ;; This function calls:
  4741 ;;		Nothing
  4742 ;; This function is called by:
  4743 ;;		_radioConfig
  4744 ;;		_radioFreq
  4745 ;;		_alarmeHora
  4746 ;;		_horaConfig
  4747 ;;		_alarmeConfig
  4748 ;;		_menu
  4749 ;;		_menuAccess
  4750 ;;		_compararAlarme
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           	psect	text24
  4755  0061E4                     __ptext24:
  4756                           	callstack 0
  4757  0061E4                     _kpReadKey:
  4758                           	callstack 26
  4759  0061E4                     
  4760                           ;keypad.c: 18:  int i;;keypad.c: 19:  for(i=0;i<10;i++){
  4761  0061E4  0E00               	movlw	0
  4762  0061E6  6E05               	movwf	(kpReadKey@i+1)^0,c
  4763  0061E8  0E00               	movlw	0
  4764  0061EA  6E04               	movwf	kpReadKey@i^0,c
  4765  0061EC                     l1355:
  4766                           
  4767                           ;keypad.c: 20:   if (((keys) & (1<<(i)))){
  4768  0061EC  C004  F001         	movff	kpReadKey@i,??_kpReadKey
  4769  0061F0  0E01               	movlw	1
  4770  0061F2  6E02               	movwf	(??_kpReadKey+1)^0,c
  4771  0061F4  0E00               	movlw	0
  4772  0061F6  6E03               	movwf	(??_kpReadKey+2)^0,c
  4773  0061F8  2A01               	incf	??_kpReadKey^0,f,c
  4774  0061FA  EF02  F031         	goto	u244
  4775  0061FE                     u245:
  4776  0061FE  90D8               	bcf	status,0,c
  4777  006200  3602               	rlcf	(??_kpReadKey+1)^0,f,c
  4778  006202  3603               	rlcf	(??_kpReadKey+2)^0,f,c
  4779  006204                     u244:
  4780  006204  2E01               	decfsz	??_kpReadKey^0,f,c
  4781  006206  EFFF  F030         	goto	u245
  4782  00620A  503E               	movf	_keys^0,w,c
  4783  00620C  1602               	andwf	(??_kpReadKey+1)^0,f,c
  4784  00620E  503F               	movf	(_keys+1)^0,w,c
  4785  006210  1603               	andwf	(??_kpReadKey+2)^0,f,c
  4786  006212  5002               	movf	(??_kpReadKey+1)^0,w,c
  4787  006214  1003               	iorwf	(??_kpReadKey+2)^0,w,c
  4788  006216  B4D8               	btfsc	status,2,c
  4789  006218  EF10  F031         	goto	u251
  4790  00621C  EF12  F031         	goto	u250
  4791  006220                     u251:
  4792  006220  EF1C  F031         	goto	l1361
  4793  006224                     u250:
  4794  006224                     
  4795                           ;keypad.c: 21:    return charKey[i];
  4796  006224  0EEB               	movlw	low _charKey
  4797  006226  2404               	addwf	kpReadKey@i^0,w,c
  4798  006228  6EF6               	movwf	tblptrl,c
  4799  00622A  0E7E               	movlw	high _charKey
  4800  00622C  2005               	addwfc	(kpReadKey@i+1)^0,w,c
  4801  00622E  6EF7               	movwf	tblptrh,c
  4802  006230                     	if	0	;There are less than 3 active tblptr bytes
  4803  006230                     	endif
  4804  006230  0008               	tblrd		*
  4805  006232  50F5               	movf	tablat,w,c
  4806  006234  EF2D  F031         	goto	l362
  4807  006238                     l1361:
  4808                           
  4809                           ;keypad.c: 23:  }
  4810  006238  4A04               	infsnz	kpReadKey@i^0,f,c
  4811  00623A  2A05               	incf	(kpReadKey@i+1)^0,f,c
  4812  00623C  BE05               	btfsc	(kpReadKey@i+1)^0,7,c
  4813  00623E  EF2A  F031         	goto	u261
  4814  006242  5005               	movf	(kpReadKey@i+1)^0,w,c
  4815  006244  E109               	bnz	u260
  4816  006246  0E0A               	movlw	10
  4817  006248  5C04               	subwf	kpReadKey@i^0,w,c
  4818  00624A  A0D8               	btfss	status,0,c
  4819  00624C  EF2A  F031         	goto	u261
  4820  006250  EF2C  F031         	goto	u260
  4821  006254                     u261:
  4822  006254  EFF6  F030         	goto	l1355
  4823  006258                     u260:
  4824  006258                     
  4825                           ;keypad.c: 25:  return 0;
  4826  006258  0E00               	movlw	0
  4827  00625A                     l362:
  4828  00625A  0012               	return		;funcret
  4829  00625C                     __end_of_kpReadKey:
  4830                           	callstack 0
  4831                           
  4832 ;; *************** function _kpRead *****************
  4833 ;; Defined at:
  4834 ;;		line 14 in file "keypad.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;		None
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;		None
  4839 ;; Return value:  Size  Location     Type
  4840 ;;                  2    0[COMRAM] unsigned int 
  4841 ;; Registers used:
  4842 ;;		None
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4848 ;;      Params:         2       0       0       0       0       0       0
  4849 ;;      Locals:         0       0       0       0       0       0       0
  4850 ;;      Temps:          0       0       0       0       0       0       0
  4851 ;;      Totals:         2       0       0       0       0       0       0
  4852 ;;Total ram usage:        2 bytes
  4853 ;; Hardware stack levels used: 1
  4854 ;; This function calls:
  4855 ;;		Nothing
  4856 ;; This function is called by:
  4857 ;;		_radioConfig
  4858 ;;		_radioFreq
  4859 ;;		_alarmeHora
  4860 ;;		_horaConfig
  4861 ;;		_alarmeConfig
  4862 ;;		_menu
  4863 ;;		_menuAccess
  4864 ;;		_compararAlarme
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           	psect	text25
  4869  005D28                     __ptext25:
  4870                           	callstack 0
  4871  005D28                     _kpRead:
  4872                           	callstack 26
  4873  005D28                     
  4874                           ;keypad.c: 15:     return keys;
  4875  005D28  C03E  F001         	movff	_keys,?_kpRead
  4876  005D2C  C03F  F002         	movff	_keys+1,?_kpRead+1
  4877  005D30  0012               	return		;funcret
  4878  005D32                     __end_of_kpRead:
  4879                           	callstack 0
  4880                           
  4881 ;; *************** function _adcInit *****************
  4882 ;; Defined at:
  4883 ;;		line 25 in file "adc.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;		None
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;		None
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  1    wreg      void 
  4890 ;; Registers used:
  4891 ;;		wreg, status,2, status,0, cstack
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4897 ;;      Params:         0       0       0       0       0       0       0
  4898 ;;      Locals:         0       0       0       0       0       0       0
  4899 ;;      Temps:          0       0       0       0       0       0       0
  4900 ;;      Totals:         0       0       0       0       0       0       0
  4901 ;;Total ram usage:        0 bytes
  4902 ;; Hardware stack levels used: 1
  4903 ;; Hardware stack levels required when called: 1
  4904 ;; This function calls:
  4905 ;;		_pinMode
  4906 ;; This function is called by:
  4907 ;;		_main
  4908 ;; This function uses a non-reentrant model
  4909 ;;
  4910                           
  4911                           	psect	text26
  4912  005F7C                     __ptext26:
  4913                           	callstack 0
  4914  005F7C                     _adcInit:
  4915                           	callstack 29
  4916  005F7C                     
  4917                           ;adc.c: 27:     pinMode(PIN_A0, 1);
  4918  005F7C  0E00               	movlw	0
  4919  005F7E  6E02               	movwf	(pinMode@pin+1)^0,c
  4920  005F80  0E00               	movlw	0
  4921  005F82  6E01               	movwf	pinMode@pin^0,c
  4922  005F84  0E00               	movlw	0
  4923  005F86  6E04               	movwf	(pinMode@type+1)^0,c
  4924  005F88  0E01               	movlw	1
  4925  005F8A  6E03               	movwf	pinMode@type^0,c
  4926  005F8C  ECD4  F03B         	call	_pinMode	;wreg free
  4927                           
  4928                           ;adc.c: 28:     pinMode(PIN_A1, 1);
  4929  005F90  0E00               	movlw	0
  4930  005F92  6E02               	movwf	(pinMode@pin+1)^0,c
  4931  005F94  0E01               	movlw	1
  4932  005F96  6E01               	movwf	pinMode@pin^0,c
  4933  005F98  0E00               	movlw	0
  4934  005F9A  6E04               	movwf	(pinMode@type+1)^0,c
  4935  005F9C  0E01               	movlw	1
  4936  005F9E  6E03               	movwf	pinMode@type^0,c
  4937  005FA0  ECD4  F03B         	call	_pinMode	;wreg free
  4938                           
  4939                           ;adc.c: 29:     pinMode(PIN_A2, 1);
  4940  005FA4  0E00               	movlw	0
  4941  005FA6  6E02               	movwf	(pinMode@pin+1)^0,c
  4942  005FA8  0E02               	movlw	2
  4943  005FAA  6E01               	movwf	pinMode@pin^0,c
  4944  005FAC  0E00               	movlw	0
  4945  005FAE  6E04               	movwf	(pinMode@type+1)^0,c
  4946  005FB0  0E01               	movlw	1
  4947  005FB2  6E03               	movwf	pinMode@type^0,c
  4948  005FB4  ECD4  F03B         	call	_pinMode	;wreg free
  4949  005FB8                     
  4950                           ;adc.c: 31:     ((ADCON0) |= (1<<(0)));
  4951  005FB8  80C2               	bsf	194,0,c	;volatile
  4952  005FBA                     
  4953                           ;adc.c: 33:     ADCON1 = 0b00001100;
  4954  005FBA  0E0C               	movlw	12
  4955  005FBC  6EC1               	movwf	193,c	;volatile
  4956  005FBE                     
  4957                           ;adc.c: 34:     ADCON2 = 0b10101010;
  4958  005FBE  0EAA               	movlw	170
  4959  005FC0  6EC0               	movwf	192,c	;volatile
  4960  005FC2  0012               	return		;funcret
  4961  005FC4                     __end_of_adcInit:
  4962                           	callstack 0
  4963                           
  4964 ;; *************** function _pinMode *****************
  4965 ;; Defined at:
  4966 ;;		line 54 in file "io.c"
  4967 ;; Parameters:    Size  Location     Type
  4968 ;;  pin             2    0[COMRAM] int 
  4969 ;;  type            2    2[COMRAM] int 
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;		None
  4972 ;; Return value:  Size  Location     Type
  4973 ;;                  1    wreg      void 
  4974 ;; Registers used:
  4975 ;;		wreg, status,2, status,0
  4976 ;; Tracked objects:
  4977 ;;		On entry : 0/0
  4978 ;;		On exit  : 0/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4981 ;;      Params:         4       0       0       0       0       0       0
  4982 ;;      Locals:         0       0       0       0       0       0       0
  4983 ;;      Temps:          2       0       0       0       0       0       0
  4984 ;;      Totals:         6       0       0       0       0       0       0
  4985 ;;Total ram usage:        6 bytes
  4986 ;; Hardware stack levels used: 1
  4987 ;; This function calls:
  4988 ;;		Nothing
  4989 ;; This function is called by:
  4990 ;;		_adcInit
  4991 ;;		_kpInit
  4992 ;;		_lcdInit
  4993 ;;		_soInit
  4994 ;;		_ssdInit
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           	psect	text27
  4999  0077A8                     __ptext27:
  5000                           	callstack 0
  5001  0077A8                     _pinMode:
  5002                           	callstack 28
  5003  0077A8                     
  5004                           ;io.c: 56:     if(pin <8){
  5005  0077A8  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  5006  0077AA  EFE2  F03B         	goto	u1900
  5007  0077AE  5002               	movf	(pinMode@pin+1)^0,w,c
  5008  0077B0  E107               	bnz	u1901
  5009  0077B2  0E08               	movlw	8
  5010  0077B4  5C01               	subwf	pinMode@pin^0,w,c
  5011  0077B6  B0D8               	btfsc	status,0,c
  5012  0077B8  EFE0  F03B         	goto	u1901
  5013  0077BC  EFE2  F03B         	goto	u1900
  5014  0077C0                     u1901:
  5015  0077C0  EF0C  F03C         	goto	l2803
  5016  0077C4                     u1900:
  5017  0077C4                     
  5018                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  5019  0077C4  5003               	movf	pinMode@type^0,w,c
  5020  0077C6  1004               	iorwf	(pinMode@type+1)^0,w,c
  5021  0077C8  B4D8               	btfsc	status,2,c
  5022  0077CA  EFE9  F03B         	goto	u1911
  5023  0077CE  EFEB  F03B         	goto	u1910
  5024  0077D2                     u1911:
  5025  0077D2  EFFB  F03B         	goto	l2801
  5026  0077D6                     u1910:
  5027  0077D6  C001  F005         	movff	pinMode@pin,??_pinMode
  5028  0077DA  0E01               	movlw	1
  5029  0077DC  6E06               	movwf	(??_pinMode+1)^0,c
  5030  0077DE  2A05               	incf	??_pinMode^0,f,c
  5031  0077E0  EFF4  F03B         	goto	u1924
  5032  0077E4                     u1925:
  5033  0077E4  90D8               	bcf	status,0,c
  5034  0077E6  3606               	rlcf	(??_pinMode+1)^0,f,c
  5035  0077E8                     u1924:
  5036  0077E8  2E05               	decfsz	??_pinMode^0,f,c
  5037  0077EA  EFF2  F03B         	goto	u1925
  5038  0077EE  5006               	movf	(??_pinMode+1)^0,w,c
  5039  0077F0  1292               	iorwf	146,f,c	;volatile
  5040  0077F2  EFFA  F03C         	goto	l339
  5041  0077F6                     l2801:
  5042  0077F6  C001  F005         	movff	pinMode@pin,??_pinMode
  5043  0077FA  0E01               	movlw	1
  5044  0077FC  6E06               	movwf	(??_pinMode+1)^0,c
  5045  0077FE  2A05               	incf	??_pinMode^0,f,c
  5046  007800  EF04  F03C         	goto	u1934
  5047  007804                     u1935:
  5048  007804  90D8               	bcf	status,0,c
  5049  007806  3606               	rlcf	(??_pinMode+1)^0,f,c
  5050  007808                     u1934:
  5051  007808  2E05               	decfsz	??_pinMode^0,f,c
  5052  00780A  EF02  F03C         	goto	u1935
  5053  00780E  5006               	movf	(??_pinMode+1)^0,w,c
  5054  007810  0AFF               	xorlw	255
  5055  007812  1692               	andwf	146,f,c	;volatile
  5056  007814  EFFA  F03C         	goto	l339
  5057  007818                     l2803:
  5058  007818  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  5059  00781A  EF1A  F03C         	goto	u1940
  5060  00781E  5002               	movf	(pinMode@pin+1)^0,w,c
  5061  007820  E107               	bnz	u1941
  5062  007822  0E10               	movlw	16
  5063  007824  5C01               	subwf	pinMode@pin^0,w,c
  5064  007826  B0D8               	btfsc	status,0,c
  5065  007828  EF18  F03C         	goto	u1941
  5066  00782C  EF1A  F03C         	goto	u1940
  5067  007830                     u1941:
  5068  007830  EF48  F03C         	goto	l2811
  5069  007834                     u1940:
  5070  007834                     
  5071                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  5072  007834  5003               	movf	pinMode@type^0,w,c
  5073  007836  1004               	iorwf	(pinMode@type+1)^0,w,c
  5074  007838  B4D8               	btfsc	status,2,c
  5075  00783A  EF21  F03C         	goto	u1951
  5076  00783E  EF23  F03C         	goto	u1950
  5077  007842                     u1951:
  5078  007842  EF35  F03C         	goto	l2809
  5079  007846                     u1950:
  5080  007846  C001  F005         	movff	pinMode@pin,??_pinMode
  5081  00784A  0EF8               	movlw	-8
  5082  00784C  2605               	addwf	??_pinMode^0,f,c
  5083  00784E  0E01               	movlw	1
  5084  007850  6E06               	movwf	(??_pinMode+1)^0,c
  5085  007852  2A05               	incf	??_pinMode^0,f,c
  5086  007854  EF2E  F03C         	goto	u1964
  5087  007858                     u1965:
  5088  007858  90D8               	bcf	status,0,c
  5089  00785A  3606               	rlcf	(??_pinMode+1)^0,f,c
  5090  00785C                     u1964:
  5091  00785C  2E05               	decfsz	??_pinMode^0,f,c
  5092  00785E  EF2C  F03C         	goto	u1965
  5093  007862  5006               	movf	(??_pinMode+1)^0,w,c
  5094  007864  1293               	iorwf	147,f,c	;volatile
  5095  007866  EFFA  F03C         	goto	l339
  5096  00786A                     l2809:
  5097  00786A  C001  F005         	movff	pinMode@pin,??_pinMode
  5098  00786E  0EF8               	movlw	-8
  5099  007870  2605               	addwf	??_pinMode^0,f,c
  5100  007872  0E01               	movlw	1
  5101  007874  6E06               	movwf	(??_pinMode+1)^0,c
  5102  007876  2A05               	incf	??_pinMode^0,f,c
  5103  007878  EF40  F03C         	goto	u1974
  5104  00787C                     u1975:
  5105  00787C  90D8               	bcf	status,0,c
  5106  00787E  3606               	rlcf	(??_pinMode+1)^0,f,c
  5107  007880                     u1974:
  5108  007880  2E05               	decfsz	??_pinMode^0,f,c
  5109  007882  EF3E  F03C         	goto	u1975
  5110  007886  5006               	movf	(??_pinMode+1)^0,w,c
  5111  007888  0AFF               	xorlw	255
  5112  00788A  1693               	andwf	147,f,c	;volatile
  5113  00788C  EFFA  F03C         	goto	l339
  5114  007890                     l2811:
  5115  007890  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  5116  007892  EF56  F03C         	goto	u1980
  5117  007896  5002               	movf	(pinMode@pin+1)^0,w,c
  5118  007898  E107               	bnz	u1981
  5119  00789A  0E18               	movlw	24
  5120  00789C  5C01               	subwf	pinMode@pin^0,w,c
  5121  00789E  B0D8               	btfsc	status,0,c
  5122  0078A0  EF54  F03C         	goto	u1981
  5123  0078A4  EF56  F03C         	goto	u1980
  5124  0078A8                     u1981:
  5125  0078A8  EF84  F03C         	goto	l2819
  5126  0078AC                     u1980:
  5127  0078AC                     
  5128                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  5129  0078AC  5003               	movf	pinMode@type^0,w,c
  5130  0078AE  1004               	iorwf	(pinMode@type+1)^0,w,c
  5131  0078B0  B4D8               	btfsc	status,2,c
  5132  0078B2  EF5D  F03C         	goto	u1991
  5133  0078B6  EF5F  F03C         	goto	u1990
  5134  0078BA                     u1991:
  5135  0078BA  EF71  F03C         	goto	l2817
  5136  0078BE                     u1990:
  5137  0078BE  C001  F005         	movff	pinMode@pin,??_pinMode
  5138  0078C2  0EF0               	movlw	-16
  5139  0078C4  2605               	addwf	??_pinMode^0,f,c
  5140  0078C6  0E01               	movlw	1
  5141  0078C8  6E06               	movwf	(??_pinMode+1)^0,c
  5142  0078CA  2A05               	incf	??_pinMode^0,f,c
  5143  0078CC  EF6A  F03C         	goto	u2004
  5144  0078D0                     u2005:
  5145  0078D0  90D8               	bcf	status,0,c
  5146  0078D2  3606               	rlcf	(??_pinMode+1)^0,f,c
  5147  0078D4                     u2004:
  5148  0078D4  2E05               	decfsz	??_pinMode^0,f,c
  5149  0078D6  EF68  F03C         	goto	u2005
  5150  0078DA  5006               	movf	(??_pinMode+1)^0,w,c
  5151  0078DC  1294               	iorwf	148,f,c	;volatile
  5152  0078DE  EFFA  F03C         	goto	l339
  5153  0078E2                     l2817:
  5154  0078E2  C001  F005         	movff	pinMode@pin,??_pinMode
  5155  0078E6  0EF0               	movlw	-16
  5156  0078E8  2605               	addwf	??_pinMode^0,f,c
  5157  0078EA  0E01               	movlw	1
  5158  0078EC  6E06               	movwf	(??_pinMode+1)^0,c
  5159  0078EE  2A05               	incf	??_pinMode^0,f,c
  5160  0078F0  EF7C  F03C         	goto	u2014
  5161  0078F4                     u2015:
  5162  0078F4  90D8               	bcf	status,0,c
  5163  0078F6  3606               	rlcf	(??_pinMode+1)^0,f,c
  5164  0078F8                     u2014:
  5165  0078F8  2E05               	decfsz	??_pinMode^0,f,c
  5166  0078FA  EF7A  F03C         	goto	u2015
  5167  0078FE  5006               	movf	(??_pinMode+1)^0,w,c
  5168  007900  0AFF               	xorlw	255
  5169  007902  1694               	andwf	148,f,c	;volatile
  5170  007904  EFFA  F03C         	goto	l339
  5171  007908                     l2819:
  5172  007908  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  5173  00790A  EF92  F03C         	goto	u2020
  5174  00790E  5002               	movf	(pinMode@pin+1)^0,w,c
  5175  007910  E107               	bnz	u2021
  5176  007912  0E20               	movlw	32
  5177  007914  5C01               	subwf	pinMode@pin^0,w,c
  5178  007916  B0D8               	btfsc	status,0,c
  5179  007918  EF90  F03C         	goto	u2021
  5180  00791C  EF92  F03C         	goto	u2020
  5181  007920                     u2021:
  5182  007920  EFC0  F03C         	goto	l2827
  5183  007924                     u2020:
  5184  007924                     
  5185                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
  5186  007924  5003               	movf	pinMode@type^0,w,c
  5187  007926  1004               	iorwf	(pinMode@type+1)^0,w,c
  5188  007928  B4D8               	btfsc	status,2,c
  5189  00792A  EF99  F03C         	goto	u2031
  5190  00792E  EF9B  F03C         	goto	u2030
  5191  007932                     u2031:
  5192  007932  EFAD  F03C         	goto	l2825
  5193  007936                     u2030:
  5194  007936  C001  F005         	movff	pinMode@pin,??_pinMode
  5195  00793A  0EE8               	movlw	-24
  5196  00793C  2605               	addwf	??_pinMode^0,f,c
  5197  00793E  0E01               	movlw	1
  5198  007940  6E06               	movwf	(??_pinMode+1)^0,c
  5199  007942  2A05               	incf	??_pinMode^0,f,c
  5200  007944  EFA6  F03C         	goto	u2044
  5201  007948                     u2045:
  5202  007948  90D8               	bcf	status,0,c
  5203  00794A  3606               	rlcf	(??_pinMode+1)^0,f,c
  5204  00794C                     u2044:
  5205  00794C  2E05               	decfsz	??_pinMode^0,f,c
  5206  00794E  EFA4  F03C         	goto	u2045
  5207  007952  5006               	movf	(??_pinMode+1)^0,w,c
  5208  007954  1295               	iorwf	149,f,c	;volatile
  5209  007956  EFFA  F03C         	goto	l339
  5210  00795A                     l2825:
  5211  00795A  C001  F005         	movff	pinMode@pin,??_pinMode
  5212  00795E  0EE8               	movlw	-24
  5213  007960  2605               	addwf	??_pinMode^0,f,c
  5214  007962  0E01               	movlw	1
  5215  007964  6E06               	movwf	(??_pinMode+1)^0,c
  5216  007966  2A05               	incf	??_pinMode^0,f,c
  5217  007968  EFB8  F03C         	goto	u2054
  5218  00796C                     u2055:
  5219  00796C  90D8               	bcf	status,0,c
  5220  00796E  3606               	rlcf	(??_pinMode+1)^0,f,c
  5221  007970                     u2054:
  5222  007970  2E05               	decfsz	??_pinMode^0,f,c
  5223  007972  EFB6  F03C         	goto	u2055
  5224  007976  5006               	movf	(??_pinMode+1)^0,w,c
  5225  007978  0AFF               	xorlw	255
  5226  00797A  1695               	andwf	149,f,c	;volatile
  5227  00797C  EFFA  F03C         	goto	l339
  5228  007980                     l2827:
  5229  007980  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  5230  007982  EFCE  F03C         	goto	u2060
  5231  007986  5002               	movf	(pinMode@pin+1)^0,w,c
  5232  007988  E107               	bnz	u2061
  5233  00798A  0E28               	movlw	40
  5234  00798C  5C01               	subwf	pinMode@pin^0,w,c
  5235  00798E  B0D8               	btfsc	status,0,c
  5236  007990  EFCC  F03C         	goto	u2061
  5237  007994  EFCE  F03C         	goto	u2060
  5238  007998                     u2061:
  5239  007998  EFFA  F03C         	goto	l339
  5240  00799C                     u2060:
  5241  00799C                     
  5242                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
  5243  00799C  5003               	movf	pinMode@type^0,w,c
  5244  00799E  1004               	iorwf	(pinMode@type+1)^0,w,c
  5245  0079A0  B4D8               	btfsc	status,2,c
  5246  0079A2  EFD5  F03C         	goto	u2071
  5247  0079A6  EFD7  F03C         	goto	u2070
  5248  0079AA                     u2071:
  5249  0079AA  EFE9  F03C         	goto	l2833
  5250  0079AE                     u2070:
  5251  0079AE  C001  F005         	movff	pinMode@pin,??_pinMode
  5252  0079B2  0EE0               	movlw	-32
  5253  0079B4  2605               	addwf	??_pinMode^0,f,c
  5254  0079B6  0E01               	movlw	1
  5255  0079B8  6E06               	movwf	(??_pinMode+1)^0,c
  5256  0079BA  2A05               	incf	??_pinMode^0,f,c
  5257  0079BC  EFE2  F03C         	goto	u2084
  5258  0079C0                     u2085:
  5259  0079C0  90D8               	bcf	status,0,c
  5260  0079C2  3606               	rlcf	(??_pinMode+1)^0,f,c
  5261  0079C4                     u2084:
  5262  0079C4  2E05               	decfsz	??_pinMode^0,f,c
  5263  0079C6  EFE0  F03C         	goto	u2085
  5264  0079CA  5006               	movf	(??_pinMode+1)^0,w,c
  5265  0079CC  1296               	iorwf	150,f,c	;volatile
  5266  0079CE  EFFA  F03C         	goto	l339
  5267  0079D2                     l2833:
  5268  0079D2  C001  F005         	movff	pinMode@pin,??_pinMode
  5269  0079D6  0EE0               	movlw	-32
  5270  0079D8  2605               	addwf	??_pinMode^0,f,c
  5271  0079DA  0E01               	movlw	1
  5272  0079DC  6E06               	movwf	(??_pinMode+1)^0,c
  5273  0079DE  2A05               	incf	??_pinMode^0,f,c
  5274  0079E0  EFF4  F03C         	goto	u2094
  5275  0079E4                     u2095:
  5276  0079E4  90D8               	bcf	status,0,c
  5277  0079E6  3606               	rlcf	(??_pinMode+1)^0,f,c
  5278  0079E8                     u2094:
  5279  0079E8  2E05               	decfsz	??_pinMode^0,f,c
  5280  0079EA  EFF2  F03C         	goto	u2095
  5281  0079EE  5006               	movf	(??_pinMode+1)^0,w,c
  5282  0079F0  0AFF               	xorlw	255
  5283  0079F2  1696               	andwf	150,f,c	;volatile
  5284  0079F4                     l339:
  5285  0079F4  0012               	return		;funcret
  5286  0079F6                     __end_of_pinMode:
  5287                           	callstack 0
  5288                           
  5289 ;; *************** function _MostraDisplay *****************
  5290 ;; Defined at:
  5291 ;;		line 409 in file "main.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;		None
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;		None
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      void 
  5298 ;; Registers used:
  5299 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5305 ;;      Params:         0       0       0       0       0       0       0
  5306 ;;      Locals:         8       0       0       0       0       0       0
  5307 ;;      Temps:          0       0       0       0       0       0       0
  5308 ;;      Totals:         8       0       0       0       0       0       0
  5309 ;;Total ram usage:        8 bytes
  5310 ;; Hardware stack levels used: 1
  5311 ;; Hardware stack levels required when called: 6
  5312 ;; This function calls:
  5313 ;;		___fleq
  5314 ;;		___fltol
  5315 ;;		___lldiv
  5316 ;;		___llmod
  5317 ;;		_lcdCommand
  5318 ;;		_lcdNumber
  5319 ;;		_lcdString
  5320 ;;		_ssdDigit
  5321 ;; This function is called by:
  5322 ;;		_main
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           	psect	text28
  5327  007C4E                     __ptext28:
  5328                           	callstack 0
  5329  007C4E                     _MostraDisplay:
  5330                           	callstack 24
  5331  007C4E                     
  5332                           ;main.c: 410:     lcdCommand(0x01);
  5333  007C4E  0E01               	movlw	1
  5334  007C50  ECB3  F02E         	call	_lcdCommand
  5335                           
  5336                           ;main.c: 411:     if (fmStored == fm) {
  5337  007C54  C02E  F001         	movff	_fmStored,___fleq@ff1
  5338  007C58  C02F  F002         	movff	_fmStored+1,___fleq@ff1+1
  5339  007C5C  C030  F003         	movff	_fmStored+2,___fleq@ff1+2
  5340  007C60  C031  F004         	movff	_fmStored+3,___fleq@ff1+3
  5341  007C64  C036  F005         	movff	_fm,___fleq@ff2
  5342  007C68  C037  F006         	movff	_fm+1,___fleq@ff2+1
  5343  007C6C  C038  F007         	movff	_fm+2,___fleq@ff2+2
  5344  007C70  C039  F008         	movff	_fm+3,___fleq@ff2+3
  5345  007C74  EC43  F032         	call	___fleq	;wreg free
  5346  007C78  A0D8               	btfss	status,0,c
  5347  007C7A  EF41  F03E         	goto	u2671
  5348  007C7E  EF43  F03E         	goto	u2670
  5349  007C82                     u2671:
  5350  007C82  EF45  F03E         	goto	l3279
  5351  007C86                     u2670:
  5352  007C86  EF90  F03E         	goto	l3299
  5353  007C8A                     l3279:
  5354                           
  5355                           ;main.c: 413:         if (freq == 'f') {
  5356  007C8A  0E66               	movlw	102
  5357  007C8C  184F               	xorwf	_freq^0,w,c
  5358  007C8E  A4D8               	btfss	status,2,c
  5359  007C90  EF4C  F03E         	goto	u2681
  5360  007C94  EF4E  F03E         	goto	u2680
  5361  007C98                     u2681:
  5362  007C98  EF6C  F03E         	goto	l3289
  5363  007C9C                     u2680:
  5364  007C9C                     
  5365                           ;main.c: 414:             lcdCommand(0x80);
  5366  007C9C  0E80               	movlw	128
  5367  007C9E  ECB3  F02E         	call	_lcdCommand
  5368  007CA2                     
  5369                           ;main.c: 415:             lcdString("Radio FM");
  5370  007CA2  0EE8               	movlw	low STR_30
  5371  007CA4  6E0F               	movwf	lcdString@msg^0,c
  5372  007CA6  0E7F               	movlw	high STR_30
  5373  007CA8  6E10               	movwf	(lcdString@msg+1)^0,c
  5374  007CAA  EC09  F030         	call	_lcdString	;wreg free
  5375  007CAE                     
  5376                           ;main.c: 416:             lcdCommand(0xC0);
  5377  007CAE  0EC0               	movlw	192
  5378  007CB0  ECB3  F02E         	call	_lcdCommand
  5379  007CB4                     
  5380                           ;main.c: 417:             lcdNumber(fm);
  5381  007CB4  C036  F001         	movff	_fm,___fltol@f1
  5382  007CB8  C037  F002         	movff	_fm+1,___fltol@f1+1
  5383  007CBC  C038  F003         	movff	_fm+2,___fltol@f1+2
  5384  007CC0  C039  F004         	movff	_fm+3,___fltol@f1+3
  5385  007CC4  ECEA  F034         	call	___fltol	;wreg free
  5386  007CC8  C001  F00F         	movff	?___fltol,lcdNumber@value
  5387  007CCC  C002  F010         	movff	?___fltol+1,lcdNumber@value+1
  5388  007CD0  ECB8  F030         	call	_lcdNumber	;wreg free
  5389                           
  5390                           ;main.c: 418:         } else {
  5391  007CD4  EF88  F03E         	goto	l3297
  5392  007CD8                     l3289:
  5393                           
  5394                           ;main.c: 419:             lcdCommand(0x80);
  5395  007CD8  0E80               	movlw	128
  5396  007CDA  ECB3  F02E         	call	_lcdCommand
  5397  007CDE                     
  5398                           ;main.c: 420:             lcdString("Radio AM");
  5399  007CDE  0EDF               	movlw	low STR_31
  5400  007CE0  6E0F               	movwf	lcdString@msg^0,c
  5401  007CE2  0E7F               	movlw	high STR_31
  5402  007CE4  6E10               	movwf	(lcdString@msg+1)^0,c
  5403  007CE6  EC09  F030         	call	_lcdString	;wreg free
  5404  007CEA                     
  5405                           ;main.c: 421:             lcdCommand(0xC0);
  5406  007CEA  0EC0               	movlw	192
  5407  007CEC  ECB3  F02E         	call	_lcdCommand
  5408  007CF0                     
  5409                           ;main.c: 422:             lcdNumber(am);
  5410  007CF0  C032  F001         	movff	_am,___fltol@f1
  5411  007CF4  C033  F002         	movff	_am+1,___fltol@f1+1
  5412  007CF8  C034  F003         	movff	_am+2,___fltol@f1+2
  5413  007CFC  C035  F004         	movff	_am+3,___fltol@f1+3
  5414  007D00  ECEA  F034         	call	___fltol	;wreg free
  5415  007D04  C001  F00F         	movff	?___fltol,lcdNumber@value
  5416  007D08  C002  F010         	movff	?___fltol+1,lcdNumber@value+1
  5417  007D0C  ECB8  F030         	call	_lcdNumber	;wreg free
  5418  007D10                     l3297:
  5419                           
  5420                           ;main.c: 424:         fmStored = fm;
  5421  007D10  C036  F02E         	movff	_fm,_fmStored
  5422  007D14  C037  F02F         	movff	_fm+1,_fmStored+1
  5423  007D18  C038  F030         	movff	_fm+2,_fmStored+2
  5424  007D1C  C039  F031         	movff	_fm+3,_fmStored+3
  5425  007D20                     l3299:
  5426                           
  5427                           ;main.c: 427:     ssdDigit(((((hora / 360000) % 24) / 10) + 48), 1);
  5428  007D20  0E18               	movlw	24
  5429  007D22  6E12               	movwf	___llmod@divisor^0,c
  5430  007D24  0E00               	movlw	0
  5431  007D26  6E13               	movwf	(___llmod@divisor+1)^0,c
  5432  007D28  0E00               	movlw	0
  5433  007D2A  6E14               	movwf	(___llmod@divisor+2)^0,c
  5434  007D2C  0E00               	movlw	0
  5435  007D2E  6E15               	movwf	(___llmod@divisor+3)^0,c
  5436  007D30  0E40               	movlw	64
  5437  007D32  6E05               	movwf	___lldiv@divisor^0,c
  5438  007D34  0E7E               	movlw	126
  5439  007D36  6E06               	movwf	(___lldiv@divisor+1)^0,c
  5440  007D38  0E05               	movlw	5
  5441  007D3A  6E07               	movwf	(___lldiv@divisor+2)^0,c
  5442  007D3C  0E00               	movlw	0
  5443  007D3E  6E08               	movwf	(___lldiv@divisor+3)^0,c
  5444  007D40  C04A  F001         	movff	_hora,___lldiv@dividend
  5445  007D44  C04B  F002         	movff	_hora+1,___lldiv@dividend+1
  5446  007D48  C04C  F003         	movff	_hora+2,___lldiv@dividend+2
  5447  007D4C  C04D  F004         	movff	_hora+3,___lldiv@dividend+3
  5448  007D50  ECF1  F031         	call	___lldiv	;wreg free
  5449  007D54  C001  F00E         	movff	?___lldiv,___llmod@dividend
  5450  007D58  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  5451  007D5C  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  5452  007D60  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  5453  007D64  ECAD  F031         	call	___llmod	;wreg free
  5454  007D68  C00E  F019         	movff	?___llmod,_MostraDisplay$1195
  5455  007D6C  C00F  F01A         	movff	?___llmod+1,_MostraDisplay$1195+1
  5456  007D70  C010  F01B         	movff	?___llmod+2,_MostraDisplay$1195+2
  5457  007D74  C011  F01C         	movff	?___llmod+3,_MostraDisplay$1195+3
  5458  007D78                     
  5459                           ;main.c: 427:     ssdDigit(((((hora / 360000) % 24) / 10) + 48), 1);
  5460  007D78  0E01               	movlw	1
  5461  007D7A  6E17               	movwf	ssdDigit@pos^0,c
  5462  007D7C  C019  F001         	movff	_MostraDisplay$1195,___lldiv@dividend
  5463  007D80  C01A  F002         	movff	_MostraDisplay$1195+1,___lldiv@dividend+1
  5464  007D84  C01B  F003         	movff	_MostraDisplay$1195+2,___lldiv@dividend+2
  5465  007D88  C01C  F004         	movff	_MostraDisplay$1195+3,___lldiv@dividend+3
  5466  007D8C  0E0A               	movlw	10
  5467  007D8E  6E05               	movwf	___lldiv@divisor^0,c
  5468  007D90  0E00               	movlw	0
  5469  007D92  6E06               	movwf	(___lldiv@divisor+1)^0,c
  5470  007D94  0E00               	movlw	0
  5471  007D96  6E07               	movwf	(___lldiv@divisor+2)^0,c
  5472  007D98  0E00               	movlw	0
  5473  007D9A  6E08               	movwf	(___lldiv@divisor+3)^0,c
  5474  007D9C  ECF1  F031         	call	___lldiv	;wreg free
  5475  007DA0  5001               	movf	?___lldiv^0,w,c
  5476  007DA2  0F30               	addlw	48
  5477  007DA4  EC5F  F030         	call	_ssdDigit
  5478  007DA8                     
  5479                           ;main.c: 428:     ssdDigit(((((hora / 360000) % 24) % 10) + 48), 2);
  5480  007DA8  0E18               	movlw	24
  5481  007DAA  6E12               	movwf	___llmod@divisor^0,c
  5482  007DAC  0E00               	movlw	0
  5483  007DAE  6E13               	movwf	(___llmod@divisor+1)^0,c
  5484  007DB0  0E00               	movlw	0
  5485  007DB2  6E14               	movwf	(___llmod@divisor+2)^0,c
  5486  007DB4  0E00               	movlw	0
  5487  007DB6  6E15               	movwf	(___llmod@divisor+3)^0,c
  5488  007DB8  0E40               	movlw	64
  5489  007DBA  6E05               	movwf	___lldiv@divisor^0,c
  5490  007DBC  0E7E               	movlw	126
  5491  007DBE  6E06               	movwf	(___lldiv@divisor+1)^0,c
  5492  007DC0  0E05               	movlw	5
  5493  007DC2  6E07               	movwf	(___lldiv@divisor+2)^0,c
  5494  007DC4  0E00               	movlw	0
  5495  007DC6  6E08               	movwf	(___lldiv@divisor+3)^0,c
  5496  007DC8  C04A  F001         	movff	_hora,___lldiv@dividend
  5497  007DCC  C04B  F002         	movff	_hora+1,___lldiv@dividend+1
  5498  007DD0  C04C  F003         	movff	_hora+2,___lldiv@dividend+2
  5499  007DD4  C04D  F004         	movff	_hora+3,___lldiv@dividend+3
  5500  007DD8  ECF1  F031         	call	___lldiv	;wreg free
  5501  007DDC  C001  F00E         	movff	?___lldiv,___llmod@dividend
  5502  007DE0  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  5503  007DE4  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  5504  007DE8  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  5505  007DEC  ECAD  F031         	call	___llmod	;wreg free
  5506  007DF0  C00E  F01D         	movff	?___llmod,_MostraDisplay$1196
  5507  007DF4  C00F  F01E         	movff	?___llmod+1,_MostraDisplay$1196+1
  5508  007DF8  C010  F01F         	movff	?___llmod+2,_MostraDisplay$1196+2
  5509  007DFC  C011  F020         	movff	?___llmod+3,_MostraDisplay$1196+3
  5510  007E00                     
  5511                           ;main.c: 428:     ssdDigit(((((hora / 360000) % 24) % 10) + 48), 2);
  5512  007E00  0E02               	movlw	2
  5513  007E02  6E17               	movwf	ssdDigit@pos^0,c
  5514  007E04  C01D  F00E         	movff	_MostraDisplay$1196,___llmod@dividend
  5515  007E08  C01E  F00F         	movff	_MostraDisplay$1196+1,___llmod@dividend+1
  5516  007E0C  C01F  F010         	movff	_MostraDisplay$1196+2,___llmod@dividend+2
  5517  007E10  C020  F011         	movff	_MostraDisplay$1196+3,___llmod@dividend+3
  5518  007E14  0E0A               	movlw	10
  5519  007E16  6E12               	movwf	___llmod@divisor^0,c
  5520  007E18  0E00               	movlw	0
  5521  007E1A  6E13               	movwf	(___llmod@divisor+1)^0,c
  5522  007E1C  0E00               	movlw	0
  5523  007E1E  6E14               	movwf	(___llmod@divisor+2)^0,c
  5524  007E20  0E00               	movlw	0
  5525  007E22  6E15               	movwf	(___llmod@divisor+3)^0,c
  5526  007E24  ECAD  F031         	call	___llmod	;wreg free
  5527  007E28  500E               	movf	?___llmod^0,w,c
  5528  007E2A  0F30               	addlw	48
  5529  007E2C  EC5F  F030         	call	_ssdDigit
  5530  007E30                     
  5531                           ;main.c: 429:     ssdDigit(((hora / 60000) % 6 + 48), 3);
  5532  007E30  0E03               	movlw	3
  5533  007E32  6E17               	movwf	ssdDigit@pos^0,c
  5534  007E34  0E60               	movlw	96
  5535  007E36  6E05               	movwf	___lldiv@divisor^0,c
  5536  007E38  0EEA               	movlw	234
  5537  007E3A  6E06               	movwf	(___lldiv@divisor+1)^0,c
  5538  007E3C  0E00               	movlw	0
  5539  007E3E  6E07               	movwf	(___lldiv@divisor+2)^0,c
  5540  007E40  0E00               	movlw	0
  5541  007E42  6E08               	movwf	(___lldiv@divisor+3)^0,c
  5542  007E44  C04A  F001         	movff	_hora,___lldiv@dividend
  5543  007E48  C04B  F002         	movff	_hora+1,___lldiv@dividend+1
  5544  007E4C  C04C  F003         	movff	_hora+2,___lldiv@dividend+2
  5545  007E50  C04D  F004         	movff	_hora+3,___lldiv@dividend+3
  5546  007E54  ECF1  F031         	call	___lldiv	;wreg free
  5547  007E58  C001  F00E         	movff	?___lldiv,___llmod@dividend
  5548  007E5C  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  5549  007E60  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  5550  007E64  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  5551  007E68  0E06               	movlw	6
  5552  007E6A  6E12               	movwf	___llmod@divisor^0,c
  5553  007E6C  0E00               	movlw	0
  5554  007E6E  6E13               	movwf	(___llmod@divisor+1)^0,c
  5555  007E70  0E00               	movlw	0
  5556  007E72  6E14               	movwf	(___llmod@divisor+2)^0,c
  5557  007E74  0E00               	movlw	0
  5558  007E76  6E15               	movwf	(___llmod@divisor+3)^0,c
  5559  007E78  ECAD  F031         	call	___llmod	;wreg free
  5560  007E7C  500E               	movf	?___llmod^0,w,c
  5561  007E7E  0F30               	addlw	48
  5562  007E80  EC5F  F030         	call	_ssdDigit
  5563  007E84                     
  5564                           ;main.c: 430:     ssdDigit(((hora / 6000) % 10 + 48), 4);
  5565  007E84  0E04               	movlw	4
  5566  007E86  6E17               	movwf	ssdDigit@pos^0,c
  5567  007E88  0E70               	movlw	112
  5568  007E8A  6E05               	movwf	___lldiv@divisor^0,c
  5569  007E8C  0E17               	movlw	23
  5570  007E8E  6E06               	movwf	(___lldiv@divisor+1)^0,c
  5571  007E90  0E00               	movlw	0
  5572  007E92  6E07               	movwf	(___lldiv@divisor+2)^0,c
  5573  007E94  0E00               	movlw	0
  5574  007E96  6E08               	movwf	(___lldiv@divisor+3)^0,c
  5575  007E98  C04A  F001         	movff	_hora,___lldiv@dividend
  5576  007E9C  C04B  F002         	movff	_hora+1,___lldiv@dividend+1
  5577  007EA0  C04C  F003         	movff	_hora+2,___lldiv@dividend+2
  5578  007EA4  C04D  F004         	movff	_hora+3,___lldiv@dividend+3
  5579  007EA8  ECF1  F031         	call	___lldiv	;wreg free
  5580  007EAC  C001  F00E         	movff	?___lldiv,___llmod@dividend
  5581  007EB0  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  5582  007EB4  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  5583  007EB8  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  5584  007EBC  0E0A               	movlw	10
  5585  007EBE  6E12               	movwf	___llmod@divisor^0,c
  5586  007EC0  0E00               	movlw	0
  5587  007EC2  6E13               	movwf	(___llmod@divisor+1)^0,c
  5588  007EC4  0E00               	movlw	0
  5589  007EC6  6E14               	movwf	(___llmod@divisor+2)^0,c
  5590  007EC8  0E00               	movlw	0
  5591  007ECA  6E15               	movwf	(___llmod@divisor+3)^0,c
  5592  007ECC  ECAD  F031         	call	___llmod	;wreg free
  5593  007ED0  500E               	movf	?___llmod^0,w,c
  5594  007ED2  0F30               	addlw	48
  5595  007ED4  EC5F  F030         	call	_ssdDigit
  5596  007ED8  0012               	return		;funcret
  5597  007EDA                     __end_of_MostraDisplay:
  5598                           	callstack 0
  5599                           
  5600 ;; *************** function _ssdDigit *****************
  5601 ;; Defined at:
  5602 ;;		line 34 in file "ssd.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;  val             1    wreg     unsigned char 
  5605 ;;  pos             1   22[COMRAM] unsigned char 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;  val             1   23[COMRAM] unsigned char 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  1    wreg      void 
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5617 ;;      Params:         1       0       0       0       0       0       0
  5618 ;;      Locals:         1       0       0       0       0       0       0
  5619 ;;      Temps:          0       0       0       0       0       0       0
  5620 ;;      Totals:         2       0       0       0       0       0       0
  5621 ;;Total ram usage:        2 bytes
  5622 ;; Hardware stack levels used: 1
  5623 ;; This function calls:
  5624 ;;		Nothing
  5625 ;; This function is called by:
  5626 ;;		_MostraDisplay
  5627 ;;		_main
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           	psect	text29
  5632  0060BE                     __ptext29:
  5633                           	callstack 0
  5634  0060BE                     _ssdDigit:
  5635                           	callstack 30
  5636                           
  5637                           ;incstack = 0
  5638                           ;ssdDigit@val stored from wreg
  5639  0060BE  6E18               	movwf	ssdDigit@val^0,c
  5640  0060C0                     
  5641                           ;ssd.c: 35:     if (pos == 0) {
  5642  0060C0  5017               	movf	ssdDigit@pos^0,w,c
  5643  0060C2  A4D8               	btfss	status,2,c
  5644  0060C4  EF66  F030         	goto	u2331
  5645  0060C8  EF68  F030         	goto	u2330
  5646  0060CC                     u2331:
  5647  0060CC  EF6A  F030         	goto	l3065
  5648  0060D0                     u2330:
  5649  0060D0                     
  5650                           ;ssd.c: 36:         v0 = val;
  5651  0060D0  C018  F047         	movff	ssdDigit@val,_v0
  5652  0060D4                     l3065:
  5653                           
  5654                           ;ssd.c: 38:     if (pos == 1) {
  5655  0060D4  0417               	decf	ssdDigit@pos^0,w,c
  5656  0060D6  A4D8               	btfss	status,2,c
  5657  0060D8  EF70  F030         	goto	u2341
  5658  0060DC  EF72  F030         	goto	u2340
  5659  0060E0                     u2341:
  5660  0060E0  EF74  F030         	goto	l3069
  5661  0060E4                     u2340:
  5662  0060E4                     
  5663                           ;ssd.c: 39:         v1 = val;
  5664  0060E4  C018  F046         	movff	ssdDigit@val,_v1
  5665  0060E8                     l3069:
  5666                           
  5667                           ;ssd.c: 41:     if (pos == 2) {
  5668  0060E8  0E02               	movlw	2
  5669  0060EA  1817               	xorwf	ssdDigit@pos^0,w,c
  5670  0060EC  A4D8               	btfss	status,2,c
  5671  0060EE  EF7B  F030         	goto	u2351
  5672  0060F2  EF7D  F030         	goto	u2350
  5673  0060F6                     u2351:
  5674  0060F6  EF7F  F030         	goto	l3073
  5675  0060FA                     u2350:
  5676  0060FA                     
  5677                           ;ssd.c: 42:         v2 = val;
  5678  0060FA  C018  F045         	movff	ssdDigit@val,_v2
  5679  0060FE                     l3073:
  5680                           
  5681                           ;ssd.c: 44:     if (pos == 3) {
  5682  0060FE  0E03               	movlw	3
  5683  006100  1817               	xorwf	ssdDigit@pos^0,w,c
  5684  006102  A4D8               	btfss	status,2,c
  5685  006104  EF86  F030         	goto	u2361
  5686  006108  EF88  F030         	goto	u2360
  5687  00610C                     u2361:
  5688  00610C  EF8A  F030         	goto	l497
  5689  006110                     u2360:
  5690  006110                     
  5691                           ;ssd.c: 45:         v3 = val;
  5692  006110  C018  F044         	movff	ssdDigit@val,_v3
  5693  006114                     l497:
  5694  006114  0012               	return		;funcret
  5695  006116                     __end_of_ssdDigit:
  5696                           	callstack 0
  5697                           
  5698 ;; *************** function _lcdString *****************
  5699 ;; Defined at:
  5700 ;;		line 57 in file "lcd.c"
  5701 ;; Parameters:    Size  Location     Type
  5702 ;;  msg             2   14[COMRAM] PTR unsigned char 
  5703 ;;		 -> STR_31(9), STR_30(9), STR_29(13), STR_28(15), 
  5704 ;;		 -> STR_27(16), STR_26(16), STR_25(16), STR_24(16), 
  5705 ;;		 -> STR_23(16), STR_22(16), STR_21(16), STR_20(16), 
  5706 ;;		 -> STR_19(16), STR_18(16), STR_17(17), STR_16(16), 
  5707 ;;		 -> STR_15(16), STR_14(16), STR_13(16), STR_12(16), 
  5708 ;;		 -> STR_11(15), STR_10(18), STR_9(7), STR_8(15), 
  5709 ;;		 -> STR_7(15), STR_6(15), STR_5(15), STR_4(6), 
  5710 ;;		 -> STR_3(14), STR_2(17), STR_1(6), 
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;  i               2   18[COMRAM] int 
  5713 ;; Return value:  Size  Location     Type
  5714 ;;                  1    wreg      void 
  5715 ;; Registers used:
  5716 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5717 ;; Tracked objects:
  5718 ;;		On entry : 0/0
  5719 ;;		On exit  : 0/0
  5720 ;;		Unchanged: 0/0
  5721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5722 ;;      Params:         2       0       0       0       0       0       0
  5723 ;;      Locals:         2       0       0       0       0       0       0
  5724 ;;      Temps:          2       0       0       0       0       0       0
  5725 ;;      Totals:         6       0       0       0       0       0       0
  5726 ;;Total ram usage:        6 bytes
  5727 ;; Hardware stack levels used: 1
  5728 ;; Hardware stack levels required when called: 5
  5729 ;; This function calls:
  5730 ;;		_lcdChar
  5731 ;; This function is called by:
  5732 ;;		_radioConfig
  5733 ;;		_radioFreq
  5734 ;;		_alarmeHora
  5735 ;;		_horaConfig
  5736 ;;		_alarmeConfig
  5737 ;;		_menu
  5738 ;;		_compararAlarme
  5739 ;;		_MostraDisplay
  5740 ;;		_menuText
  5741 ;; This function uses a non-reentrant model
  5742 ;;
  5743                           
  5744                           	psect	text30
  5745  006012                     __ptext30:
  5746                           	callstack 0
  5747  006012                     _lcdString:
  5748                           	callstack 21
  5749  006012                     
  5750                           ;lcd.c: 58:  int i = 0;
  5751  006012  0E00               	movlw	0
  5752  006014  6E14               	movwf	(lcdString@i+1)^0,c
  5753  006016  0E00               	movlw	0
  5754  006018  6E13               	movwf	lcdString@i^0,c
  5755                           
  5756                           ;lcd.c: 59:  while (msg[i] != 0) {
  5757  00601A  EF1F  F030         	goto	l2463
  5758  00601E                     l2459:
  5759                           
  5760                           ;lcd.c: 60:   lcdChar(msg[i]);
  5761  00601E  5013               	movf	lcdString@i^0,w,c
  5762  006020  240F               	addwf	lcdString@msg^0,w,c
  5763  006022  6E11               	movwf	??_lcdString^0,c
  5764  006024  5014               	movf	(lcdString@i+1)^0,w,c
  5765  006026  2010               	addwfc	(lcdString@msg+1)^0,w,c
  5766  006028  6E12               	movwf	(??_lcdString+1)^0,c
  5767  00602A  C011  FFF6         	movff	??_lcdString,tblptrl
  5768  00602E  C012  FFF7         	movff	??_lcdString+1,tblptrh
  5769  006032                     	if	0	;tblptru may be non-zero
  5770  006032                     	endif
  5771  006032                     	if	0	;tblptru may be non-zero
  5772  006032                     	endif
  5773  006032  0008               	tblrd		*
  5774  006034  50F5               	movf	tablat,w,c
  5775  006036  ECC2  F02E         	call	_lcdChar
  5776  00603A                     
  5777                           ;lcd.c: 61:   i++;
  5778  00603A  4A13               	infsnz	lcdString@i^0,f,c
  5779  00603C  2A14               	incf	(lcdString@i+1)^0,f,c
  5780  00603E                     l2463:
  5781                           
  5782                           ;lcd.c: 59:  while (msg[i] != 0) {
  5783  00603E  5013               	movf	lcdString@i^0,w,c
  5784  006040  240F               	addwf	lcdString@msg^0,w,c
  5785  006042  6E11               	movwf	??_lcdString^0,c
  5786  006044  5014               	movf	(lcdString@i+1)^0,w,c
  5787  006046  2010               	addwfc	(lcdString@msg+1)^0,w,c
  5788  006048  6E12               	movwf	(??_lcdString+1)^0,c
  5789  00604A  C011  FFF6         	movff	??_lcdString,tblptrl
  5790  00604E  C012  FFF7         	movff	??_lcdString+1,tblptrh
  5791  006052                     	if	0	;tblptru may be non-zero
  5792  006052                     	endif
  5793  006052                     	if	0	;tblptru may be non-zero
  5794  006052                     	endif
  5795  006052  0008               	tblrd		*
  5796  006054  50F5               	movf	tablat,w,c
  5797  006056  0900               	iorlw	0
  5798  006058  A4D8               	btfss	status,2,c
  5799  00605A  EF31  F030         	goto	u1651
  5800  00605E  EF33  F030         	goto	u1650
  5801  006062                     u1651:
  5802  006062  EF0F  F030         	goto	l2459
  5803  006066                     u1650:
  5804  006066  0012               	return		;funcret
  5805  006068                     __end_of_lcdString:
  5806                           	callstack 0
  5807                           
  5808 ;; *************** function _lcdNumber *****************
  5809 ;; Defined at:
  5810 ;;		line 64 in file "lcd.c"
  5811 ;; Parameters:    Size  Location     Type
  5812 ;;  value           2   14[COMRAM] int 
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;  i               2   16[COMRAM] int 
  5815 ;; Return value:  Size  Location     Type
  5816 ;;                  1    wreg      void 
  5817 ;; Registers used:
  5818 ;;		wreg, status,2, status,0, cstack
  5819 ;; Tracked objects:
  5820 ;;		On entry : 0/0
  5821 ;;		On exit  : 0/0
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5824 ;;      Params:         2       0       0       0       0       0       0
  5825 ;;      Locals:         2       0       0       0       0       0       0
  5826 ;;      Temps:          0       0       0       0       0       0       0
  5827 ;;      Totals:         4       0       0       0       0       0       0
  5828 ;;Total ram usage:        4 bytes
  5829 ;; Hardware stack levels used: 1
  5830 ;; Hardware stack levels required when called: 5
  5831 ;; This function calls:
  5832 ;;		___awdiv
  5833 ;;		___awmod
  5834 ;;		_lcdChar
  5835 ;; This function is called by:
  5836 ;;		_MostraDisplay
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           	psect	text31
  5841  006170                     __ptext31:
  5842                           	callstack 0
  5843  006170                     _lcdNumber:
  5844                           	callstack 24
  5845  006170                     
  5846                           ;lcd.c: 65:  int i = 10000;
  5847  006170  0E27               	movlw	39
  5848  006172  6E12               	movwf	(lcdNumber@i+1)^0,c
  5849  006174  0E10               	movlw	16
  5850  006176  6E11               	movwf	lcdNumber@i^0,c
  5851                           
  5852                           ;lcd.c: 66:  while (i > 0) {
  5853  006178  EFE4  F030         	goto	l3059
  5854  00617C                     l3057:
  5855                           
  5856                           ;lcd.c: 67:   lcdChar((value / i) % 10 + 48);
  5857  00617C  C011  F003         	movff	lcdNumber@i,___awdiv@divisor
  5858  006180  C012  F004         	movff	lcdNumber@i+1,___awdiv@divisor+1
  5859  006184  C00F  F001         	movff	lcdNumber@value,___awdiv@dividend
  5860  006188  C010  F002         	movff	lcdNumber@value+1,___awdiv@dividend+1
  5861  00618C  EC9F  F033         	call	___awdiv	;wreg free
  5862  006190  C001  F009         	movff	?___awdiv,___awmod@dividend
  5863  006194  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  5864  006198  0E00               	movlw	0
  5865  00619A  6E0C               	movwf	(___awmod@divisor+1)^0,c
  5866  00619C  0E0A               	movlw	10
  5867  00619E  6E0B               	movwf	___awmod@divisor^0,c
  5868  0061A0  ECED  F032         	call	___awmod	;wreg free
  5869  0061A4  5009               	movf	?___awmod^0,w,c
  5870  0061A6  0F30               	addlw	48
  5871  0061A8  ECC2  F02E         	call	_lcdChar
  5872                           
  5873                           ;lcd.c: 68:   i /= 10;
  5874  0061AC  C011  F001         	movff	lcdNumber@i,___awdiv@dividend
  5875  0061B0  C012  F002         	movff	lcdNumber@i+1,___awdiv@dividend+1
  5876  0061B4  0E00               	movlw	0
  5877  0061B6  6E04               	movwf	(___awdiv@divisor+1)^0,c
  5878  0061B8  0E0A               	movlw	10
  5879  0061BA  6E03               	movwf	___awdiv@divisor^0,c
  5880  0061BC  EC9F  F033         	call	___awdiv	;wreg free
  5881  0061C0  C001  F011         	movff	?___awdiv,lcdNumber@i
  5882  0061C4  C002  F012         	movff	?___awdiv+1,lcdNumber@i+1
  5883  0061C8                     l3059:
  5884                           
  5885                           ;lcd.c: 66:  while (i > 0) {
  5886  0061C8  BE12               	btfsc	(lcdNumber@i+1)^0,7,c
  5887  0061CA  EFF1  F030         	goto	u2320
  5888  0061CE  5012               	movf	(lcdNumber@i+1)^0,w,c
  5889  0061D0  E106               	bnz	u2321
  5890  0061D2  0411               	decf	lcdNumber@i^0,w,c
  5891  0061D4  B0D8               	btfsc	status,0,c
  5892  0061D6  EFEF  F030         	goto	u2321
  5893  0061DA  EFF1  F030         	goto	u2320
  5894  0061DE                     u2321:
  5895  0061DE  EFBE  F030         	goto	l3057
  5896  0061E2                     u2320:
  5897  0061E2  0012               	return		;funcret
  5898  0061E4                     __end_of_lcdNumber:
  5899                           	callstack 0
  5900                           
  5901 ;; *************** function _lcdChar *****************
  5902 ;; Defined at:
  5903 ;;		line 52 in file "lcd.c"
  5904 ;; Parameters:    Size  Location     Type
  5905 ;;  value           1    wreg     unsigned char 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  value           1   13[COMRAM] unsigned char 
  5908 ;; Return value:  Size  Location     Type
  5909 ;;                  1    wreg      void 
  5910 ;; Registers used:
  5911 ;;		wreg, status,2, status,0, cstack
  5912 ;; Tracked objects:
  5913 ;;		On entry : 0/0
  5914 ;;		On exit  : 0/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5917 ;;      Params:         0       0       0       0       0       0       0
  5918 ;;      Locals:         1       0       0       0       0       0       0
  5919 ;;      Temps:          0       0       0       0       0       0       0
  5920 ;;      Totals:         1       0       0       0       0       0       0
  5921 ;;Total ram usage:        1 bytes
  5922 ;; Hardware stack levels used: 1
  5923 ;; Hardware stack levels required when called: 4
  5924 ;; This function calls:
  5925 ;;		_delayMicro
  5926 ;;		_pushByte
  5927 ;; This function is called by:
  5928 ;;		_lcdString
  5929 ;;		_lcdNumber
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           	psect	text32
  5934  005D84                     __ptext32:
  5935                           	callstack 0
  5936  005D84                     _lcdChar:
  5937                           	callstack 21
  5938                           
  5939                           ;incstack = 0
  5940                           ;lcdChar@value stored from wreg
  5941  005D84  6E0E               	movwf	lcdChar@value^0,c
  5942  005D86                     
  5943                           ;lcd.c: 53:  pushByte(value, 1);
  5944  005D86  0E00               	movlw	0
  5945  005D88  6E0B               	movwf	(pushByte@rs+1)^0,c
  5946  005D8A  0E01               	movlw	1
  5947  005D8C  6E0A               	movwf	pushByte@rs^0,c
  5948  005D8E  500E               	movf	lcdChar@value^0,w,c
  5949  005D90  EC8B  F030         	call	_pushByte
  5950  005D94                     
  5951                           ;lcd.c: 54:  delayMicro(80);
  5952  005D94  0E00               	movlw	0
  5953  005D96  6E02               	movwf	(delayMicro@a+1)^0,c
  5954  005D98  0E50               	movlw	80
  5955  005D9A  6E01               	movwf	delayMicro@a^0,c
  5956  005D9C  EC8F  F02E         	call	_delayMicro	;wreg free
  5957  005DA0  0012               	return		;funcret
  5958  005DA2                     __end_of_lcdChar:
  5959                           	callstack 0
  5960                           
  5961 ;; *************** function ___awmod *****************
  5962 ;; Defined at:
  5963 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;  dividend        2    8[COMRAM] int 
  5966 ;;  divisor         2   10[COMRAM] int 
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;  sign            1   13[COMRAM] unsigned char 
  5969 ;;  counter         1   12[COMRAM] unsigned char 
  5970 ;; Return value:  Size  Location     Type
  5971 ;;                  2    8[COMRAM] int 
  5972 ;; Registers used:
  5973 ;;		wreg, status,2, status,0
  5974 ;; Tracked objects:
  5975 ;;		On entry : 0/0
  5976 ;;		On exit  : 0/0
  5977 ;;		Unchanged: 0/0
  5978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5979 ;;      Params:         4       0       0       0       0       0       0
  5980 ;;      Locals:         2       0       0       0       0       0       0
  5981 ;;      Temps:          0       0       0       0       0       0       0
  5982 ;;      Totals:         6       0       0       0       0       0       0
  5983 ;;Total ram usage:        6 bytes
  5984 ;; Hardware stack levels used: 1
  5985 ;; This function calls:
  5986 ;;		Nothing
  5987 ;; This function is called by:
  5988 ;;		_lcdNumber
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           	psect	text33
  5993  0065DA                     __ptext33:
  5994                           	callstack 0
  5995  0065DA                     ___awmod:
  5996                           	callstack 28
  5997  0065DA  0E00               	movlw	0
  5998  0065DC  6E0E               	movwf	___awmod@sign^0,c
  5999  0065DE  BE0A               	btfsc	(___awmod@dividend+1)^0,7,c
  6000  0065E0  EFF6  F032         	goto	u2220
  6001  0065E4  EFF4  F032         	goto	u2221
  6002  0065E8                     u2221:
  6003  0065E8  EFFC  F032         	goto	l2931
  6004  0065EC                     u2220:
  6005  0065EC  6C09               	negf	___awmod@dividend^0,c
  6006  0065EE  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  6007  0065F0  B0D8               	btfsc	status,0,c
  6008  0065F2  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  6009  0065F4  0E01               	movlw	1
  6010  0065F6  6E0E               	movwf	___awmod@sign^0,c
  6011  0065F8                     l2931:
  6012  0065F8  BE0C               	btfsc	(___awmod@divisor+1)^0,7,c
  6013  0065FA  EF03  F033         	goto	u2230
  6014  0065FE  EF01  F033         	goto	u2231
  6015  006602                     u2231:
  6016  006602  EF07  F033         	goto	l2935
  6017  006606                     u2230:
  6018  006606  6C0B               	negf	___awmod@divisor^0,c
  6019  006608  1E0C               	comf	(___awmod@divisor+1)^0,f,c
  6020  00660A  B0D8               	btfsc	status,0,c
  6021  00660C  2A0C               	incf	(___awmod@divisor+1)^0,f,c
  6022  00660E                     l2935:
  6023  00660E  500B               	movf	___awmod@divisor^0,w,c
  6024  006610  100C               	iorwf	(___awmod@divisor+1)^0,w,c
  6025  006612  B4D8               	btfsc	status,2,c
  6026  006614  EF0E  F033         	goto	u2241
  6027  006618  EF10  F033         	goto	u2240
  6028  00661C                     u2241:
  6029  00661C  EF34  F033         	goto	l2951
  6030  006620                     u2240:
  6031  006620  0E01               	movlw	1
  6032  006622  6E0D               	movwf	___awmod@counter^0,c
  6033  006624  EF18  F033         	goto	l2941
  6034  006628                     l2939:
  6035  006628  90D8               	bcf	status,0,c
  6036  00662A  360B               	rlcf	___awmod@divisor^0,f,c
  6037  00662C  360C               	rlcf	(___awmod@divisor+1)^0,f,c
  6038  00662E  2A0D               	incf	___awmod@counter^0,f,c
  6039  006630                     l2941:
  6040  006630  AE0C               	btfss	(___awmod@divisor+1)^0,7,c
  6041  006632  EF1D  F033         	goto	u2251
  6042  006636  EF1F  F033         	goto	u2250
  6043  00663A                     u2251:
  6044  00663A  EF14  F033         	goto	l2939
  6045  00663E                     u2250:
  6046  00663E                     l2943:
  6047  00663E  500B               	movf	___awmod@divisor^0,w,c
  6048  006640  5C09               	subwf	___awmod@dividend^0,w,c
  6049  006642  500C               	movf	(___awmod@divisor+1)^0,w,c
  6050  006644  580A               	subwfb	(___awmod@dividend+1)^0,w,c
  6051  006646  A0D8               	btfss	status,0,c
  6052  006648  EF28  F033         	goto	u2261
  6053  00664C  EF2A  F033         	goto	u2260
  6054  006650                     u2261:
  6055  006650  EF2E  F033         	goto	l2947
  6056  006654                     u2260:
  6057  006654  500B               	movf	___awmod@divisor^0,w,c
  6058  006656  5E09               	subwf	___awmod@dividend^0,f,c
  6059  006658  500C               	movf	(___awmod@divisor+1)^0,w,c
  6060  00665A  5A0A               	subwfb	(___awmod@dividend+1)^0,f,c
  6061  00665C                     l2947:
  6062  00665C  90D8               	bcf	status,0,c
  6063  00665E  320C               	rrcf	(___awmod@divisor+1)^0,f,c
  6064  006660  320B               	rrcf	___awmod@divisor^0,f,c
  6065  006662  2E0D               	decfsz	___awmod@counter^0,f,c
  6066  006664  EF1F  F033         	goto	l2943
  6067  006668                     l2951:
  6068  006668  500E               	movf	___awmod@sign^0,w,c
  6069  00666A  B4D8               	btfsc	status,2,c
  6070  00666C  EF3A  F033         	goto	u2271
  6071  006670  EF3C  F033         	goto	u2270
  6072  006674                     u2271:
  6073  006674  EF40  F033         	goto	l2955
  6074  006678                     u2270:
  6075  006678  6C09               	negf	___awmod@dividend^0,c
  6076  00667A  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  6077  00667C  B0D8               	btfsc	status,0,c
  6078  00667E  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  6079  006680                     l2955:
  6080  006680  C009  F009         	movff	___awmod@dividend,?___awmod
  6081  006684  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  6082  006688  0012               	return		;funcret
  6083  00668A                     __end_of___awmod:
  6084                           	callstack 0
  6085                           
  6086 ;; *************** function ___awdiv *****************
  6087 ;; Defined at:
  6088 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  6089 ;; Parameters:    Size  Location     Type
  6090 ;;  dividend        2    0[COMRAM] int 
  6091 ;;  divisor         2    2[COMRAM] int 
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;  quotient        2    6[COMRAM] int 
  6094 ;;  sign            1    5[COMRAM] unsigned char 
  6095 ;;  counter         1    4[COMRAM] unsigned char 
  6096 ;; Return value:  Size  Location     Type
  6097 ;;                  2    0[COMRAM] int 
  6098 ;; Registers used:
  6099 ;;		wreg, status,2, status,0
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6105 ;;      Params:         4       0       0       0       0       0       0
  6106 ;;      Locals:         4       0       0       0       0       0       0
  6107 ;;      Temps:          0       0       0       0       0       0       0
  6108 ;;      Totals:         8       0       0       0       0       0       0
  6109 ;;Total ram usage:        8 bytes
  6110 ;; Hardware stack levels used: 1
  6111 ;; This function calls:
  6112 ;;		Nothing
  6113 ;; This function is called by:
  6114 ;;		_lcdNumber
  6115 ;; This function uses a non-reentrant model
  6116 ;;
  6117                           
  6118                           	psect	text34
  6119  00673E                     __ptext34:
  6120                           	callstack 0
  6121  00673E                     ___awdiv:
  6122                           	callstack 28
  6123  00673E  0E00               	movlw	0
  6124  006740  6E06               	movwf	___awdiv@sign^0,c
  6125  006742  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  6126  006744  EFA8  F033         	goto	u2160
  6127  006748  EFA6  F033         	goto	u2161
  6128  00674C                     u2161:
  6129  00674C  EFAE  F033         	goto	l2887
  6130  006750                     u2160:
  6131  006750  6C03               	negf	___awdiv@divisor^0,c
  6132  006752  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  6133  006754  B0D8               	btfsc	status,0,c
  6134  006756  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  6135  006758  0E01               	movlw	1
  6136  00675A  6E06               	movwf	___awdiv@sign^0,c
  6137  00675C                     l2887:
  6138  00675C  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  6139  00675E  EFB5  F033         	goto	u2170
  6140  006762  EFB3  F033         	goto	u2171
  6141  006766                     u2171:
  6142  006766  EFBB  F033         	goto	l2893
  6143  00676A                     u2170:
  6144  00676A  6C01               	negf	___awdiv@dividend^0,c
  6145  00676C  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  6146  00676E  B0D8               	btfsc	status,0,c
  6147  006770  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  6148  006772  0E01               	movlw	1
  6149  006774  1A06               	xorwf	___awdiv@sign^0,f,c
  6150  006776                     l2893:
  6151  006776  0E00               	movlw	0
  6152  006778  6E08               	movwf	(___awdiv@quotient+1)^0,c
  6153  00677A  0E00               	movlw	0
  6154  00677C  6E07               	movwf	___awdiv@quotient^0,c
  6155  00677E  5003               	movf	___awdiv@divisor^0,w,c
  6156  006780  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  6157  006782  B4D8               	btfsc	status,2,c
  6158  006784  EFC6  F033         	goto	u2181
  6159  006788  EFC8  F033         	goto	u2180
  6160  00678C                     u2181:
  6161  00678C  EFF0  F033         	goto	l2915
  6162  006790                     u2180:
  6163  006790  0E01               	movlw	1
  6164  006792  6E05               	movwf	___awdiv@counter^0,c
  6165  006794  EFD0  F033         	goto	l2901
  6166  006798                     l2899:
  6167  006798  90D8               	bcf	status,0,c
  6168  00679A  3603               	rlcf	___awdiv@divisor^0,f,c
  6169  00679C  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  6170  00679E  2A05               	incf	___awdiv@counter^0,f,c
  6171  0067A0                     l2901:
  6172  0067A0  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  6173  0067A2  EFD5  F033         	goto	u2191
  6174  0067A6  EFD7  F033         	goto	u2190
  6175  0067AA                     u2191:
  6176  0067AA  EFCC  F033         	goto	l2899
  6177  0067AE                     u2190:
  6178  0067AE                     l2903:
  6179  0067AE  90D8               	bcf	status,0,c
  6180  0067B0  3607               	rlcf	___awdiv@quotient^0,f,c
  6181  0067B2  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  6182  0067B4  5003               	movf	___awdiv@divisor^0,w,c
  6183  0067B6  5C01               	subwf	___awdiv@dividend^0,w,c
  6184  0067B8  5004               	movf	(___awdiv@divisor+1)^0,w,c
  6185  0067BA  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  6186  0067BC  A0D8               	btfss	status,0,c
  6187  0067BE  EFE3  F033         	goto	u2201
  6188  0067C2  EFE5  F033         	goto	u2200
  6189  0067C6                     u2201:
  6190  0067C6  EFEA  F033         	goto	l2911
  6191  0067CA                     u2200:
  6192  0067CA  5003               	movf	___awdiv@divisor^0,w,c
  6193  0067CC  5E01               	subwf	___awdiv@dividend^0,f,c
  6194  0067CE  5004               	movf	(___awdiv@divisor+1)^0,w,c
  6195  0067D0  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  6196  0067D2  8007               	bsf	___awdiv@quotient^0,0,c
  6197  0067D4                     l2911:
  6198  0067D4  90D8               	bcf	status,0,c
  6199  0067D6  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  6200  0067D8  3203               	rrcf	___awdiv@divisor^0,f,c
  6201  0067DA  2E05               	decfsz	___awdiv@counter^0,f,c
  6202  0067DC  EFD7  F033         	goto	l2903
  6203  0067E0                     l2915:
  6204  0067E0  5006               	movf	___awdiv@sign^0,w,c
  6205  0067E2  B4D8               	btfsc	status,2,c
  6206  0067E4  EFF6  F033         	goto	u2211
  6207  0067E8  EFF8  F033         	goto	u2210
  6208  0067EC                     u2211:
  6209  0067EC  EFFC  F033         	goto	l2919
  6210  0067F0                     u2210:
  6211  0067F0  6C07               	negf	___awdiv@quotient^0,c
  6212  0067F2  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  6213  0067F4  B0D8               	btfsc	status,0,c
  6214  0067F6  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  6215  0067F8                     l2919:
  6216  0067F8  C007  F001         	movff	___awdiv@quotient,?___awdiv
  6217  0067FC  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  6218  006800  0012               	return		;funcret
  6219  006802                     __end_of___awdiv:
  6220                           	callstack 0
  6221                           
  6222 ;; *************** function _lcdCommand *****************
  6223 ;; Defined at:
  6224 ;;		line 40 in file "lcd.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;  value           1    wreg     unsigned char 
  6227 ;; Auto vars:     Size  Location     Type
  6228 ;;  value           1   13[COMRAM] unsigned char 
  6229 ;; Return value:  Size  Location     Type
  6230 ;;                  1    wreg      void 
  6231 ;; Registers used:
  6232 ;;		wreg, status,2, status,0, cstack
  6233 ;; Tracked objects:
  6234 ;;		On entry : 0/0
  6235 ;;		On exit  : 0/0
  6236 ;;		Unchanged: 0/0
  6237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6238 ;;      Params:         0       0       0       0       0       0       0
  6239 ;;      Locals:         1       0       0       0       0       0       0
  6240 ;;      Temps:          0       0       0       0       0       0       0
  6241 ;;      Totals:         1       0       0       0       0       0       0
  6242 ;;Total ram usage:        1 bytes
  6243 ;; Hardware stack levels used: 1
  6244 ;; Hardware stack levels required when called: 4
  6245 ;; This function calls:
  6246 ;;		_delayMili
  6247 ;;		_pushByte
  6248 ;; This function is called by:
  6249 ;;		_radioConfig
  6250 ;;		_radioFreq
  6251 ;;		_alarmeHora
  6252 ;;		_horaConfig
  6253 ;;		_alarmeConfig
  6254 ;;		_menu
  6255 ;;		_compararAlarme
  6256 ;;		_MostraDisplay
  6257 ;;		_main
  6258 ;;		_lcdInit
  6259 ;;		_lcdPosition
  6260 ;; This function uses a non-reentrant model
  6261 ;;
  6262                           
  6263                           	psect	text35
  6264  005D66                     __ptext35:
  6265                           	callstack 0
  6266  005D66                     _lcdCommand:
  6267                           	callstack 22
  6268                           
  6269                           ;incstack = 0
  6270                           ;lcdCommand@value stored from wreg
  6271  005D66  6E0E               	movwf	lcdCommand@value^0,c
  6272  005D68                     
  6273                           ;lcd.c: 41:  pushByte(value, 0);
  6274  005D68  0E00               	movlw	0
  6275  005D6A  6E0B               	movwf	(pushByte@rs+1)^0,c
  6276  005D6C  0E00               	movlw	0
  6277  005D6E  6E0A               	movwf	pushByte@rs^0,c
  6278  005D70  500E               	movf	lcdCommand@value^0,w,c
  6279  005D72  EC8B  F030         	call	_pushByte
  6280                           
  6281                           ;lcd.c: 42:  delayMili(2);
  6282  005D76  0E00               	movlw	0
  6283  005D78  6E02               	movwf	(delayMili@a+1)^0,c
  6284  005D7A  0E02               	movlw	2
  6285  005D7C  6E01               	movwf	delayMili@a^0,c
  6286  005D7E  EC32  F02F         	call	_delayMili	;wreg free
  6287  005D82  0012               	return		;funcret
  6288  005D84                     __end_of_lcdCommand:
  6289                           	callstack 0
  6290                           
  6291 ;; *************** function _pushByte *****************
  6292 ;; Defined at:
  6293 ;;		line 31 in file "lcd.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;  value           1    wreg     unsigned char 
  6296 ;;  rs              2    9[COMRAM] int 
  6297 ;; Auto vars:     Size  Location     Type
  6298 ;;  value           1   12[COMRAM] unsigned char 
  6299 ;; Return value:  Size  Location     Type
  6300 ;;                  1    wreg      void 
  6301 ;; Registers used:
  6302 ;;		wreg, status,2, status,0, cstack
  6303 ;; Tracked objects:
  6304 ;;		On entry : 0/0
  6305 ;;		On exit  : 0/0
  6306 ;;		Unchanged: 0/0
  6307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6308 ;;      Params:         2       0       0       0       0       0       0
  6309 ;;      Locals:         1       0       0       0       0       0       0
  6310 ;;      Temps:          1       0       0       0       0       0       0
  6311 ;;      Totals:         4       0       0       0       0       0       0
  6312 ;;Total ram usage:        4 bytes
  6313 ;; Hardware stack levels used: 1
  6314 ;; Hardware stack levels required when called: 3
  6315 ;; This function calls:
  6316 ;;		_digitalWrite
  6317 ;;		_pulseEnablePin
  6318 ;;		_soWrite
  6319 ;; This function is called by:
  6320 ;;		_lcdCommand
  6321 ;;		_lcdChar
  6322 ;; This function uses a non-reentrant model
  6323 ;;
  6324                           
  6325                           	psect	text36
  6326  006116                     __ptext36:
  6327                           	callstack 0
  6328  006116                     _pushByte:
  6329                           	callstack 21
  6330                           
  6331                           ;incstack = 0
  6332                           ;pushByte@value stored from wreg
  6333  006116  6E0D               	movwf	pushByte@value^0,c
  6334  006118                     
  6335                           ;lcd.c: 32:  soWrite(value >> 4);
  6336  006118  C00D  F00C         	movff	pushByte@value,??_pushByte
  6337  00611C  3A0C               	swapf	??_pushByte^0,f,c
  6338  00611E  0E0F               	movlw	15
  6339  006120  160C               	andwf	??_pushByte^0,f,c
  6340  006122  500C               	movf	??_pushByte^0,w,c
  6341  006124  6E07               	movwf	soWrite@value^0,c
  6342  006126  6A08               	clrf	(soWrite@value+1)^0,c
  6343  006128  ECE2  F02F         	call	_soWrite	;wreg free
  6344                           
  6345                           ;lcd.c: 33:  digitalWrite(PIN_D5, rs);
  6346  00612C  0E00               	movlw	0
  6347  00612E  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6348  006130  0E1D               	movlw	29
  6349  006132  6E01               	movwf	digitalWrite@pin^0,c
  6350  006134  C00A  F003         	movff	pushByte@rs,digitalWrite@value
  6351  006138  C00B  F004         	movff	pushByte@rs+1,digitalWrite@value+1
  6352  00613C  ECAD  F03A         	call	_digitalWrite	;wreg free
  6353                           
  6354                           ;lcd.c: 34:  pulseEnablePin();
  6355  006140  EC9D  F02F         	call	_pulseEnablePin	;wreg free
  6356                           
  6357                           ;lcd.c: 36:  soWrite(value & 0x0F);
  6358  006144  C00D  F00C         	movff	pushByte@value,??_pushByte
  6359  006148  0E0F               	movlw	15
  6360  00614A  160C               	andwf	??_pushByte^0,f,c
  6361  00614C  500C               	movf	??_pushByte^0,w,c
  6362  00614E  6E07               	movwf	soWrite@value^0,c
  6363  006150  6A08               	clrf	(soWrite@value+1)^0,c
  6364  006152  ECE2  F02F         	call	_soWrite	;wreg free
  6365                           
  6366                           ;lcd.c: 37:  digitalWrite(PIN_D5, rs);
  6367  006156  0E00               	movlw	0
  6368  006158  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6369  00615A  0E1D               	movlw	29
  6370  00615C  6E01               	movwf	digitalWrite@pin^0,c
  6371  00615E  C00A  F003         	movff	pushByte@rs,digitalWrite@value
  6372  006162  C00B  F004         	movff	pushByte@rs+1,digitalWrite@value+1
  6373  006166  ECAD  F03A         	call	_digitalWrite	;wreg free
  6374                           
  6375                           ;lcd.c: 38:  pulseEnablePin();
  6376  00616A  EC9D  F02F         	call	_pulseEnablePin	;wreg free
  6377  00616E  0012               	return		;funcret
  6378  006170                     __end_of_pushByte:
  6379                           	callstack 0
  6380                           
  6381 ;; *************** function _soWrite *****************
  6382 ;; Defined at:
  6383 ;;		line 18 in file "so.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  value           2    6[COMRAM] int 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  i               1    8[COMRAM] unsigned char 
  6388 ;; Return value:  Size  Location     Type
  6389 ;;                  1    wreg      void 
  6390 ;; Registers used:
  6391 ;;		wreg, status,2, status,0, cstack
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6397 ;;      Params:         2       0       0       0       0       0       0
  6398 ;;      Locals:         1       0       0       0       0       0       0
  6399 ;;      Temps:          0       0       0       0       0       0       0
  6400 ;;      Totals:         3       0       0       0       0       0       0
  6401 ;;Total ram usage:        3 bytes
  6402 ;; Hardware stack levels used: 1
  6403 ;; Hardware stack levels required when called: 2
  6404 ;; This function calls:
  6405 ;;		_PulseClockData
  6406 ;;		_PulseEnClock
  6407 ;;		_digitalWrite
  6408 ;; This function is called by:
  6409 ;;		_kpDebounce
  6410 ;;		_pushNibble
  6411 ;;		_pushByte
  6412 ;;		_ssdUpdate
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           	psect	text37
  6417  005FC4                     __ptext37:
  6418                           	callstack 0
  6419  005FC4                     _soWrite:
  6420                           	callstack 27
  6421  005FC4                     
  6422                           ;so.c: 19:  char i;;so.c: 20:  digitalWrite(PIN_B0, 0);
  6423  005FC4  0E00               	movlw	0
  6424  005FC6  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6425  005FC8  0E08               	movlw	8
  6426  005FCA  6E01               	movwf	digitalWrite@pin^0,c
  6427  005FCC  0E00               	movlw	0
  6428  005FCE  6E04               	movwf	(digitalWrite@value+1)^0,c
  6429  005FD0  0E00               	movlw	0
  6430  005FD2  6E03               	movwf	digitalWrite@value^0,c
  6431  005FD4  ECAD  F03A         	call	_digitalWrite	;wreg free
  6432  005FD8                     
  6433                           ;so.c: 21:  for (i = 0; i < 8; i++) {
  6434  005FD8  0E00               	movlw	0
  6435  005FDA  6E09               	movwf	soWrite@i^0,c
  6436  005FDC                     l2427:
  6437                           
  6438                           ;so.c: 22:   digitalWrite(PIN_D6, value & 0x80);
  6439  005FDC  0E00               	movlw	0
  6440  005FDE  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6441  005FE0  0E1E               	movlw	30
  6442  005FE2  6E01               	movwf	digitalWrite@pin^0,c
  6443  005FE4  0E80               	movlw	128
  6444  005FE6  1407               	andwf	soWrite@value^0,w,c
  6445  005FE8  6E03               	movwf	digitalWrite@value^0,c
  6446  005FEA  6A04               	clrf	(digitalWrite@value+1)^0,c
  6447  005FEC  ECAD  F03A         	call	_digitalWrite	;wreg free
  6448                           
  6449                           ;so.c: 23:   PulseClockData();
  6450  005FF0  EC08  F02F         	call	_PulseClockData	;wreg free
  6451  005FF4                     
  6452                           ;so.c: 24:   value <<= 1;
  6453  005FF4  90D8               	bcf	status,0,c
  6454  005FF6  3607               	rlcf	soWrite@value^0,f,c
  6455  005FF8  3608               	rlcf	(soWrite@value+1)^0,f,c
  6456  005FFA                     
  6457                           ;so.c: 25:  }
  6458  005FFA  2A09               	incf	soWrite@i^0,f,c
  6459  005FFC  0E07               	movlw	7
  6460  005FFE  6409               	cpfsgt	soWrite@i^0,c
  6461  006000  EF04  F030         	goto	u1631
  6462  006004  EF06  F030         	goto	u1630
  6463  006008                     u1631:
  6464  006008  EFEE  F02F         	goto	l2427
  6465  00600C                     u1630:
  6466  00600C                     
  6467                           ;so.c: 26:  PulseEnClock();
  6468  00600C  EC1D  F02F         	call	_PulseEnClock	;wreg free
  6469  006010  0012               	return		;funcret
  6470  006012                     __end_of_soWrite:
  6471                           	callstack 0
  6472                           
  6473 ;; *************** function _PulseEnClock *****************
  6474 ;; Defined at:
  6475 ;;		line 9 in file "so.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;		None
  6478 ;; Auto vars:     Size  Location     Type
  6479 ;;		None
  6480 ;; Return value:  Size  Location     Type
  6481 ;;                  1    wreg      void 
  6482 ;; Registers used:
  6483 ;;		wreg, status,2, status,0, cstack
  6484 ;; Tracked objects:
  6485 ;;		On entry : 0/0
  6486 ;;		On exit  : 0/0
  6487 ;;		Unchanged: 0/0
  6488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6489 ;;      Params:         0       0       0       0       0       0       0
  6490 ;;      Locals:         0       0       0       0       0       0       0
  6491 ;;      Temps:          0       0       0       0       0       0       0
  6492 ;;      Totals:         0       0       0       0       0       0       0
  6493 ;;Total ram usage:        0 bytes
  6494 ;; Hardware stack levels used: 1
  6495 ;; Hardware stack levels required when called: 1
  6496 ;; This function calls:
  6497 ;;		_digitalWrite
  6498 ;; This function is called by:
  6499 ;;		_soWrite
  6500 ;; This function uses a non-reentrant model
  6501 ;;
  6502                           
  6503                           	psect	text38
  6504  005E3A                     __ptext38:
  6505                           	callstack 0
  6506  005E3A                     _PulseEnClock:
  6507                           	callstack 27
  6508  005E3A                     
  6509                           ;so.c: 10:  digitalWrite(PIN_D7, 1);
  6510  005E3A  0E00               	movlw	0
  6511  005E3C  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6512  005E3E  0E1F               	movlw	31
  6513  005E40  6E01               	movwf	digitalWrite@pin^0,c
  6514  005E42  0E00               	movlw	0
  6515  005E44  6E04               	movwf	(digitalWrite@value+1)^0,c
  6516  005E46  0E01               	movlw	1
  6517  005E48  6E03               	movwf	digitalWrite@value^0,c
  6518  005E4A  ECAD  F03A         	call	_digitalWrite	;wreg free
  6519                           
  6520                           ;so.c: 11:  digitalWrite(PIN_D7, 0);
  6521  005E4E  0E00               	movlw	0
  6522  005E50  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6523  005E52  0E1F               	movlw	31
  6524  005E54  6E01               	movwf	digitalWrite@pin^0,c
  6525  005E56  0E00               	movlw	0
  6526  005E58  6E04               	movwf	(digitalWrite@value+1)^0,c
  6527  005E5A  0E00               	movlw	0
  6528  005E5C  6E03               	movwf	digitalWrite@value^0,c
  6529  005E5E  ECAD  F03A         	call	_digitalWrite	;wreg free
  6530  005E62  0012               	return		;funcret
  6531  005E64                     __end_of_PulseEnClock:
  6532                           	callstack 0
  6533                           
  6534 ;; *************** function _PulseClockData *****************
  6535 ;; Defined at:
  6536 ;;		line 14 in file "so.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;		None
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;		None
  6541 ;; Return value:  Size  Location     Type
  6542 ;;                  1    wreg      void 
  6543 ;; Registers used:
  6544 ;;		wreg, status,2, status,0, cstack
  6545 ;; Tracked objects:
  6546 ;;		On entry : 0/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6550 ;;      Params:         0       0       0       0       0       0       0
  6551 ;;      Locals:         0       0       0       0       0       0       0
  6552 ;;      Temps:          0       0       0       0       0       0       0
  6553 ;;      Totals:         0       0       0       0       0       0       0
  6554 ;;Total ram usage:        0 bytes
  6555 ;; Hardware stack levels used: 1
  6556 ;; Hardware stack levels required when called: 1
  6557 ;; This function calls:
  6558 ;;		_digitalWrite
  6559 ;; This function is called by:
  6560 ;;		_soWrite
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564                           	psect	text39
  6565  005E10                     __ptext39:
  6566                           	callstack 0
  6567  005E10                     _PulseClockData:
  6568                           	callstack 27
  6569  005E10                     
  6570                           ;so.c: 15:  digitalWrite(PIN_B0, 1);
  6571  005E10  0E00               	movlw	0
  6572  005E12  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6573  005E14  0E08               	movlw	8
  6574  005E16  6E01               	movwf	digitalWrite@pin^0,c
  6575  005E18  0E00               	movlw	0
  6576  005E1A  6E04               	movwf	(digitalWrite@value+1)^0,c
  6577  005E1C  0E01               	movlw	1
  6578  005E1E  6E03               	movwf	digitalWrite@value^0,c
  6579  005E20  ECAD  F03A         	call	_digitalWrite	;wreg free
  6580                           
  6581                           ;so.c: 16:  digitalWrite(PIN_B0, 0);
  6582  005E24  0E00               	movlw	0
  6583  005E26  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6584  005E28  0E08               	movlw	8
  6585  005E2A  6E01               	movwf	digitalWrite@pin^0,c
  6586  005E2C  0E00               	movlw	0
  6587  005E2E  6E04               	movwf	(digitalWrite@value+1)^0,c
  6588  005E30  0E00               	movlw	0
  6589  005E32  6E03               	movwf	digitalWrite@value^0,c
  6590  005E34  ECAD  F03A         	call	_digitalWrite	;wreg free
  6591  005E38  0012               	return		;funcret
  6592  005E3A                     __end_of_PulseClockData:
  6593                           	callstack 0
  6594                           
  6595 ;; *************** function _pulseEnablePin *****************
  6596 ;; Defined at:
  6597 ;;		line 18 in file "lcd.c"
  6598 ;; Parameters:    Size  Location     Type
  6599 ;;		None
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;		None
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  1    wreg      void 
  6604 ;; Registers used:
  6605 ;;		wreg, status,2, status,0, cstack
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6611 ;;      Params:         0       0       0       0       0       0       0
  6612 ;;      Locals:         0       0       0       0       0       0       0
  6613 ;;      Temps:          0       0       0       0       0       0       0
  6614 ;;      Totals:         0       0       0       0       0       0       0
  6615 ;;Total ram usage:        0 bytes
  6616 ;; Hardware stack levels used: 1
  6617 ;; Hardware stack levels required when called: 1
  6618 ;; This function calls:
  6619 ;;		_delayMicro
  6620 ;;		_digitalWrite
  6621 ;; This function is called by:
  6622 ;;		_pushNibble
  6623 ;;		_pushByte
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           	psect	text40
  6628  005F3A                     __ptext40:
  6629                           	callstack 0
  6630  005F3A                     _pulseEnablePin:
  6631                           	callstack 22
  6632  005F3A                     
  6633                           ;lcd.c: 19:  digitalWrite(PIN_D4, 1);
  6634  005F3A  0E00               	movlw	0
  6635  005F3C  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6636  005F3E  0E1C               	movlw	28
  6637  005F40  6E01               	movwf	digitalWrite@pin^0,c
  6638  005F42  0E00               	movlw	0
  6639  005F44  6E04               	movwf	(digitalWrite@value+1)^0,c
  6640  005F46  0E01               	movlw	1
  6641  005F48  6E03               	movwf	digitalWrite@value^0,c
  6642  005F4A  ECAD  F03A         	call	_digitalWrite	;wreg free
  6643  005F4E                     
  6644                           ;lcd.c: 20:  delayMicro(5);
  6645  005F4E  0E00               	movlw	0
  6646  005F50  6E02               	movwf	(delayMicro@a+1)^0,c
  6647  005F52  0E05               	movlw	5
  6648  005F54  6E01               	movwf	delayMicro@a^0,c
  6649  005F56  EC8F  F02E         	call	_delayMicro	;wreg free
  6650  005F5A                     
  6651                           ;lcd.c: 21:  digitalWrite(PIN_D4, 0);
  6652  005F5A  0E00               	movlw	0
  6653  005F5C  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6654  005F5E  0E1C               	movlw	28
  6655  005F60  6E01               	movwf	digitalWrite@pin^0,c
  6656  005F62  0E00               	movlw	0
  6657  005F64  6E04               	movwf	(digitalWrite@value+1)^0,c
  6658  005F66  0E00               	movlw	0
  6659  005F68  6E03               	movwf	digitalWrite@value^0,c
  6660  005F6A  ECAD  F03A         	call	_digitalWrite	;wreg free
  6661                           
  6662                           ;lcd.c: 22:  delayMicro(5);
  6663  005F6E  0E00               	movlw	0
  6664  005F70  6E02               	movwf	(delayMicro@a+1)^0,c
  6665  005F72  0E05               	movlw	5
  6666  005F74  6E01               	movwf	delayMicro@a^0,c
  6667  005F76  EC8F  F02E         	call	_delayMicro	;wreg free
  6668  005F7A  0012               	return		;funcret
  6669  005F7C                     __end_of_pulseEnablePin:
  6670                           	callstack 0
  6671                           
  6672 ;; *************** function _digitalWrite *****************
  6673 ;; Defined at:
  6674 ;;		line 14 in file "io.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;  pin             2    0[COMRAM] int 
  6677 ;;  value           2    2[COMRAM] int 
  6678 ;; Auto vars:     Size  Location     Type
  6679 ;;		None
  6680 ;; Return value:  Size  Location     Type
  6681 ;;                  1    wreg      void 
  6682 ;; Registers used:
  6683 ;;		wreg, status,2, status,0
  6684 ;; Tracked objects:
  6685 ;;		On entry : 0/0
  6686 ;;		On exit  : 0/0
  6687 ;;		Unchanged: 0/0
  6688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6689 ;;      Params:         4       0       0       0       0       0       0
  6690 ;;      Locals:         0       0       0       0       0       0       0
  6691 ;;      Temps:          2       0       0       0       0       0       0
  6692 ;;      Totals:         6       0       0       0       0       0       0
  6693 ;;Total ram usage:        6 bytes
  6694 ;; Hardware stack levels used: 1
  6695 ;; This function calls:
  6696 ;;		Nothing
  6697 ;; This function is called by:
  6698 ;;		_pulseEnablePin
  6699 ;;		_pushNibble
  6700 ;;		_pushByte
  6701 ;;		_PulseEnClock
  6702 ;;		_PulseClockData
  6703 ;;		_soWrite
  6704 ;;		_ssdUpdate
  6705 ;; This function uses a non-reentrant model
  6706 ;;
  6707                           
  6708                           	psect	text41
  6709  00755A                     __ptext41:
  6710                           	callstack 0
  6711  00755A                     _digitalWrite:
  6712                           	callstack 28
  6713  00755A                     
  6714                           ;io.c: 16:     if(pin <8){
  6715  00755A  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  6716  00755C  EFBB  F03A         	goto	u1430
  6717  007560  5002               	movf	(digitalWrite@pin+1)^0,w,c
  6718  007562  E107               	bnz	u1431
  6719  007564  0E08               	movlw	8
  6720  007566  5C01               	subwf	digitalWrite@pin^0,w,c
  6721  007568  B0D8               	btfsc	status,0,c
  6722  00756A  EFB9  F03A         	goto	u1431
  6723  00756E  EFBB  F03A         	goto	u1430
  6724  007572                     u1431:
  6725  007572  EFE5  F03A         	goto	l2383
  6726  007576                     u1430:
  6727  007576                     
  6728                           ;io.c: 17:         if (value){ ((PORTA) |= (1<<(pin)));}
  6729  007576  5003               	movf	digitalWrite@value^0,w,c
  6730  007578  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  6731  00757A  B4D8               	btfsc	status,2,c
  6732  00757C  EFC2  F03A         	goto	u1441
  6733  007580  EFC4  F03A         	goto	u1440
  6734  007584                     u1441:
  6735  007584  EFD4  F03A         	goto	l2381
  6736  007588                     u1440:
  6737  007588  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6738  00758C  0E01               	movlw	1
  6739  00758E  6E06               	movwf	(??_digitalWrite+1)^0,c
  6740  007590  2A05               	incf	??_digitalWrite^0,f,c
  6741  007592  EFCD  F03A         	goto	u1454
  6742  007596                     u1455:
  6743  007596  90D8               	bcf	status,0,c
  6744  007598  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6745  00759A                     u1454:
  6746  00759A  2E05               	decfsz	??_digitalWrite^0,f,c
  6747  00759C  EFCB  F03A         	goto	u1455
  6748  0075A0  5006               	movf	(??_digitalWrite+1)^0,w,c
  6749  0075A2  1280               	iorwf	128,f,c	;volatile
  6750  0075A4  EFD3  F03B         	goto	l305
  6751  0075A8                     l2381:
  6752  0075A8  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6753  0075AC  0E01               	movlw	1
  6754  0075AE  6E06               	movwf	(??_digitalWrite+1)^0,c
  6755  0075B0  2A05               	incf	??_digitalWrite^0,f,c
  6756  0075B2  EFDD  F03A         	goto	u1464
  6757  0075B6                     u1465:
  6758  0075B6  90D8               	bcf	status,0,c
  6759  0075B8  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6760  0075BA                     u1464:
  6761  0075BA  2E05               	decfsz	??_digitalWrite^0,f,c
  6762  0075BC  EFDB  F03A         	goto	u1465
  6763  0075C0  5006               	movf	(??_digitalWrite+1)^0,w,c
  6764  0075C2  0AFF               	xorlw	255
  6765  0075C4  1680               	andwf	128,f,c	;volatile
  6766  0075C6  EFD3  F03B         	goto	l305
  6767  0075CA                     l2383:
  6768  0075CA  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  6769  0075CC  EFF3  F03A         	goto	u1470
  6770  0075D0  5002               	movf	(digitalWrite@pin+1)^0,w,c
  6771  0075D2  E107               	bnz	u1471
  6772  0075D4  0E10               	movlw	16
  6773  0075D6  5C01               	subwf	digitalWrite@pin^0,w,c
  6774  0075D8  B0D8               	btfsc	status,0,c
  6775  0075DA  EFF1  F03A         	goto	u1471
  6776  0075DE  EFF3  F03A         	goto	u1470
  6777  0075E2                     u1471:
  6778  0075E2  EF21  F03B         	goto	l2391
  6779  0075E6                     u1470:
  6780  0075E6                     
  6781                           ;io.c: 20:         pin -=8;
  6782  0075E6  0EF8               	movlw	248
  6783  0075E8  2601               	addwf	digitalWrite@pin^0,f,c
  6784  0075EA  0EFF               	movlw	255
  6785  0075EC  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  6786                           
  6787                           ;io.c: 21:         if (value){ ((PORTB) |= (1<<(pin)));}
  6788  0075EE  5003               	movf	digitalWrite@value^0,w,c
  6789  0075F0  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  6790  0075F2  B4D8               	btfsc	status,2,c
  6791  0075F4  EFFE  F03A         	goto	u1481
  6792  0075F8  EF00  F03B         	goto	u1480
  6793  0075FC                     u1481:
  6794  0075FC  EF10  F03B         	goto	l2389
  6795  007600                     u1480:
  6796  007600  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6797  007604  0E01               	movlw	1
  6798  007606  6E06               	movwf	(??_digitalWrite+1)^0,c
  6799  007608  2A05               	incf	??_digitalWrite^0,f,c
  6800  00760A  EF09  F03B         	goto	u1494
  6801  00760E                     u1495:
  6802  00760E  90D8               	bcf	status,0,c
  6803  007610  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6804  007612                     u1494:
  6805  007612  2E05               	decfsz	??_digitalWrite^0,f,c
  6806  007614  EF07  F03B         	goto	u1495
  6807  007618  5006               	movf	(??_digitalWrite+1)^0,w,c
  6808  00761A  1281               	iorwf	129,f,c	;volatile
  6809  00761C  EFD3  F03B         	goto	l305
  6810  007620                     l2389:
  6811  007620  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6812  007624  0E01               	movlw	1
  6813  007626  6E06               	movwf	(??_digitalWrite+1)^0,c
  6814  007628  2A05               	incf	??_digitalWrite^0,f,c
  6815  00762A  EF19  F03B         	goto	u1504
  6816  00762E                     u1505:
  6817  00762E  90D8               	bcf	status,0,c
  6818  007630  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6819  007632                     u1504:
  6820  007632  2E05               	decfsz	??_digitalWrite^0,f,c
  6821  007634  EF17  F03B         	goto	u1505
  6822  007638  5006               	movf	(??_digitalWrite+1)^0,w,c
  6823  00763A  0AFF               	xorlw	255
  6824  00763C  1681               	andwf	129,f,c	;volatile
  6825  00763E  EFD3  F03B         	goto	l305
  6826  007642                     l2391:
  6827  007642  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  6828  007644  EF2F  F03B         	goto	u1510
  6829  007648  5002               	movf	(digitalWrite@pin+1)^0,w,c
  6830  00764A  E107               	bnz	u1511
  6831  00764C  0E18               	movlw	24
  6832  00764E  5C01               	subwf	digitalWrite@pin^0,w,c
  6833  007650  B0D8               	btfsc	status,0,c
  6834  007652  EF2D  F03B         	goto	u1511
  6835  007656  EF2F  F03B         	goto	u1510
  6836  00765A                     u1511:
  6837  00765A  EF5D  F03B         	goto	l2399
  6838  00765E                     u1510:
  6839  00765E                     
  6840                           ;io.c: 24:         pin -=16;
  6841  00765E  0EF0               	movlw	240
  6842  007660  2601               	addwf	digitalWrite@pin^0,f,c
  6843  007662  0EFF               	movlw	255
  6844  007664  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  6845                           
  6846                           ;io.c: 25:         if (value){ ((PORTC) |= (1<<(pin)));}
  6847  007666  5003               	movf	digitalWrite@value^0,w,c
  6848  007668  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  6849  00766A  B4D8               	btfsc	status,2,c
  6850  00766C  EF3A  F03B         	goto	u1521
  6851  007670  EF3C  F03B         	goto	u1520
  6852  007674                     u1521:
  6853  007674  EF4C  F03B         	goto	l2397
  6854  007678                     u1520:
  6855  007678  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6856  00767C  0E01               	movlw	1
  6857  00767E  6E06               	movwf	(??_digitalWrite+1)^0,c
  6858  007680  2A05               	incf	??_digitalWrite^0,f,c
  6859  007682  EF45  F03B         	goto	u1534
  6860  007686                     u1535:
  6861  007686  90D8               	bcf	status,0,c
  6862  007688  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6863  00768A                     u1534:
  6864  00768A  2E05               	decfsz	??_digitalWrite^0,f,c
  6865  00768C  EF43  F03B         	goto	u1535
  6866  007690  5006               	movf	(??_digitalWrite+1)^0,w,c
  6867  007692  1282               	iorwf	130,f,c	;volatile
  6868  007694  EFD3  F03B         	goto	l305
  6869  007698                     l2397:
  6870  007698  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6871  00769C  0E01               	movlw	1
  6872  00769E  6E06               	movwf	(??_digitalWrite+1)^0,c
  6873  0076A0  2A05               	incf	??_digitalWrite^0,f,c
  6874  0076A2  EF55  F03B         	goto	u1544
  6875  0076A6                     u1545:
  6876  0076A6  90D8               	bcf	status,0,c
  6877  0076A8  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6878  0076AA                     u1544:
  6879  0076AA  2E05               	decfsz	??_digitalWrite^0,f,c
  6880  0076AC  EF53  F03B         	goto	u1545
  6881  0076B0  5006               	movf	(??_digitalWrite+1)^0,w,c
  6882  0076B2  0AFF               	xorlw	255
  6883  0076B4  1682               	andwf	130,f,c	;volatile
  6884  0076B6  EFD3  F03B         	goto	l305
  6885  0076BA                     l2399:
  6886  0076BA  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  6887  0076BC  EF6B  F03B         	goto	u1550
  6888  0076C0  5002               	movf	(digitalWrite@pin+1)^0,w,c
  6889  0076C2  E107               	bnz	u1551
  6890  0076C4  0E20               	movlw	32
  6891  0076C6  5C01               	subwf	digitalWrite@pin^0,w,c
  6892  0076C8  B0D8               	btfsc	status,0,c
  6893  0076CA  EF69  F03B         	goto	u1551
  6894  0076CE  EF6B  F03B         	goto	u1550
  6895  0076D2                     u1551:
  6896  0076D2  EF99  F03B         	goto	l2407
  6897  0076D6                     u1550:
  6898  0076D6                     
  6899                           ;io.c: 28:         pin -=24;
  6900  0076D6  0EE8               	movlw	232
  6901  0076D8  2601               	addwf	digitalWrite@pin^0,f,c
  6902  0076DA  0EFF               	movlw	255
  6903  0076DC  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  6904                           
  6905                           ;io.c: 29:         if (value){ ((PORTD) |= (1<<(pin)));}
  6906  0076DE  5003               	movf	digitalWrite@value^0,w,c
  6907  0076E0  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  6908  0076E2  B4D8               	btfsc	status,2,c
  6909  0076E4  EF76  F03B         	goto	u1561
  6910  0076E8  EF78  F03B         	goto	u1560
  6911  0076EC                     u1561:
  6912  0076EC  EF88  F03B         	goto	l2405
  6913  0076F0                     u1560:
  6914  0076F0  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6915  0076F4  0E01               	movlw	1
  6916  0076F6  6E06               	movwf	(??_digitalWrite+1)^0,c
  6917  0076F8  2A05               	incf	??_digitalWrite^0,f,c
  6918  0076FA  EF81  F03B         	goto	u1574
  6919  0076FE                     u1575:
  6920  0076FE  90D8               	bcf	status,0,c
  6921  007700  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6922  007702                     u1574:
  6923  007702  2E05               	decfsz	??_digitalWrite^0,f,c
  6924  007704  EF7F  F03B         	goto	u1575
  6925  007708  5006               	movf	(??_digitalWrite+1)^0,w,c
  6926  00770A  1283               	iorwf	131,f,c	;volatile
  6927  00770C  EFD3  F03B         	goto	l305
  6928  007710                     l2405:
  6929  007710  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6930  007714  0E01               	movlw	1
  6931  007716  6E06               	movwf	(??_digitalWrite+1)^0,c
  6932  007718  2A05               	incf	??_digitalWrite^0,f,c
  6933  00771A  EF91  F03B         	goto	u1584
  6934  00771E                     u1585:
  6935  00771E  90D8               	bcf	status,0,c
  6936  007720  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6937  007722                     u1584:
  6938  007722  2E05               	decfsz	??_digitalWrite^0,f,c
  6939  007724  EF8F  F03B         	goto	u1585
  6940  007728  5006               	movf	(??_digitalWrite+1)^0,w,c
  6941  00772A  0AFF               	xorlw	255
  6942  00772C  1683               	andwf	131,f,c	;volatile
  6943  00772E  EFD3  F03B         	goto	l305
  6944  007732                     l2407:
  6945  007732  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  6946  007734  EFA7  F03B         	goto	u1590
  6947  007738  5002               	movf	(digitalWrite@pin+1)^0,w,c
  6948  00773A  E107               	bnz	u1591
  6949  00773C  0E28               	movlw	40
  6950  00773E  5C01               	subwf	digitalWrite@pin^0,w,c
  6951  007740  B0D8               	btfsc	status,0,c
  6952  007742  EFA5  F03B         	goto	u1591
  6953  007746  EFA7  F03B         	goto	u1590
  6954  00774A                     u1591:
  6955  00774A  EFD3  F03B         	goto	l305
  6956  00774E                     u1590:
  6957  00774E                     
  6958                           ;io.c: 32:         pin -=32;
  6959  00774E  0EE0               	movlw	224
  6960  007750  2601               	addwf	digitalWrite@pin^0,f,c
  6961  007752  0EFF               	movlw	255
  6962  007754  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  6963                           
  6964                           ;io.c: 33:         if (value){ ((PORTE) |= (1<<(pin)));}
  6965  007756  5003               	movf	digitalWrite@value^0,w,c
  6966  007758  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  6967  00775A  B4D8               	btfsc	status,2,c
  6968  00775C  EFB2  F03B         	goto	u1601
  6969  007760  EFB4  F03B         	goto	u1600
  6970  007764                     u1601:
  6971  007764  EFC4  F03B         	goto	l2413
  6972  007768                     u1600:
  6973  007768  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6974  00776C  0E01               	movlw	1
  6975  00776E  6E06               	movwf	(??_digitalWrite+1)^0,c
  6976  007770  2A05               	incf	??_digitalWrite^0,f,c
  6977  007772  EFBD  F03B         	goto	u1614
  6978  007776                     u1615:
  6979  007776  90D8               	bcf	status,0,c
  6980  007778  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6981  00777A                     u1614:
  6982  00777A  2E05               	decfsz	??_digitalWrite^0,f,c
  6983  00777C  EFBB  F03B         	goto	u1615
  6984  007780  5006               	movf	(??_digitalWrite+1)^0,w,c
  6985  007782  1284               	iorwf	132,f,c	;volatile
  6986  007784  EFD3  F03B         	goto	l305
  6987  007788                     l2413:
  6988  007788  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6989  00778C  0E01               	movlw	1
  6990  00778E  6E06               	movwf	(??_digitalWrite+1)^0,c
  6991  007790  2A05               	incf	??_digitalWrite^0,f,c
  6992  007792  EFCD  F03B         	goto	u1624
  6993  007796                     u1625:
  6994  007796  90D8               	bcf	status,0,c
  6995  007798  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6996  00779A                     u1624:
  6997  00779A  2E05               	decfsz	??_digitalWrite^0,f,c
  6998  00779C  EFCB  F03B         	goto	u1625
  6999  0077A0  5006               	movf	(??_digitalWrite+1)^0,w,c
  7000  0077A2  0AFF               	xorlw	255
  7001  0077A4  1684               	andwf	132,f,c	;volatile
  7002  0077A6                     l305:
  7003  0077A6  0012               	return		;funcret
  7004  0077A8                     __end_of_digitalWrite:
  7005                           	callstack 0
  7006                           
  7007 ;; *************** function _delayMicro *****************
  7008 ;; Defined at:
  7009 ;;		line 5 in file "lcd.c"
  7010 ;; Parameters:    Size  Location     Type
  7011 ;;  a               2    0[COMRAM] int 
  7012 ;; Auto vars:     Size  Location     Type
  7013 ;;  i               2    0        volatile int 
  7014 ;; Return value:  Size  Location     Type
  7015 ;;                  1    wreg      void 
  7016 ;; Registers used:
  7017 ;;		None
  7018 ;; Tracked objects:
  7019 ;;		On entry : 0/0
  7020 ;;		On exit  : 0/0
  7021 ;;		Unchanged: 0/0
  7022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7023 ;;      Params:         2       0       0       0       0       0       0
  7024 ;;      Locals:         0       0       0       0       0       0       0
  7025 ;;      Temps:          0       0       0       0       0       0       0
  7026 ;;      Totals:         2       0       0       0       0       0       0
  7027 ;;Total ram usage:        2 bytes
  7028 ;; Hardware stack levels used: 1
  7029 ;; This function calls:
  7030 ;;		Nothing
  7031 ;; This function is called by:
  7032 ;;		_pulseEnablePin
  7033 ;;		_lcdChar
  7034 ;;		_lcdInit
  7035 ;; This function uses a non-reentrant model
  7036 ;;
  7037                           
  7038                           	psect	text42
  7039  005D1E                     __ptext42:
  7040                           	callstack 0
  7041  005D1E                     _delayMicro:
  7042                           	callstack 22
  7043  005D1E  0012               	return		;funcret
  7044  005D20                     __end_of_delayMicro:
  7045                           	callstack 0
  7046                           
  7047 ;; *************** function _delayMili *****************
  7048 ;; Defined at:
  7049 ;;		line 10 in file "lcd.c"
  7050 ;; Parameters:    Size  Location     Type
  7051 ;;  a               2    0[COMRAM] int 
  7052 ;; Auto vars:     Size  Location     Type
  7053 ;;  i               2    3[COMRAM] volatile int 
  7054 ;; Return value:  Size  Location     Type
  7055 ;;                  1    wreg      void 
  7056 ;; Registers used:
  7057 ;;		wreg, status,2, status,0
  7058 ;; Tracked objects:
  7059 ;;		On entry : 0/0
  7060 ;;		On exit  : 0/0
  7061 ;;		Unchanged: 0/0
  7062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7063 ;;      Params:         2       0       0       0       0       0       0
  7064 ;;      Locals:         2       0       0       0       0       0       0
  7065 ;;      Temps:          1       0       0       0       0       0       0
  7066 ;;      Totals:         5       0       0       0       0       0       0
  7067 ;;Total ram usage:        5 bytes
  7068 ;; Hardware stack levels used: 1
  7069 ;; This function calls:
  7070 ;;		Nothing
  7071 ;; This function is called by:
  7072 ;;		_lcdCommand
  7073 ;;		_lcdInit
  7074 ;; This function uses a non-reentrant model
  7075 ;;
  7076                           
  7077                           	psect	text43
  7078  005E64                     __ptext43:
  7079                           	callstack 0
  7080  005E64                     _delayMili:
  7081                           	callstack 25
  7082  005E64                     
  7083                           ;lcd.c: 11:  volatile int i;;lcd.c: 12:  for (i = 0; i < a; i++) {
  7084  005E64  0E00               	movlw	0
  7085  005E66  6E05               	movwf	(delayMili@i+1)^0,c	;volatile
  7086  005E68  0E00               	movlw	0
  7087  005E6A  6E04               	movwf	delayMili@i^0,c	;volatile
  7088  005E6C  EF3A  F02F         	goto	l2449
  7089  005E70                     l2447:
  7090                           
  7091                           ;lcd.c: 15:  }
  7092  005E70  4A04               	infsnz	delayMili@i^0,f,c	;volatile
  7093  005E72  2A05               	incf	(delayMili@i+1)^0,f,c	;volatile
  7094  005E74                     l2449:
  7095  005E74  5001               	movf	delayMili@a^0,w,c
  7096  005E76  5C04               	subwf	delayMili@i^0,w,c	;volatile
  7097  005E78  5005               	movf	(delayMili@i+1)^0,w,c	;volatile
  7098  005E7A  0A80               	xorlw	128
  7099  005E7C  6E03               	movwf	??_delayMili^0,c
  7100  005E7E  5002               	movf	(delayMili@a+1)^0,w,c
  7101  005E80  0A80               	xorlw	128
  7102  005E82  5803               	subwfb	??_delayMili^0,w,c
  7103  005E84  A0D8               	btfss	status,0,c
  7104  005E86  EF47  F02F         	goto	u1641
  7105  005E8A  EF49  F02F         	goto	u1640
  7106  005E8E                     u1641:
  7107  005E8E  EF38  F02F         	goto	l2447
  7108  005E92                     u1640:
  7109  005E92  0012               	return		;funcret
  7110  005E94                     __end_of_delayMili:
  7111                           	callstack 0
  7112                           
  7113 ;; *************** function ___llmod *****************
  7114 ;; Defined at:
  7115 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\llmod.c"
  7116 ;; Parameters:    Size  Location     Type
  7117 ;;  dividend        4   13[COMRAM] unsigned long 
  7118 ;;  divisor         4   17[COMRAM] unsigned long 
  7119 ;; Auto vars:     Size  Location     Type
  7120 ;;  counter         1   21[COMRAM] unsigned char 
  7121 ;; Return value:  Size  Location     Type
  7122 ;;                  4   13[COMRAM] unsigned long 
  7123 ;; Registers used:
  7124 ;;		wreg, status,2, status,0
  7125 ;; Tracked objects:
  7126 ;;		On entry : 0/0
  7127 ;;		On exit  : 0/0
  7128 ;;		Unchanged: 0/0
  7129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7130 ;;      Params:         8       0       0       0       0       0       0
  7131 ;;      Locals:         1       0       0       0       0       0       0
  7132 ;;      Temps:          0       0       0       0       0       0       0
  7133 ;;      Totals:         9       0       0       0       0       0       0
  7134 ;;Total ram usage:        9 bytes
  7135 ;; Hardware stack levels used: 1
  7136 ;; This function calls:
  7137 ;;		Nothing
  7138 ;; This function is called by:
  7139 ;;		_MostraDisplay
  7140 ;; This function uses a non-reentrant model
  7141 ;;
  7142                           
  7143                           	psect	text44
  7144  00635A                     __ptext44:
  7145                           	callstack 0
  7146  00635A                     ___llmod:
  7147                           	callstack 29
  7148  00635A  5012               	movf	___llmod@divisor^0,w,c
  7149  00635C  1013               	iorwf	(___llmod@divisor+1)^0,w,c
  7150  00635E  1014               	iorwf	(___llmod@divisor+2)^0,w,c
  7151  006360  1015               	iorwf	(___llmod@divisor+3)^0,w,c
  7152  006362  B4D8               	btfsc	status,2,c
  7153  006364  EFB6  F031         	goto	u2601
  7154  006368  EFB8  F031         	goto	u2600
  7155  00636C                     u2601:
  7156  00636C  EFE8  F031         	goto	l956
  7157  006370                     u2600:
  7158  006370  0E01               	movlw	1
  7159  006372  6E16               	movwf	___llmod@counter^0,c
  7160  006374  EFC2  F031         	goto	l3207
  7161  006378                     l3205:
  7162  006378  90D8               	bcf	status,0,c
  7163  00637A  3612               	rlcf	___llmod@divisor^0,f,c
  7164  00637C  3613               	rlcf	(___llmod@divisor+1)^0,f,c
  7165  00637E  3614               	rlcf	(___llmod@divisor+2)^0,f,c
  7166  006380  3615               	rlcf	(___llmod@divisor+3)^0,f,c
  7167  006382  2A16               	incf	___llmod@counter^0,f,c
  7168  006384                     l3207:
  7169  006384  AE15               	btfss	(___llmod@divisor+3)^0,7,c
  7170  006386  EFC7  F031         	goto	u2611
  7171  00638A  EFC9  F031         	goto	u2610
  7172  00638E                     u2611:
  7173  00638E  EFBC  F031         	goto	l3205
  7174  006392                     u2610:
  7175  006392                     l3209:
  7176  006392  5012               	movf	___llmod@divisor^0,w,c
  7177  006394  5C0E               	subwf	___llmod@dividend^0,w,c
  7178  006396  5013               	movf	(___llmod@divisor+1)^0,w,c
  7179  006398  580F               	subwfb	(___llmod@dividend+1)^0,w,c
  7180  00639A  5014               	movf	(___llmod@divisor+2)^0,w,c
  7181  00639C  5810               	subwfb	(___llmod@dividend+2)^0,w,c
  7182  00639E  5015               	movf	(___llmod@divisor+3)^0,w,c
  7183  0063A0  5811               	subwfb	(___llmod@dividend+3)^0,w,c
  7184  0063A2  A0D8               	btfss	status,0,c
  7185  0063A4  EFD6  F031         	goto	u2621
  7186  0063A8  EFD8  F031         	goto	u2620
  7187  0063AC                     u2621:
  7188  0063AC  EFE0  F031         	goto	l3213
  7189  0063B0                     u2620:
  7190  0063B0  5012               	movf	___llmod@divisor^0,w,c
  7191  0063B2  5E0E               	subwf	___llmod@dividend^0,f,c
  7192  0063B4  5013               	movf	(___llmod@divisor+1)^0,w,c
  7193  0063B6  5A0F               	subwfb	(___llmod@dividend+1)^0,f,c
  7194  0063B8  5014               	movf	(___llmod@divisor+2)^0,w,c
  7195  0063BA  5A10               	subwfb	(___llmod@dividend+2)^0,f,c
  7196  0063BC  5015               	movf	(___llmod@divisor+3)^0,w,c
  7197  0063BE  5A11               	subwfb	(___llmod@dividend+3)^0,f,c
  7198  0063C0                     l3213:
  7199  0063C0  90D8               	bcf	status,0,c
  7200  0063C2  3215               	rrcf	(___llmod@divisor+3)^0,f,c
  7201  0063C4  3214               	rrcf	(___llmod@divisor+2)^0,f,c
  7202  0063C6  3213               	rrcf	(___llmod@divisor+1)^0,f,c
  7203  0063C8  3212               	rrcf	___llmod@divisor^0,f,c
  7204  0063CA  2E16               	decfsz	___llmod@counter^0,f,c
  7205  0063CC  EFC9  F031         	goto	l3209
  7206  0063D0                     l956:
  7207  0063D0  C00E  F00E         	movff	___llmod@dividend,?___llmod
  7208  0063D4  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  7209  0063D8  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  7210  0063DC  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  7211  0063E0  0012               	return		;funcret
  7212  0063E2                     __end_of___llmod:
  7213                           	callstack 0
  7214                           
  7215 ;; *************** function ___lldiv *****************
  7216 ;; Defined at:
  7217 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\__lldiv.c"
  7218 ;; Parameters:    Size  Location     Type
  7219 ;;  dividend        4    0[COMRAM] unsigned long 
  7220 ;;  divisor         4    4[COMRAM] unsigned long 
  7221 ;; Auto vars:     Size  Location     Type
  7222 ;;  quotient        4    8[COMRAM] unsigned long 
  7223 ;;  counter         1   12[COMRAM] unsigned char 
  7224 ;; Return value:  Size  Location     Type
  7225 ;;                  4    0[COMRAM] unsigned long 
  7226 ;; Registers used:
  7227 ;;		wreg, status,2, status,0
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7233 ;;      Params:         8       0       0       0       0       0       0
  7234 ;;      Locals:         5       0       0       0       0       0       0
  7235 ;;      Temps:          0       0       0       0       0       0       0
  7236 ;;      Totals:        13       0       0       0       0       0       0
  7237 ;;Total ram usage:       13 bytes
  7238 ;; Hardware stack levels used: 1
  7239 ;; This function calls:
  7240 ;;		Nothing
  7241 ;; This function is called by:
  7242 ;;		_compararAlarme
  7243 ;;		_MostraDisplay
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           	psect	text45
  7248  0063E2                     __ptext45:
  7249                           	callstack 0
  7250  0063E2                     ___lldiv:
  7251                           	callstack 29
  7252  0063E2  0E00               	movlw	0
  7253  0063E4  6E09               	movwf	___lldiv@quotient^0,c
  7254  0063E6  0E00               	movlw	0
  7255  0063E8  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  7256  0063EA  0E00               	movlw	0
  7257  0063EC  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  7258  0063EE  0E00               	movlw	0
  7259  0063F0  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  7260  0063F2  5005               	movf	___lldiv@divisor^0,w,c
  7261  0063F4  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  7262  0063F6  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  7263  0063F8  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  7264  0063FA  B4D8               	btfsc	status,2,c
  7265  0063FC  EF02  F032         	goto	u2471
  7266  006400  EF04  F032         	goto	u2470
  7267  006404                     u2471:
  7268  006404  EF3A  F032         	goto	l563
  7269  006408                     u2470:
  7270  006408  0E01               	movlw	1
  7271  00640A  6E0D               	movwf	___lldiv@counter^0,c
  7272  00640C  EF0E  F032         	goto	l3127
  7273  006410                     l3125:
  7274  006410  90D8               	bcf	status,0,c
  7275  006412  3605               	rlcf	___lldiv@divisor^0,f,c
  7276  006414  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  7277  006416  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  7278  006418  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  7279  00641A  2A0D               	incf	___lldiv@counter^0,f,c
  7280  00641C                     l3127:
  7281  00641C  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  7282  00641E  EF13  F032         	goto	u2481
  7283  006422  EF15  F032         	goto	u2480
  7284  006426                     u2481:
  7285  006426  EF08  F032         	goto	l3125
  7286  00642A                     u2480:
  7287  00642A                     l3129:
  7288  00642A  90D8               	bcf	status,0,c
  7289  00642C  3609               	rlcf	___lldiv@quotient^0,f,c
  7290  00642E  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  7291  006430  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  7292  006432  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  7293  006434  5005               	movf	___lldiv@divisor^0,w,c
  7294  006436  5C01               	subwf	___lldiv@dividend^0,w,c
  7295  006438  5006               	movf	(___lldiv@divisor+1)^0,w,c
  7296  00643A  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  7297  00643C  5007               	movf	(___lldiv@divisor+2)^0,w,c
  7298  00643E  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  7299  006440  5008               	movf	(___lldiv@divisor+3)^0,w,c
  7300  006442  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  7301  006444  A0D8               	btfss	status,0,c
  7302  006446  EF27  F032         	goto	u2491
  7303  00644A  EF29  F032         	goto	u2490
  7304  00644E                     u2491:
  7305  00644E  EF32  F032         	goto	l3137
  7306  006452                     u2490:
  7307  006452  5005               	movf	___lldiv@divisor^0,w,c
  7308  006454  5E01               	subwf	___lldiv@dividend^0,f,c
  7309  006456  5006               	movf	(___lldiv@divisor+1)^0,w,c
  7310  006458  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  7311  00645A  5007               	movf	(___lldiv@divisor+2)^0,w,c
  7312  00645C  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  7313  00645E  5008               	movf	(___lldiv@divisor+3)^0,w,c
  7314  006460  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  7315  006462  8009               	bsf	___lldiv@quotient^0,0,c
  7316  006464                     l3137:
  7317  006464  90D8               	bcf	status,0,c
  7318  006466  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  7319  006468  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  7320  00646A  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  7321  00646C  3205               	rrcf	___lldiv@divisor^0,f,c
  7322  00646E  2E0D               	decfsz	___lldiv@counter^0,f,c
  7323  006470  EF15  F032         	goto	l3129
  7324  006474                     l563:
  7325  006474  C009  F001         	movff	___lldiv@quotient,?___lldiv
  7326  006478  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  7327  00647C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  7328  006480  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  7329  006484  0012               	return		;funcret
  7330  006486                     __end_of___lldiv:
  7331                           	callstack 0
  7332                           
  7333 ;; *************** function ___fltol *****************
  7334 ;; Defined at:
  7335 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\fltol.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;  f1              4    0[COMRAM] unsigned long 
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;  exp1            1    9[COMRAM] unsigned char 
  7340 ;;  sign1           1    8[COMRAM] unsigned char 
  7341 ;; Return value:  Size  Location     Type
  7342 ;;                  4    0[COMRAM] long 
  7343 ;; Registers used:
  7344 ;;		wreg, status,2, status,0
  7345 ;; Tracked objects:
  7346 ;;		On entry : 0/0
  7347 ;;		On exit  : 0/0
  7348 ;;		Unchanged: 0/0
  7349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7350 ;;      Params:         4       0       0       0       0       0       0
  7351 ;;      Locals:         2       0       0       0       0       0       0
  7352 ;;      Temps:          4       0       0       0       0       0       0
  7353 ;;      Totals:        10       0       0       0       0       0       0
  7354 ;;Total ram usage:       10 bytes
  7355 ;; Hardware stack levels used: 1
  7356 ;; This function calls:
  7357 ;;		Nothing
  7358 ;; This function is called by:
  7359 ;;		_MostraDisplay
  7360 ;; This function uses a non-reentrant model
  7361 ;;
  7362                           
  7363                           	psect	text46
  7364  0069D4                     __ptext46:
  7365                           	callstack 0
  7366  0069D4                     ___fltol:
  7367                           	callstack 29
  7368  0069D4  3403               	rlcf	(___fltol@f1+2)^0,w,c
  7369  0069D6  3404               	rlcf	(___fltol@f1+3)^0,w,c
  7370  0069D8  6E0A               	movwf	___fltol@exp1^0,c
  7371  0069DA  500A               	movf	___fltol@exp1^0,w,c
  7372  0069DC  A4D8               	btfss	status,2,c
  7373  0069DE  EFF3  F034         	goto	u2531
  7374  0069E2  EFF5  F034         	goto	u2530
  7375  0069E6                     u2531:
  7376  0069E6  EFFF  F034         	goto	l3163
  7377  0069EA                     u2530:
  7378  0069EA                     l3159:
  7379  0069EA  0E00               	movlw	0
  7380  0069EC  6E01               	movwf	?___fltol^0,c
  7381  0069EE  0E00               	movlw	0
  7382  0069F0  6E02               	movwf	(?___fltol+1)^0,c
  7383  0069F2  0E00               	movlw	0
  7384  0069F4  6E03               	movwf	(?___fltol+2)^0,c
  7385  0069F6  0E00               	movlw	0
  7386  0069F8  6E04               	movwf	(?___fltol+3)^0,c
  7387  0069FA  EF6C  F035         	goto	l833
  7388  0069FE                     l3163:
  7389  0069FE  C001  F005         	movff	___fltol@f1,??___fltol
  7390  006A02  C002  F006         	movff	___fltol@f1+1,??___fltol+1
  7391  006A06  C003  F007         	movff	___fltol@f1+2,??___fltol+2
  7392  006A0A  C004  F008         	movff	___fltol@f1+3,??___fltol+3
  7393  006A0E  0E20               	movlw	32
  7394  006A10  EF0F  F035         	goto	u2540
  7395  006A14                     u2545:
  7396  006A14  90D8               	bcf	status,0,c
  7397  006A16  3208               	rrcf	(??___fltol+3)^0,f,c
  7398  006A18  3207               	rrcf	(??___fltol+2)^0,f,c
  7399  006A1A  3206               	rrcf	(??___fltol+1)^0,f,c
  7400  006A1C  3205               	rrcf	??___fltol^0,f,c
  7401  006A1E                     u2540:
  7402  006A1E  2EE8               	decfsz	wreg,f,c
  7403  006A20  EF0A  F035         	goto	u2545
  7404  006A24  5005               	movf	??___fltol^0,w,c
  7405  006A26  6E09               	movwf	___fltol@sign1^0,c
  7406  006A28  8E03               	bsf	(___fltol@f1+2)^0,7,c
  7407  006A2A  0EFF               	movlw	255
  7408  006A2C  1601               	andwf	___fltol@f1^0,f,c
  7409  006A2E  0EFF               	movlw	255
  7410  006A30  1602               	andwf	(___fltol@f1+1)^0,f,c
  7411  006A32  0EFF               	movlw	255
  7412  006A34  1603               	andwf	(___fltol@f1+2)^0,f,c
  7413  006A36  0E00               	movlw	0
  7414  006A38  1604               	andwf	(___fltol@f1+3)^0,f,c
  7415  006A3A  0E96               	movlw	150
  7416  006A3C  5E0A               	subwf	___fltol@exp1^0,f,c
  7417  006A3E  BE0A               	btfsc	___fltol@exp1^0,7,c
  7418  006A40  EF26  F035         	goto	u2550
  7419  006A44  EF24  F035         	goto	u2551
  7420  006A48                     u2551:
  7421  006A48  EF3C  F035         	goto	l3183
  7422  006A4C                     u2550:
  7423  006A4C  500A               	movf	___fltol@exp1^0,w,c
  7424  006A4E  0A80               	xorlw	128
  7425  006A50  0F97               	addlw	151
  7426  006A52  B0D8               	btfsc	status,0,c
  7427  006A54  EF2E  F035         	goto	u2561
  7428  006A58  EF30  F035         	goto	u2560
  7429  006A5C                     u2561:
  7430  006A5C  EF32  F035         	goto	l3179
  7431  006A60                     u2560:
  7432  006A60  EFF5  F034         	goto	l3159
  7433  006A64                     l3179:
  7434  006A64  90D8               	bcf	status,0,c
  7435  006A66  3204               	rrcf	(___fltol@f1+3)^0,f,c
  7436  006A68  3203               	rrcf	(___fltol@f1+2)^0,f,c
  7437  006A6A  3202               	rrcf	(___fltol@f1+1)^0,f,c
  7438  006A6C  3201               	rrcf	___fltol@f1^0,f,c
  7439  006A6E  3E0A               	incfsz	___fltol@exp1^0,f,c
  7440  006A70  EF32  F035         	goto	l3179
  7441  006A74  EF54  F035         	goto	l3193
  7442  006A78                     l3183:
  7443  006A78  0E1F               	movlw	31
  7444  006A7A  640A               	cpfsgt	___fltol@exp1^0,c
  7445  006A7C  EF42  F035         	goto	u2571
  7446  006A80  EF44  F035         	goto	u2570
  7447  006A84                     u2571:
  7448  006A84  EF4C  F035         	goto	l3191
  7449  006A88                     u2570:
  7450  006A88  EFF5  F034         	goto	l3159
  7451  006A8C                     l3189:
  7452  006A8C  90D8               	bcf	status,0,c
  7453  006A8E  3601               	rlcf	___fltol@f1^0,f,c
  7454  006A90  3602               	rlcf	(___fltol@f1+1)^0,f,c
  7455  006A92  3603               	rlcf	(___fltol@f1+2)^0,f,c
  7456  006A94  3604               	rlcf	(___fltol@f1+3)^0,f,c
  7457  006A96  060A               	decf	___fltol@exp1^0,f,c
  7458  006A98                     l3191:
  7459  006A98  500A               	movf	___fltol@exp1^0,w,c
  7460  006A9A  A4D8               	btfss	status,2,c
  7461  006A9C  EF52  F035         	goto	u2581
  7462  006AA0  EF54  F035         	goto	u2580
  7463  006AA4                     u2581:
  7464  006AA4  EF46  F035         	goto	l3189
  7465  006AA8                     u2580:
  7466  006AA8                     l3193:
  7467  006AA8  5009               	movf	___fltol@sign1^0,w,c
  7468  006AAA  B4D8               	btfsc	status,2,c
  7469  006AAC  EF5A  F035         	goto	u2591
  7470  006AB0  EF5C  F035         	goto	u2590
  7471  006AB4                     u2591:
  7472  006AB4  EF64  F035         	goto	l3197
  7473  006AB8                     u2590:
  7474  006AB8  1E04               	comf	(___fltol@f1+3)^0,f,c
  7475  006ABA  1E03               	comf	(___fltol@f1+2)^0,f,c
  7476  006ABC  1E02               	comf	(___fltol@f1+1)^0,f,c
  7477  006ABE  6C01               	negf	___fltol@f1^0,c
  7478  006AC0  0E00               	movlw	0
  7479  006AC2  2202               	addwfc	(___fltol@f1+1)^0,f,c
  7480  006AC4  2203               	addwfc	(___fltol@f1+2)^0,f,c
  7481  006AC6  2204               	addwfc	(___fltol@f1+3)^0,f,c
  7482  006AC8                     l3197:
  7483  006AC8  C001  F001         	movff	___fltol@f1,?___fltol
  7484  006ACC  C002  F002         	movff	___fltol@f1+1,?___fltol+1
  7485  006AD0  C003  F003         	movff	___fltol@f1+2,?___fltol+2
  7486  006AD4  C004  F004         	movff	___fltol@f1+3,?___fltol+3
  7487  006AD8                     l833:
  7488  006AD8  0012               	return		;funcret
  7489  006ADA                     __end_of___fltol:
  7490                           	callstack 0
  7491                           
  7492 ;; *************** function ___fleq *****************
  7493 ;; Defined at:
  7494 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\fleq.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;  ff1             4    0[COMRAM] long 
  7497 ;;  ff2             4    4[COMRAM] long 
  7498 ;; Auto vars:     Size  Location     Type
  7499 ;;		None
  7500 ;; Return value:  Size  Location     Type
  7501 ;;		None               void
  7502 ;; Registers used:
  7503 ;;		wreg, status,2, status,0
  7504 ;; Tracked objects:
  7505 ;;		On entry : 0/0
  7506 ;;		On exit  : 0/0
  7507 ;;		Unchanged: 0/0
  7508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7509 ;;      Params:         8       0       0       0       0       0       0
  7510 ;;      Locals:         0       0       0       0       0       0       0
  7511 ;;      Temps:          4       0       0       0       0       0       0
  7512 ;;      Totals:        12       0       0       0       0       0       0
  7513 ;;Total ram usage:       12 bytes
  7514 ;; Hardware stack levels used: 1
  7515 ;; This function calls:
  7516 ;;		Nothing
  7517 ;; This function is called by:
  7518 ;;		_MostraDisplay
  7519 ;; This function uses a non-reentrant model
  7520 ;;
  7521                           
  7522                           	psect	text47
  7523  006486                     __ptext47:
  7524                           	callstack 0
  7525  006486                     ___fleq:
  7526                           	callstack 29
  7527  006486  0E00               	movlw	0
  7528  006488  1401               	andwf	___fleq@ff1^0,w,c
  7529  00648A  6E09               	movwf	??___fleq^0,c
  7530  00648C  0E00               	movlw	0
  7531  00648E  1402               	andwf	(___fleq@ff1+1)^0,w,c
  7532  006490  6E0A               	movwf	(??___fleq+1)^0,c
  7533  006492  0E80               	movlw	128
  7534  006494  1403               	andwf	(___fleq@ff1+2)^0,w,c
  7535  006496  6E0B               	movwf	(??___fleq+2)^0,c
  7536  006498  0E7F               	movlw	127
  7537  00649A  1404               	andwf	(___fleq@ff1+3)^0,w,c
  7538  00649C  6E0C               	movwf	(??___fleq+3)^0,c
  7539  00649E  5009               	movf	??___fleq^0,w,c
  7540  0064A0  100A               	iorwf	(??___fleq+1)^0,w,c
  7541  0064A2  100B               	iorwf	(??___fleq+2)^0,w,c
  7542  0064A4  100C               	iorwf	(??___fleq+3)^0,w,c
  7543  0064A6  A4D8               	btfss	status,2,c
  7544  0064A8  EF58  F032         	goto	u2501
  7545  0064AC  EF5A  F032         	goto	u2500
  7546  0064B0                     u2501:
  7547  0064B0  EF62  F032         	goto	l3145
  7548  0064B4                     u2500:
  7549  0064B4  0E00               	movlw	0
  7550  0064B6  6E01               	movwf	___fleq@ff1^0,c
  7551  0064B8  0E00               	movlw	0
  7552  0064BA  6E02               	movwf	(___fleq@ff1+1)^0,c
  7553  0064BC  0E00               	movlw	0
  7554  0064BE  6E03               	movwf	(___fleq@ff1+2)^0,c
  7555  0064C0  0E00               	movlw	0
  7556  0064C2  6E04               	movwf	(___fleq@ff1+3)^0,c
  7557  0064C4                     l3145:
  7558  0064C4  0E00               	movlw	0
  7559  0064C6  1405               	andwf	___fleq@ff2^0,w,c
  7560  0064C8  6E09               	movwf	??___fleq^0,c
  7561  0064CA  0E00               	movlw	0
  7562  0064CC  1406               	andwf	(___fleq@ff2+1)^0,w,c
  7563  0064CE  6E0A               	movwf	(??___fleq+1)^0,c
  7564  0064D0  0E80               	movlw	128
  7565  0064D2  1407               	andwf	(___fleq@ff2+2)^0,w,c
  7566  0064D4  6E0B               	movwf	(??___fleq+2)^0,c
  7567  0064D6  0E7F               	movlw	127
  7568  0064D8  1408               	andwf	(___fleq@ff2+3)^0,w,c
  7569  0064DA  6E0C               	movwf	(??___fleq+3)^0,c
  7570  0064DC  5009               	movf	??___fleq^0,w,c
  7571  0064DE  100A               	iorwf	(??___fleq+1)^0,w,c
  7572  0064E0  100B               	iorwf	(??___fleq+2)^0,w,c
  7573  0064E2  100C               	iorwf	(??___fleq+3)^0,w,c
  7574  0064E4  A4D8               	btfss	status,2,c
  7575  0064E6  EF77  F032         	goto	u2511
  7576  0064EA  EF79  F032         	goto	u2510
  7577  0064EE                     u2511:
  7578  0064EE  EF81  F032         	goto	l3149
  7579  0064F2                     u2510:
  7580  0064F2  0E00               	movlw	0
  7581  0064F4  6E05               	movwf	___fleq@ff2^0,c
  7582  0064F6  0E00               	movlw	0
  7583  0064F8  6E06               	movwf	(___fleq@ff2+1)^0,c
  7584  0064FA  0E00               	movlw	0
  7585  0064FC  6E07               	movwf	(___fleq@ff2+2)^0,c
  7586  0064FE  0E00               	movlw	0
  7587  006500  6E08               	movwf	(___fleq@ff2+3)^0,c
  7588  006502                     l3149:
  7589  006502  5005               	movf	___fleq@ff2^0,w,c
  7590  006504  1801               	xorwf	___fleq@ff1^0,w,c
  7591  006506  E10F               	bnz	u2520
  7592  006508  5006               	movf	(___fleq@ff2+1)^0,w,c
  7593  00650A  1802               	xorwf	(___fleq@ff1+1)^0,w,c
  7594  00650C  E10C               	bnz	u2520
  7595  00650E  5007               	movf	(___fleq@ff2+2)^0,w,c
  7596  006510  1803               	xorwf	(___fleq@ff1+2)^0,w,c
  7597  006512  E109               	bnz	u2520
  7598  006514  5008               	movf	(___fleq@ff2+3)^0,w,c
  7599  006516  1804               	xorwf	(___fleq@ff1+3)^0,w,c
  7600  006518  B4D8               	btfsc	status,2,c
  7601  00651A  EF91  F032         	goto	u2521
  7602  00651E  EF93  F032         	goto	u2520
  7603  006522                     u2521:
  7604  006522  EF96  F032         	goto	l3153
  7605  006526                     u2520:
  7606  006526  90D8               	bcf	status,0,c
  7607  006528  EF97  F032         	goto	l795
  7608  00652C                     l3153:
  7609  00652C  80D8               	bsf	status,0,c
  7610  00652E                     l795:
  7611  00652E  0012               	return		;funcret
  7612  006530                     __end_of___fleq:
  7613                           	callstack 0
  7614                           
  7615                           	psect	rparam
  7616  0000                     
  7617                           	psect	idloc
  7618                           
  7619                           ;Config register IDLOC0 @ 0x200000
  7620                           ;	unspecified, using default values
  7621  200000                     	org	2097152
  7622  200000  FF                 	db	255
  7623                           
  7624                           ;Config register IDLOC1 @ 0x200001
  7625                           ;	unspecified, using default values
  7626  200001                     	org	2097153
  7627  200001  FF                 	db	255
  7628                           
  7629                           ;Config register IDLOC2 @ 0x200002
  7630                           ;	unspecified, using default values
  7631  200002                     	org	2097154
  7632  200002  FF                 	db	255
  7633                           
  7634                           ;Config register IDLOC3 @ 0x200003
  7635                           ;	unspecified, using default values
  7636  200003                     	org	2097155
  7637  200003  FF                 	db	255
  7638                           
  7639                           ;Config register IDLOC4 @ 0x200004
  7640                           ;	unspecified, using default values
  7641  200004                     	org	2097156
  7642  200004  FF                 	db	255
  7643                           
  7644                           ;Config register IDLOC5 @ 0x200005
  7645                           ;	unspecified, using default values
  7646  200005                     	org	2097157
  7647  200005  FF                 	db	255
  7648                           
  7649                           ;Config register IDLOC6 @ 0x200006
  7650                           ;	unspecified, using default values
  7651  200006                     	org	2097158
  7652  200006  FF                 	db	255
  7653                           
  7654                           ;Config register IDLOC7 @ 0x200007
  7655                           ;	unspecified, using default values
  7656  200007                     	org	2097159
  7657  200007  FF                 	db	255
  7658                           
  7659                           	psect	config
  7660                           
  7661                           ; Padding undefined space
  7662  300000                     	org	3145728
  7663  300000  FF                 	db	255
  7664                           
  7665                           ;Config register CONFIG1H @ 0x300001
  7666                           ;	Oscillator Selection bits
  7667                           ;	OSC = HS, HS oscillator
  7668                           ;	Fail-Safe Clock Monitor Enable bit
  7669                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  7670                           ;	Internal/External Oscillator Switchover bit
  7671                           ;	IESO = OFF, Oscillator Switchover mode disabled
  7672  300001                     	org	3145729
  7673  300001  02                 	db	2
  7674                           
  7675                           ;Config register CONFIG2L @ 0x300002
  7676                           ;	Power-up Timer Enable bit
  7677                           ;	PWRT = OFF, PWRT disabled
  7678                           ;	Brown-out Reset Enable bits
  7679                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  7680                           ;	Brown Out Reset Voltage bits
  7681                           ;	BORV = 0x2E, user specified literal
  7682  300002                     	org	3145730
  7683  300002  71                 	db	369
  7684                           
  7685                           ;Config register CONFIG2H @ 0x300003
  7686                           ;	Watchdog Timer Enable bit
  7687                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7688                           ;	Watchdog Timer Postscale Select bits
  7689                           ;	WDTPS = 1, 1:1
  7690  300003                     	org	3145731
  7691  300003  00                 	db	0
  7692                           
  7693                           ; Padding undefined space
  7694  300004                     	org	3145732
  7695  300004  FF                 	db	255
  7696                           
  7697                           ;Config register CONFIG3H @ 0x300005
  7698                           ;	CCP2 MUX bit
  7699                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  7700                           ;	PORTB A/D Enable bit
  7701                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  7702                           ;	Low-Power Timer1 Oscillator Enable bit
  7703                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  7704                           ;	MCLR Pin Enable bit
  7705                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  7706  300005                     	org	3145733
  7707  300005  83                 	db	131
  7708                           
  7709                           ;Config register CONFIG4L @ 0x300006
  7710                           ;	Stack Full/Underflow Reset Enable bit
  7711                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  7712                           ;	Single-Supply ICSP Enable bit
  7713                           ;	LVP = OFF, Single-Supply ICSP disabled
  7714                           ;	Extended Instruction Set Enable bit
  7715                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  7716                           ;	Background Debugger Enable bit
  7717                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  7718  300006                     	org	3145734
  7719  300006  80                 	db	128
  7720                           
  7721                           ; Padding undefined space
  7722  300007                     	org	3145735
  7723  300007  FF                 	db	255
  7724                           
  7725                           ;Config register CONFIG5L @ 0x300008
  7726                           ;	Code Protection bit
  7727                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  7728                           ;	Code Protection bit
  7729                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  7730                           ;	Code Protection bit
  7731                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  7732                           ;	Code Protection bit
  7733                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  7734  300008                     	org	3145736
  7735  300008  0F                 	db	15
  7736                           
  7737                           ;Config register CONFIG5H @ 0x300009
  7738                           ;	Boot Block Code Protection bit
  7739                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  7740                           ;	Data EEPROM Code Protection bit
  7741                           ;	CPD = OFF, Data EEPROM not code-protected
  7742  300009                     	org	3145737
  7743  300009  C0                 	db	192
  7744                           
  7745                           ;Config register CONFIG6L @ 0x30000A
  7746                           ;	Write Protection bit
  7747                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  7748                           ;	Write Protection bit
  7749                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  7750                           ;	Write Protection bit
  7751                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  7752                           ;	Write Protection bit
  7753                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  7754  30000A                     	org	3145738
  7755  30000A  0F                 	db	15
  7756                           
  7757                           ;Config register CONFIG6H @ 0x30000B
  7758                           ;	Configuration Register Write Protection bit
  7759                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  7760                           ;	Boot Block Write Protection bit
  7761                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  7762                           ;	Data EEPROM Write Protection bit
  7763                           ;	WRTD = OFF, Data EEPROM not write-protected
  7764  30000B                     	org	3145739
  7765  30000B  E0                 	db	224
  7766                           
  7767                           ;Config register CONFIG7L @ 0x30000C
  7768                           ;	Table Read Protection bit
  7769                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  7770                           ;	Table Read Protection bit
  7771                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  7772                           ;	Table Read Protection bit
  7773                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  7774                           ;	Table Read Protection bit
  7775                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  7776  30000C                     	org	3145740
  7777  30000C  0F                 	db	15
  7778                           
  7779                           ;Config register CONFIG7H @ 0x30000D
  7780                           ;	Boot Block Table Read Protection bit
  7781                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  7782  30000D                     	org	3145741
  7783  30000D  40                 	db	64
  7784                           tosu	equ	0xFFF
  7785                           tosh	equ	0xFFE
  7786                           tosl	equ	0xFFD
  7787                           stkptr	equ	0xFFC
  7788                           pclatu	equ	0xFFB
  7789                           pclath	equ	0xFFA
  7790                           pcl	equ	0xFF9
  7791                           tblptru	equ	0xFF8
  7792                           tblptrh	equ	0xFF7
  7793                           tblptrl	equ	0xFF6
  7794                           tablat	equ	0xFF5
  7795                           prodh	equ	0xFF4
  7796                           prodl	equ	0xFF3
  7797                           indf0	equ	0xFEF
  7798                           postinc0	equ	0xFEE
  7799                           postdec0	equ	0xFED
  7800                           preinc0	equ	0xFEC
  7801                           plusw0	equ	0xFEB
  7802                           fsr0h	equ	0xFEA
  7803                           fsr0l	equ	0xFE9
  7804                           wreg	equ	0xFE8
  7805                           indf1	equ	0xFE7
  7806                           postinc1	equ	0xFE6
  7807                           postdec1	equ	0xFE5
  7808                           preinc1	equ	0xFE4
  7809                           plusw1	equ	0xFE3
  7810                           fsr1h	equ	0xFE2
  7811                           fsr1l	equ	0xFE1
  7812                           bsr	equ	0xFE0
  7813                           indf2	equ	0xFDF
  7814                           postinc2	equ	0xFDE
  7815                           postdec2	equ	0xFDD
  7816                           preinc2	equ	0xFDC
  7817                           plusw2	equ	0xFDB
  7818                           fsr2h	equ	0xFDA
  7819                           fsr2l	equ	0xFD9
  7820                           status	equ	0xFD8

Data Sizes:
    Strings     265
    Constant    26
    Data        10
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     41      83
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    lcdString@msg	PTR unsigned char  size(2) Largest target is 18
		 -> STR_31(CODE[9]), STR_30(CODE[9]), STR_29(CODE[13]), STR_28(CODE[15]), 
		 -> STR_27(CODE[16]), STR_26(CODE[16]), STR_25(CODE[16]), STR_24(CODE[16]), 
		 -> STR_23(CODE[16]), STR_22(CODE[16]), STR_21(CODE[16]), STR_20(CODE[16]), 
		 -> STR_19(CODE[16]), STR_18(CODE[16]), STR_17(CODE[17]), STR_16(CODE[16]), 
		 -> STR_15(CODE[16]), STR_14(CODE[16]), STR_13(CODE[16]), STR_12(CODE[16]), 
		 -> STR_11(CODE[15]), STR_10(CODE[18]), STR_9(CODE[7]), STR_8(CODE[15]), 
		 -> STR_7(CODE[15]), STR_6(CODE[15]), STR_5(CODE[15]), STR_4(CODE[6]), 
		 -> STR_3(CODE[14]), STR_2(CODE[17]), STR_1(CODE[6]), 


Critical Paths under _main in COMRAM

    _main->_menuAccess
    _ssdInit->_pinMode
    _pwmInit->_pwmFrequency
    _menuAccess->_menu
    _menu->_selectFunction
    _selectFunction->_alarmeHora
    _selectFunction->_horaConfig
    _radioFreq->_lcdString
    _radioConfig->_lcdString
    _horaConfig->_lcdString
    _alarmeHora->_lcdString
    _alarmeConfig->_lcdString
    _lcdInit->_lcdCommand
    _pushNibble->_soWrite
    _kpInit->_pinMode
    _soInit->_pinMode
    _kpDebounce->_soWrite
    _compararAlarme->_lcdString
    _ssdUpdate->_soWrite
    _pwmFrequency->___aldiv
    _adcInit->_pinMode
    _MostraDisplay->_ssdDigit
    _ssdDigit->___llmod
    _lcdString->_lcdChar
    _lcdNumber->___awmod
    _lcdNumber->_lcdChar
    _lcdChar->_pushByte
    ___awmod->___awdiv
    _lcdCommand->_pushByte
    _pushByte->_soWrite
    _soWrite->_digitalWrite
    _PulseEnClock->_digitalWrite
    _PulseClockData->_digitalWrite
    _pulseEnablePin->_digitalWrite
    ___llmod->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  544568
                                             38 COMRAM     3     3      0
                      _MostraDisplay
                            _adcInit
                     _compararAlarme
                         _kpDebounce
                             _kpInit
                         _lcdCommand
                            _lcdInit
                         _menuAccess
                            _pwmInit
                           _ssdDigit
                            _ssdInit
                          _ssdUpdate
                          _timerInit
                         _timerReset
                          _timerWait
 ---------------------------------------------------------------------------------
 (1) _timerInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ssdInit                                              0     0      0    5136
                            _pinMode
                             _soInit
 ---------------------------------------------------------------------------------
 (1) _pwmInit                                              0     0      0     702
                       _pwmFrequency
 ---------------------------------------------------------------------------------
 (1) _menuAccess                                           2     2      0  324572
                                             36 COMRAM     2     2      0
                             _kpRead
                          _kpReadKey
                               _menu
 ---------------------------------------------------------------------------------
 (2) _menu                                                 6     6      0  324512
                                             30 COMRAM     6     6      0
                             _kpRead
                          _kpReadKey
                         _lcdCommand
                          _lcdString
                     _selectFunction
                          _ssdUpdate
                         _timerReset
                          _timerWait
 ---------------------------------------------------------------------------------
 (3) _selectFunction                                       4     2      2  270298
                                             26 COMRAM     4     2      2
                       _alarmeConfig
                         _alarmeHora
                         _horaConfig
                        _radioConfig
                          _radioFreq
 ---------------------------------------------------------------------------------
 (4) _radioFreq                                            4     4      0   54097
                                             20 COMRAM     4     4      0
                             _kpRead
                          _kpReadKey
                         _lcdCommand
                          _lcdString
                          _ssdUpdate
                         _timerReset
                          _timerWait
 ---------------------------------------------------------------------------------
 (4) _radioConfig                                          4     4      0   54097
                                             20 COMRAM     4     4      0
                             _kpRead
                          _kpReadKey
                         _lcdCommand
                          _lcdString
                          _ssdUpdate
                         _timerReset
                          _timerWait
 ---------------------------------------------------------------------------------
 (4) _horaConfig                                           6     4      2   54266
                                             20 COMRAM     6     4      2
                             _kpRead
                          _kpReadKey
                         _lcdCommand
                          _lcdString
                          _ssdUpdate
                         _timerReset
                          _timerWait
 ---------------------------------------------------------------------------------
 (4) _alarmeHora                                           6     4      2   54266
                                             20 COMRAM     6     4      2
                             _kpRead
                          _kpReadKey
                         _lcdCommand
                          _lcdString
                          _ssdUpdate
                         _timerReset
                          _timerWait
 ---------------------------------------------------------------------------------
 (4) _alarmeConfig                                         4     4      0   53474
                                             20 COMRAM     4     4      0
                             _kpRead
                          _kpReadKey
                         _lcdCommand
                          _lcdString
                          _ssdUpdate
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              0     0      0   42412
                         _delayMicro
                          _delayMili
                         _lcdCommand
                            _pinMode
                         _pushNibble
                             _soInit
 ---------------------------------------------------------------------------------
 (2) _pushNibble                                           3     1      2   18141
                                              9 COMRAM     3     1      2
                       _digitalWrite
                     _pulseEnablePin
                            _soWrite
 ---------------------------------------------------------------------------------
 (1) _kpInit                                               0     0      0    5136
                            _pinMode
                             _soInit
 ---------------------------------------------------------------------------------
 (2) _soInit                                               0     0      0    2568
                            _pinMode
 ---------------------------------------------------------------------------------
 (1) _kpDebounce                                           5     5      0   11233
                                              9 COMRAM     5     5      0
                        _digitalRead
                            _soWrite
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          5     3      2     372
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _compararAlarme                                       6     6      0   56024
                                             20 COMRAM     4     4      0
                            ___lldiv
                             _kpRead
                          _kpReadKey
                         _lcdCommand
                          _lcdString
                       _pwmFrequency
                          _ssdUpdate
                         _timerReset
                          _timerWait
 ---------------------------------------------------------------------------------
 (1) _timerWait                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timerReset                                           4     2      2     623
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ssdUpdate                                            2     2      0   14081
                                              9 COMRAM     2     2      0
                       _digitalWrite
                            _soWrite
 ---------------------------------------------------------------------------------
 (2) _pwmFrequency                                         2     0      2     702
                                             14 COMRAM     2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (5) _kpReadKey                                            5     5      0      60
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (5) _kpRead                                               2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              0     0      0    2568
                            _pinMode
 ---------------------------------------------------------------------------------
 (3) _pinMode                                              6     2      4    2568
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _MostraDisplay                                        8     8      0   62865
                                             24 COMRAM     8     8      0
                             ___fleq
                            ___fltol
                            ___lldiv
                            ___llmod
                         _lcdCommand
                          _lcdNumber
                          _lcdString
                           _ssdDigit
 ---------------------------------------------------------------------------------
 (1) _ssdDigit                                             2     1      1     784
                                             22 COMRAM     2     1      1
                            ___lldiv (ARG)
                            ___llmod (ARG)
 ---------------------------------------------------------------------------------
 (5) _lcdString                                            6     4      2   20881
                                             14 COMRAM     6     4      2
                            _lcdChar
 ---------------------------------------------------------------------------------
 (2) _lcdNumber                                            4     2      2   19729
                                             14 COMRAM     4     2      2
                            ___awdiv
                            ___awmod
                            ___fltol (ARG)
                            _lcdChar
 ---------------------------------------------------------------------------------
 (6) _lcdChar                                              1     1      0   18435
                                             13 COMRAM     1     1      0
                         _delayMicro
                           _pushByte
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     448
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _lcdCommand                                           1     1      0   18405
                                             13 COMRAM     1     1      0
                          _delayMili
                           _pushByte
 ---------------------------------------------------------------------------------
 (7) _pushByte                                             4     2      2   18033
                                              9 COMRAM     4     2      2
                       _digitalWrite
                     _pulseEnablePin
                            _soWrite
 ---------------------------------------------------------------------------------
 (2) _soWrite                                              3     1      2   10749
                                              6 COMRAM     3     1      2
                     _PulseClockData
                       _PulseEnClock
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (3) _PulseEnClock                                         0     0      0    3332
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (3) _PulseClockData                                       0     0      0    3332
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (8) _pulseEnablePin                                       0     0      0    3712
                         _delayMicro
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (3) _digitalWrite                                         6     2      4    3332
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _delayMicro                                           4     2      2     380
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _delayMili                                            5     3      2     350
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     919
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8    1226
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     381
                                              0 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (2) ___fleq                                              12     4      8     494
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MostraDisplay
     ___fleq
     ___fltol
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _lcdCommand
       _delayMili
       _pushByte
         _digitalWrite
         _pulseEnablePin
           _delayMicro
           _digitalWrite
         _soWrite
           _PulseClockData
             _digitalWrite
           _PulseEnClock
             _digitalWrite
           _digitalWrite
     _lcdNumber
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       ___fltol (ARG)
       _lcdChar (ARG)
         _delayMicro
         _pushByte
     _lcdString
       _lcdChar
     _ssdDigit
       ___lldiv (ARG)
       ___llmod (ARG)
   _adcInit
     _pinMode
   _compararAlarme
     ___lldiv
     _kpRead
     _kpReadKey
     _lcdCommand
     _lcdString
     _pwmFrequency
       ___aldiv
     _ssdUpdate
       _digitalWrite
       _soWrite
     _timerReset
     _timerWait
   _kpDebounce
     _digitalRead
     _soWrite
   _kpInit
     _pinMode
     _soInit
       _pinMode
   _lcdCommand
   _lcdInit
     _delayMicro
     _delayMili
     _lcdCommand
     _pinMode
     _pushNibble
       _digitalWrite
       _pulseEnablePin
       _soWrite
     _soInit
   _menuAccess
     _kpRead
     _kpReadKey
     _menu
       _kpRead
       _kpReadKey
       _lcdCommand
       _lcdString
       _selectFunction
         _alarmeConfig
           _kpRead
           _kpReadKey
           _lcdCommand
           _lcdString
           _ssdUpdate
         _alarmeHora
           _kpRead
           _kpReadKey
           _lcdCommand
           _lcdString
           _ssdUpdate
           _timerReset
           _timerWait
         _horaConfig
           _kpRead
           _kpReadKey
           _lcdCommand
           _lcdString
           _ssdUpdate
           _timerReset
           _timerWait
         _radioConfig
           _kpRead
           _kpReadKey
           _lcdCommand
           _lcdString
           _ssdUpdate
           _timerReset
           _timerWait
         _radioFreq
           _kpRead
           _kpReadKey
           _lcdCommand
           _lcdString
           _ssdUpdate
           _timerReset
           _timerWait
       _ssdUpdate
       _timerReset
       _timerWait
   _pwmInit
     _pwmFrequency
   _ssdDigit
   _ssdInit
     _pinMode
     _soInit
   _ssdUpdate
   _timerInit
   _timerReset
   _timerWait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     29      53       1       65.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      53      15        0.0%
DATA                 0      0      53       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Dec 17 22:51:12 2021

         _pulseEnablePin 5F3A             lcdString@msg 000F                       _AD 0042  
                     l73 6C9A                       l90 6E08                       l76 6CF6  
                     l87 6DAC             ___awdiv@sign 0006                       _v0 0047  
                     _v1 0046                       _v2 0045                       _v3 0044  
                     _am 0032                       _fm 0036   __end_of_compararAlarme 65DA  
                    l111 73B6                      l132 7558                      l205 62D6  
                    l310 70A4                      l143 697A                      l232 6848  
                    l305 77A6                      l401 5F7A                      l217 65D8  
                    l410 5D82                      l314 70A4                      l146 69D2  
                    l227 7ED8                      l404 5E0E                      l156 6358  
                    l309 70A8                      l430 61E2                      l510 60BC  
                    l407 616E                      l424 6066                      l256 5FC2  
                    l433 673C                      l418 5DA0                      l362 625A  
                    l530 5DC2                      l339 79F4                      l507 7214  
                    l356 5D30                      l524 5D3C                      l196 7C4C  
                    l452 5D64                      l381 5EC4                      l533 5D26  
                    l462 5E62                      l470 6010                      l615 6BE4  
                    l527 5D4A                      l392 5D1E                      l376 6F26  
                    l465 5E38                      l449 5DE8                      l570 6484  
                    l378 6F3E                      l563 6474                      l459 5F38  
                    l398 5E92                      l833 6AD8                      l497 6114  
                    l780 6688                      l767 6800                      l795 652E  
                    l963 63E0                      l956 63D0                      u250 6224  
                    u251 6220                      u260 6258                      u244 6204  
                    u261 6254                      u245 61FE                      u270 5D4A  
                    _PR2 000FCB                      u271 5D46  __size_of_selectFunction 0082  
           ___awmod@sign 000E                      wreg 000FE8             ___fltol@exp1 000A  
                   l3001 7AC6                     l3011 7B34                     l3003 7B0A  
                   l3101 7014                     l3021 7B80                     l3013 7B40  
                   l3005 7B1E                     l3111 7078                     l3103 7030  
                   l3015 7B50                     l3007 7B2A                     l3121 63F2  
                   l3201 635A                     l2401 76D6                     l1361 6238  
                   l3017 7B60                     l3025 7B90                     l3009 7B2E  
                   l3033 7BEC                     l3131 6434                     l3123 6408  
                   l3211 63B0                     l3203 6370                     l2411 7768  
                   l2403 76F0                     l1363 623C                     l1355 61EC  
                   l3115 5EFC                     l3027 7BD4                     l3019 7B70  
                   l3035 7C28                     l3141 6486                     l3133 6452  
                   l3125 6410                     l3213 63C0                     l3205 6378  
                   l2413 7788                     l2405 7710                     l2421 5FD8  
                   l3061 60C0                     l3301 7D78                     l1365 6258  
                   l1357 6224                     l1349 61E4                     l3053 5DC4  
                   l2501 71D2                     l3109 705C                     l3117 5DEC  
                   l3037 7C2C                     l3029 7BE0                     l3221 6288  
                   l3151 6526                     l3143 64B4                     l3135 6462  
                   l3127 641C                     l3119 63E2                     l3215 63CA  
                   l3207 6384                     l2407 7732                     l2415 5E3A  
                   l2431 5FFA                     l3055 6170                     l3071 60FA  
                   l3063 60D0                     l3303 7DA8                     l3039 7C30  
                   l3223 6290                     l3311 5D4C                     l3153 652C  
                   l3145 64C4                     l3137 6464                     l3129 642A  
                   l3209 6392                     l2409 774E                     l2441 5F5A  
                   l2417 5E10                     l2433 5FFC                     l3057 617C  
                   l3073 60FE                     l3065 60D4                     l3305 7E00  
                   l2513 5D28                     l1369 5D3C                     l3241 65D0  
                   l2521 6C10                     l2601 6DE4                     l3225 62A2  
                   l3217 625C                     l3313 5D4E                     l3321 6068  
                   l3401 6854                     l3147 64F2                     l3171 6A3E  
                   l3163 69FE                     l3139 646E                     l2435 600C  
                   l2427 5FDC                     l2419 5FC4                     l2443 6118  
                   l2451 5D86                     l3059 61C8                     l3075 6110  
                   l3067 60E4                     l3307 7E30                     l3323 5F7C  
                   l2507 71DA                     l3243 65D0                     l3235 6530  
                   l3331 5E94                     l2611 7216                     l2523 6C16  
                   l2515 6BE6                     l2603 6DE8                     l3219 6278  
                   l3315 5D52                     l2187 5D20                     l3411 6874  
                   l3403 685C                     l3149 6502                     l3181 6A6E  
                   l3173 6A4C                     l3165 6A28                     l3157 69D4  
                   l2445 5E64                     l2381 75A8                     l2437 5F3A  
                   l2429 5FF4                     l2453 5D94                     l2461 603A  
                   l3069 60E8                     l3309 7E84                     l3325 5FB8  
                   l3237 65AC                     l3093 6FCC                     l3085 6F84  
                   l3077 6F40                     l3333 5EC0                     l3341 6710  
                   l2621 7236                     l2613 7222                     l2701 7494  
                   l3501 6CBC                     l2541 6C6C                     l2525 6C26  
                   l2517 6BF2                     l2605 6DEC                     l3229 62AA  
                   l3317 5D54                     l2189 5D24                     l3413 6878  
                   l3405 6860                     l3191 6A98                     l3183 6A78  
                   l3167 6A2A                     l3159 69EA                     l2447 5E70  
                   l2391 7642                     l2383 75CA                     l2375 755A  
                   l2439 5F4E                     l2455 5D68                     l2463 603E  
                   l3327 5FBA                     l2471 5DB8                     l3239 65BE  
                   l3095 6FE8                     l3087 6FA0                     l3079 6F5C  
                   l3351 6E0A                     l3343 671E                     l3335 668A  
                   l2631 7284                     l2623 7242                     l2615 722E  
                   l3503 7506                     l2711 74DA                     l2543 6C7C  
                   l2551 6CA6                     l2535 6C40                     l2527 6C2C  
                   l2519 6BFE                     l3319 5D58                     l3415 6880  
                   l3407 6868                     l3423 688C                     l3193 6AA8  
                   l3169 6A3A                     l2449 5E74                     l2393 765E  
                   l2385 75E6                     l2377 7576                     l2457 6012  
                   l3281 7C9C                     l2801 77F6                     l3329 5FBE  
                   l2481 7122                     l2473 5DBC                     l2465 5DA2  
                   l3273 65D4                     l3361 6EAC                     l3353 6E1A  
                   l3345 672A                     l3337 66EA                     l3505 7364  
                   l2641 72F2                     l2633 72A0                     l2625 7246  
                   l2705 74B0                     l2721 7534                     l2545 6C8E  
                   l2553 6CD2                     l2537 6C4C                     l2529 6C38  
                   l3417 6884                     l3409 686C                     l3425 68C6  
                   l3195 6AB8                     l3179 6A64                     l2395 7678  
                   l2387 7600                     l2379 7588                     l2459 601E  
                   l3291 7CDE                     l3283 7CA2                     l3275 7C4E  
                   l2811 7890                     l2803 7818                     l2491 7172  
                   l2483 7136                     l2475 5DC0                     l2467 5DAC  
                   l3371 6F14                     l3363 6ECA                     l3347 6730  
                   l3339 66F6                     l3507 699C                     l2731 68D2  
                   l2651 7338                     l2635 72B8                     l2627 7262  
                   l2723 7538                     l2707 74C2                     l2555 6CD6  
                   l2547 6C96                     l2539 6C50                     l2571 6D28  
                   l2563 6CF8                     l3197 6AC8                     l3189 6A8C  
                   l2397 7698                     l2389 7620                     l2901 67A0  
                   l3293 7CEA                     l3285 7CAE                     l2821 7924  
                   l2813 78AC                     l2805 7834                     l3509 71EE  
                   l2493 718A                     l2485 713E                     l2477 70AA  
                   l2469 5DB0                     l3373 6F1A                     l3365 6EF4  
                   l3357 6E3A                     l3349 6736                     l2741 6912  
                   l2733 68DE                     l2645 730E                     l2637 72C4  
                   l2629 7272                     l2661 7392                     l2725 753C  
                   l2709 74CE                     l2557 6CDA                     l2573 6D38  
                   l2565 6D04                     l2399 76BA                     l2911 67D4  
                   l2903 67AE                     l3295 7CF0                     l3287 7CB4  
                   l3279 7C8A                     l2831 79AE                     l2823 7936  
                   l2815 78BE                     l2807 7846                     l2495 719E  
                   l2487 7156                     l2479 710A                     l3375 6F1E  
                   l3359 6E86                     l2751 692C                     l2743 6918  
                   l2735 68EA                     l2663 7396                     l2647 7320  
                   l2639 72D6                     l2719 74F0                     l2671 73B8  
                   l2591 6D8E                     l2583 6D52                     l2575 6D3E  
                   l2567 6D10                     l2913 67DA                     l2905 67B4  
                   l3297 7D10                     l3289 7CD8                     l2833 79D2  
                   l2825 795A                     l2817 78E2                     l2809 786A  
                   l2841 6AFC                     l2497 71A6                     l2489 716A  
                   l3377 6F36                     l3369 6EFC                     l2761 6976  
                   l2753 6930                     l2745 6924                     l2737 68FC  
                   l2665 739A                     l2649 732C                     l2681 73D8  
                   l2673 73C4                     l2593 6DA0                     l2585 6D5E  
                   l2577 6D4A                     l2569 6D22     __end_of_alarmeConfig 69D4  
                   l2907 67CA                     l2915 67E0                     l2931 65F8  
                   l2923 65DA                     l3299 7D20                     l2827 7980  
                   l2819 7908                     l2851 6B32                     l2843 6B00  
                   l2835 6ADA                     l2499 71BE                     l2755 694C  
                   l2739 6902                     l2659 734E                     l2691 7426  
                   l2683 73E4                     l2675 73D0                     l2595 6DA8  
                   l2587 6D62                     l3491 7ADC                     l2917 67F0  
                   l2909 67D2                     l2941 6630                     l2933 6606  
                   l2925 65DE                     l2829 799C                     l2861 6B74  
                   l2853 6B48                     l2845 6B0E                     l2837 6ADE  
                   l2757 695C                     l2765 6986                     l2693 7442  
                   l2685 73E8                     l2589 6D7E                     l2781 62F4  
                   l3493 7BA6                     l2919 67F8                     l2943 663E  
                   l2951 6668                     l2935 660E                     l2927 65EC  
                   l2863 6B92                     l2855 6B50                     l2871 6BB4  
                   l2847 6B1E                     l2839 6AEC                     l2759 696E  
                   l2767 69B2                     l2695 745A                     l2687 7404  
                   l2599 6DB8                     l2783 62FC                     l2775 62D8  
                   l3495 7C02                     l3487 68A0                     l3399 6802  
                   l2881 6742                     l2953 6678                     l2945 6654  
                   l2937 6620                     l2929 65F4                     l2873 6BC4  
                   l2865 6BA2                     l2857 6B5C                     l2849 6B22  
                   l2769 69B6                     l2697 7466                     l2689 7414  
                   l3497 632A                     l2785 6304                     l2777 62DC  
                   l2961 79FE                     l3489 62C0                     l2891 6772  
                   l2883 6750                     l2955 6680                     l2947 665C  
                   l2939 6628                     l2795 77A8                     l2875 6BD4  
                   l2867 6BA4                     l2859 6B6A                     l2699 7478  
                   l3499 6DCE                     l2779 62E4                     l2971 7A18  
                   l2963 7A04                     l2893 6776                     l2885 6758  
                   l2949 6662                     l2797 77C4                     l2869 6BAE  
                   l2789 6314                     l2981 7A5A                     l2973 7A24  
                   l2965 7A10                     l2895 677E                     l2887 675C  
                   l2879 673E                     l2799 77D6                     l2991 7A86  
                   l2983 7A66                     l2975 7A28                     l2959 79F6  
                   l2897 6790                     l2889 676A                     l2993 7A96  
                   l2985 7A6C                     l2899 6798                     l2995 7AA6  
                   l2987 7A72                     l2979 7A48                     l2997 7AB6  
                   l2989 7A76                     STR_1 7FF8                     STR_2 7F18  
                   STR_3 7FC4                     STR_4 7FF8                     STR_5 7F88  
                   STR_6 7F79                     STR_7 7F97                     STR_8 7F97  
                   STR_9 7FF1                     u2020 7924                     u2004 78D4  
                   u2100 6AEC                     u2021 7920                     u2005 78D0  
                   u2101 6AE8                     u2030 7936                     u2014 78F8  
                   u2110 6B0E                     u2031 7932                     u2015 78F4  
                   u2111 6B0A                     u2200 67CA                     u2120 6B48  
                   u2201 67C6                     u2121 6B44                     u2210 67F0  
                   u2130 6B6A                     u2211 67EC                     u2131 6B66  
                   u2220 65EC                     u2060 799C                     u2044 794C  
                   u2140 6B92                     u2300 7B1E                     u2221 65E8  
                   u2061 7998                     u2045 7948                     u2141 6B8E  
                   u2301 7B1A                     u1510 765E                     u1430 7576  
                   u2230 6606                     u2070 79AE                     u2054 7970  
                   u2150 6BC4                     u2310 7C4C                     u1511 765A  
                   u1431 7572                     u2231 6602                     u2071 79AA  
                   u2055 796C                     u2151 6BC0                     u2311 7C48  
                   u1600 7768                     u1520 7678                     u1504 7632  
                   u1440 7588                     u2160 6750                     u2240 6620  
                   u2320 61E2                     u1601 7764                     u1521 7674  
                   u1505 762E                     u1441 7584                     u2161 674C  
                   u2241 661C                     u2321 61DE                     u2170 676A  
                   u2250 663E                     u2330 60D0                     u2410 6FE8  
                   u2171 6766                     u2251 663A                     u2331 60CC  
                   u2411 6FE4                     u2500 64B4                     u2180 6790  
                   u2260 6654                     u2340 60E4                     u2084 79C4  
                   u2404 6FB6                     u1700 6D22                     u2501 64B0  
                   u2181 678C                     u2261 6650                     u2341 60E0  
                   u2085 79C0                     u2405 6FB2                     u1701 6D1E  
                   u2510 64F2                     u1614 777A                     u1550 76D6  
                   u1534 768A                     u1470 75E6                     u1454 759A  
                   u1630 600C                     u2190 67AE                     u2270 6678  
                   u2350 60FA                     u2094 79E8                     u2430 7030  
                   u1710 6D7E                     u2511 64EE                     u1615 7776  
                   u1551 76D2                     u1535 7686                     u1471 75E2  
                   u1455 7596                     u1631 6008                     u2191 67AA  
                   u2271 6674                     u2351 60F6                     u2095 79E4  
                   u2431 702C                     u1711 6D7A                     u2520 6526  
                   u2600 6370                     u1640 5E92                     u1624 779A  
                   u1560 76F0                     u1544 76AA                     u1480 7600  
                   u1464 75BA                     u2360 6110                     u2424 6FFE  
                   u1800 7404                     u1720 6DA0                     u2280 7A44  
                   u2521 6522                     u2601 636C                     u1641 5E8E  
                   u1625 7796                     u1561 76EC                     u1545 76A6  
                   u1481 75FC                     u1465 75B6                     u2361 610C  
                   u2425 6FFA                     u1801 7400                     u1721 6D9C  
                   u2281 7A40                     u2530 69EA                     u2610 6392  
                   u1650 6066                     u2450 7078                     u2370 6F5C  
                   u1810 7426                     u1730 6E08                     u2290 7A5A  
                   u2531 69E6                     u2611 638E                     u1651 6062  
                   u2451 7074                     u2371 6F58                     u1811 7422  
                   u1731 6E04                     u2291 7A56                     u2540 6A1E  
                   u2620 63B0                     u1900 77C4                     u2444 7046  
                   u1740 7262                     u1820 7478                     u1660 6C10  
                   u2621 63AC                     u1901 77C0                     u2445 7042  
                   u1741 725E                     u1821 7474                     u1661 6C0C  
                   u2550 6A4C                     u2470 6408                     u1590 774E  
                   u1574 7702                     u1494 7612                     u1910 77D6  
                   u2390 6FA0                     u2710 6E86                     u1750 7284  
                   u1830 74C2                     u1670 6C6C                     u2630 6278  
                   u2551 6A48                     u2471 6404                     u1591 774A  
                   u1575 76FE                     u1495 760E                     u1911 77D2  
                   u2391 6F9C                     u2711 6E82                     u1751 7280  
                   u1831 74BE                     u1671 6C68                     u2631 6274  
                   u2560 6A60                     u2480 642A                     u1584 7722  
                   u2464 708E                     u2384 6F6E                     u2704 6E56  
                   u1760 72D6                     u1840 74EC                     u1680 6C8E  
                   u2640 62A2                     u2561 6A5C                     u2545 6A14  
                   u2481 6426                     u1585 771E                     u2465 708A  
                   u2385 6F6A                     u2705 6E50                     u1761 72D2  
                   u1841 74E8                     u1681 6C8A                     u2641 629E  
                   u2570 6A88                     u2490 6452                     u2650 65AC  
                   u2730 6ECA                     u1770 7320                     u1850 7558  
                   u1690 6CF6                     u2571 6A84                     u2491 644E  
                   u2651 65A8                     u2731 6EC6                     u1771 731C  
                   u1851 7554                     u1691 6CF2                     u2580 6AA8  
                   u1940 7834                     u1924 77E8                     u2660 65BE  
                   u2724 6E9E                     u1860 68FC                     u1780 734A  
                   u2581 6AA4                     u1941 7830                     u1925 77E4  
                   u2661 65BA                     u2725 6E98                     u1861 68F8  
                   u1781 7346                     u2590 6AB8                     u2670 7C86  
                   u1950 7846                     u1934 7808                     u2750 6F14  
                   u1870 694C                     u1790 73B6                     u2591 6AB4  
                   u2671 7C82                     u1951 7842                     u1935 7804  
                   u2751 6F10                     u1871 6948                     u1791 73B2  
                   u2680 7C9C                     u2760 6F36                     u2744 6EE6  
                   u1880 696E                     u2681 7C98                     u2761 6F32  
                   u2745 6EE0                     u1881 696A                     u2690 6E36  
                   u1890 69D2                     u2691 6E32                     u1891 69CE  
                   u1980 78AC                     u1964 785C                     u1981 78A8  
                   u1965 7858                     u1990 78BE                     u1974 7880  
                   u1991 78BA                     u1975 787C                     _disp 0053  
                   _main 6802                     _freq 004F                     _hora 004A  
                   _menu 79F6                     _keys 003E         ??_PulseClockData 0007  
                   fsr1l 000FE1                     start 0000          pushNibble@value 000C  
           ___param_bank 000000   __end_of_pulseEnablePin 5F7C          ?_compararAlarme 0001  
          ___fltol@sign1 0009          __end_of___aldiv 6BE6                    ?_main 0001  
                  ?_menu 0001          __end_of_adcInit 5FC4          __end_of___awdiv 6802  
                  STR_10 7EF5                    STR_11 7FA6                    STR_20 7F49  
                  STR_12 7F59                    STR_21 7F39                    STR_13 7F69  
                  STR_22 7F29                    STR_30 7FE8                    STR_14 7F49  
                  STR_23 7F59                    STR_31 7FDF                    STR_15 7F39  
                  STR_24 7F69                    STR_16 7F29                    STR_25 7F49  
                  STR_17 7F07                    STR_26 7F39                    STR_18 7F59  
                  STR_27 7F29                    STR_19 7F69                    STR_28 7FB5  
        __end_of___awmod 668A                    STR_29 7FD2          __end_of___fltol 6ADA  
           ?_radioConfig 0001          __end_of___lldiv 6486                    _T0CON 000FD5  
        ___awdiv@divisor 0003          __end_of___llmod 63E2                    _T2CON 000FCA  
        ___awdiv@counter 0005                    _TMR0H 000FD7                    _TMR0L 000FD6  
                  _PORTA 000F80                    _PORTB 000F81                    _PORTC 000F82  
                  _PORTD 000F83                    _PORTE 000F84          __end_of_charKey 7EF5  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95                    _TRISE 000F96          __end_of_lcdChar 5DA2  
        __end_of_lcdInit 673E                    _tecla 0040          __end_of_pinMode 79F6  
                  _valor 7EDB                    menu@i 0021          __end_of_soWrite 6012  
                  tablat 000FF5          __end_of_ssdInit 60BE          __end_of_pwmInit 5D66  
                  status 000FD8             pushNibble@rs 000A     __end_of_digitalWrite 77A8  
        __initialization 5EC6          ?_pulseEnablePin 0001             __end_of_main 68D2  
           __end_of_menu 7C4E              horaConfig@i 0019                   ??_main 0027  
                 ??_menu 001F            __activetblptr 000002     __size_of_digitalRead 016A  
  __end_of_MostraDisplay 7EDA                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0         ___llmod@dividend 000E                   _ADRESH 000FC4  
                 _ADRESL 000FC3                   _CCPR2L 000FBB         ___awdiv@dividend 0001  
                 _INTCON 000FF2                   ___fleq 6486                ??___aldiv 0009  
              ??_adcInit 0007                ??___awdiv 0005                ??___awmod 000D  
              ??___fltol 0005                ??___lldiv 0009                ??___llmod 0016  
                 _kpInit 5E94                   _kpRead 5D28                   clear_0 5EEC  
                 _soInit 5EFC         ___awdiv@quotient 0007          ___awmod@divisor 000B  
              ??_lcdChar 000E                   isa$std 000001                ??_lcdInit 000F  
        ___awmod@counter 000D                   _soneca 0052           _selectFunction 62D8  
                 menu@op 0023         __end_of_ssdDigit 6116             __pdataCOMRAM 004A  
              ??_pinMode 0005    __size_of_alarmeConfig 0102             __mediumconst 7EDA  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_soWrite 0009                ??_ssdInit 0007                ??_pwmInit 0011  
       __end_of_pushByte 6170               ___fleq@ff1 0001               ___fleq@ff2 0005  
             __accesstop 0080  __end_of__initialization 5EF2            ___rparam_used 000001  
          pushByte@value 000D               ___fltol@f1 0001              pinMode@type 0003  
         __pcstackCOMRAM 0001             _alarmeConfig 68D2            __end_of_valor 7EEB  
 __end_of_selectFunction 635A       __size_of_delayMili 0030       __size_of_lcdNumber 0074  
   __size_of_radioConfig 0112       __size_of_lcdString 0056       __size_of_kpReadKey 0078  
  __size_of_digitalWrite 024E               _alarmeHora 7216       __size_of_radioFreq 0112  
             _delayMicro 5D1E         ??_compararAlarme 0015                  ?___fleq 0001  
             _lcdCommand 5D66                  ?_kpInit 0001                  ?_kpRead 0001  
                _CCP2CON 000FBA                  ?_soInit 0001          ?_selectFunction 001B  
             _kpDebounce 6E0A       __size_of_timerInit 0008       __size_of_timerWait 0010  
     __size_of_ssdUpdate 016C             _digitalWrite 755A            alarmeConfig@i 0017  
      __end_of_delayMili 5E94         ??_pulseEnablePin 0007            alarmeHora@pos 0015  
             _horaAlarme 002A               _horaConfig 73B8                  __Hparam 0000  
      __end_of_lcdNumber 61E4                  __Lparam 0000                ?_ssdDigit 0017  
      __end_of_lcdString 6068               _menuAccess 625C          kpDebounce@tempo 0049  
                ___aldiv 6ADA        __end_of_kpReadKey 625C          __size_of___fleq 00AA  
                _adcInit 5F7C                  ___awdiv 673E                  ___awmod 65DA  
                ___fltol 69D4                ?_pushByte 000A                  ___lldiv 63E2  
                ___llmod 635A               _radioAtivo 0050          __size_of_kpInit 0032  
        __size_of_kpRead 000A                  _charKey 7EEB              ssdDigit@val 0018  
            ssdDigit@pos 0017                  __pcinit 5EC6                  _lcdChar 5D84  
                __ramtop 0600          __size_of_soInit 003E                  _lcdInit 668A  
                __ptext0 6802                  __ptext1 5D20                  __ptext2 6068  
                __ptext3 5D4C                  __ptext4 625C                  __ptext5 79F6  
                __ptext6 62D8                  __ptext7 6CF8                  __ptext8 6BE6  
                __ptext9 73B8                  _display 0048             radioConfig@i 0017  
      __end_of_radioFreq 6E0A                  _pinMode 77A8         ___awmod@dividend 0009  
       ___aldiv@dividend 0001               delayMili@a 0001       _MostraDisplay$1195 0019  
     _MostraDisplay$1196 001D               delayMili@i 0004                  _soWrite 5FC4  
                _ssdInit 6068                  _pwmInit 5D4C     end_of_initialization 5EF2  
          ?_PulseEnClock 0001            __Lmediumconst 7EDA              ?_alarmeHora 0015  
         digitalRead@pin 0001            ?_pwmFrequency 000F              ?_delayMicro 0001  
      __end_of_timerInit 5D28          ___lldiv@divisor 0005        __end_of_timerWait 5D4C  
      __end_of_ssdUpdate 7216          ___lldiv@counter 000D               ??_ssdDigit 0018  
       ___aldiv@quotient 000B                  postdec1 000FE5              ?_lcdCommand 0001  
                postinc0 000FEE               ??_pushByte 000C  __size_of_PulseClockData 002A  
          ??_digitalRead 0003               _timerReset 5DA2              ?_kpDebounce 0001  
             lcdNumber@i 0011               _pushNibble 5DEA               lcdString@i 0013  
         ??_PulseEnClock 0007           ??_pwmFrequency 0011               kpReadKey@i 0004  
            ?_horaConfig 0015              ?_menuAccess 0001   __size_of_MostraDisplay 028C  
         __end_of___fleq 6530            __pidataCOMRAM 5D32           __end_of_kpInit 5EC6  
         __end_of_kpRead 5D32           __end_of_soInit 5F3A      __size_of_alarmeHora 01A2  
    __size_of_delayMicro 0002      start_initialization 5EC6      __end_of_digitalRead 70AA  
          _alarmeTocando 004E      __size_of_lcdCommand 001E            horaConfig@pos 0015  
    __size_of_kpDebounce 0136          ___llmod@divisor 0012          ___llmod@counter 0016  
       ??_selectFunction 001D        kpDebounce@oldRead 003A        kpDebounce@newRead 003C  
               ??___fleq 0009               radioFreq@i 0017                 ??_kpInit 0007  
               ??_kpRead 0003              ?_timerReset 0001                 ??_soInit 0007  
          ??_radioConfig 0015              __pbssCOMRAM 002A      __size_of_horaConfig 01A2  
            ?_pushNibble 000A               pinMode@pin 0001            _MostraDisplay 7C4E  
            _alarmeAtivo 0051      __size_of_menuAccess 007C                _delayMili 5E64  
          __pmediumconst 7EDA                 ?___aldiv 0001                 ?_adcInit 0001  
               ?___awdiv 0001                 ?___awmod 0009                 ?___fltol 0001  
               ?___lldiv 0001        __size_of_ssdDigit 0058                 ?___llmod 000E  
         _PulseClockData 5E10                _lcdNumber 6170     __end_of_PulseEnClock 5E64  
              _lcdString 6012              _digitalRead 6F40                 ?_lcdChar 0001  
      __size_of_pushByte 005A                 ?_lcdInit 0001                _kpReadKey 61E4  
   __end_of_pwmFrequency 5DEA                 ?_pinMode 0001                 ?_soWrite 0007  
               ?_ssdInit 0001                 ?_pwmInit 0001           ?_MostraDisplay 0001  
    __end_of_radioConfig 6CF8                _radioFreq 6CF8         pwmFrequency@freq 000F  
        ___aldiv@divisor 0005          ___aldiv@counter 0009             ??_alarmeHora 0017  
    __size_of_timerReset 0022             ??_delayMicro 0003               ?_delayMili 0001  
 __end_of_PulseClockData 5E3A      __size_of_pushNibble 0026             ??_lcdCommand 000E  
              _timerInit 5D20                _timerWait 5D3C                _ssdUpdate 70AA  
             ?_lcdNumber 000F               ?_lcdString 000F             ??_kpDebounce 000A  
             ?_kpReadKey 0001          lcdCommand@value 000E  __size_of_compararAlarme 00AA  
     __end_of_alarmeHora 73B8       __end_of_delayMicro 5D20         timerReset@ciclos 0003  
             ?_radioFreq 0001                copy_data0 5EDA       __end_of_lcdCommand 5D84  
             pushByte@rs 000A             lcdChar@value 000E       __end_of_kpDebounce 6F40  
           ??_horaConfig 0017                 __Hrparam 0000                 __Lrparam 0000  
           ??_menuAccess 0025          ?_PulseClockData 0001               ?_timerInit 0001  
             ?_timerWait 0001               ?_ssdUpdate 0001            ?_alarmeConfig 0001  
       __size_of___aldiv 010C         __size_of_adcInit 0048         __size_of___awdiv 00C4  
       __size_of___awmod 00B0         __size_of___fltol 0106  __size_of_pulseEnablePin 0042  
       __size_of___lldiv 00A4         __size_of___llmod 0088           lcdNumber@value 000F  
       __size_of_lcdChar 001E              _radioConfig 6BE6         __size_of_lcdInit 00B4  
        ??_MostraDisplay 0019         __size_of_pinMode 024E       __end_of_horaConfig 755A  
               _fmStored 002E                 __ptext10 7216                 __ptext11 68D2  
               __ptext20 5DA2                 __ptext12 668A                 __ptext21 70AA  
               __ptext13 5DEA                 __ptext30 6012                 __ptext22 5DC4  
               __ptext14 5E94                 __ptext31 6170                 __ptext23 6ADA  
               __ptext15 5EFC                 __ptext40 5F3A                 __ptext32 5D84  
               __ptext24 61E4                 __ptext16 6E0A                 __ptext41 755A  
               __ptext33 65DA                 __ptext25 5D28                 __ptext17 6F40  
               __ptext42 5D1E                 __ptext34 673E                 __ptext26 5F7C  
               __ptext18 6530                 __ptext43 5E64                 __ptext35 5D66  
               __ptext27 77A8                 __ptext19 5D3C                 __ptext44 635A  
               __ptext36 6116                 __ptext28 7C4E                 __ptext45 63E2  
               __ptext37 5FC4                 __ptext29 60BE                 __ptext46 69D4  
               __ptext38 5E3A                 __ptext47 6486                 __ptext39 5E10  
       __size_of_soWrite 004E         __size_of_ssdInit 0056         __size_of_pwmInit 001A  
     __end_of_menuAccess 62D8              alarmeHora@i 0019            __size_of_main 00D0  
          __size_of_menu 0258              ??_delayMili 0003    __size_of_PulseEnClock 002A  
               _ssdDigit 60BE              delayMicro@a 0001                 isa$xinst 000000  
           soWrite@value 0007           ??_alarmeConfig 0015    __size_of_pwmFrequency 0026  
               _pushByte 6116              ??_lcdNumber 0011              ??_lcdString 0011  
           ??_timerReset 0003                 main@slot 0029              ??_kpReadKey 0001  
        timerReset@tempo 0001             ??_pushNibble 000C            ?_digitalWrite 0001  
            ??_radioFreq 0015             _PulseEnClock 5E3A        digitalWrite@value 0003  
       ___lldiv@dividend 0001       __end_of_timerReset 5DC4             _pwmFrequency 5DC4  
               soWrite@i 0009              ??_timerInit 0001         selectFunction@op 001B  
            ??_timerWait 0001              ??_ssdUpdate 000A       __end_of_pushNibble 5E10  
           ?_digitalRead 0001           _compararAlarme 6530         ___lldiv@quotient 0009  
            kpDebounce@i 000D           ??_digitalWrite 0005             ___aldiv@sign 000A  
        digitalWrite@pin 0001  
